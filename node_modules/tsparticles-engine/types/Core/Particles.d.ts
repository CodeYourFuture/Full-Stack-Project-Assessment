import { ClickMode } from "../Enums/Modes/ClickMode";
import type { Container } from "./Container";
import type { Engine } from "../engine";
import type { ICoordinates } from "./Interfaces/ICoordinates";
import type { IDelta } from "./Interfaces/IDelta";
import type { IMouseData } from "./Interfaces/IMouseData";
import type { IParticle } from "./Interfaces/IParticle";
import type { IParticlesOptions } from "../Options/Interfaces/Particles/IParticlesOptions";
import type { IRgb } from "./Interfaces/Colors";
import { Particle } from "./Particle";
import { QuadTree } from "./Utils/QuadTree";
import type { RecursivePartial } from "../Types/RecursivePartial";
export declare class Particles {
    #private;
    private readonly container;
    get count(): number;
    quadTree: QuadTree;
    linksColors: Map<string, string | IRgb | undefined>;
    limit: number;
    needsSort: boolean;
    lastZIndex: number;
    array: Particle[];
    zArray: Particle[];
    pushing?: boolean;
    linksColor?: IRgb | string;
    grabLineColor?: IRgb | string;
    movers: import("./Interfaces/IParticleMover").IParticleMover[];
    updaters: import("..").IParticleUpdater[];
    private interactionManager;
    private nextId;
    private readonly freqs;
    constructor(engine: Engine, container: Container);
    init(): void;
    redraw(): Promise<void>;
    removeAt(index: number, quantity?: number, group?: string, override?: boolean): void;
    remove(particle: Particle, group?: string, override?: boolean): void;
    update(delta: IDelta): Promise<void>;
    draw(delta: IDelta): Promise<void>;
    clear(): void;
    push(nb: number, mouse?: IMouseData, overrideOptions?: RecursivePartial<IParticlesOptions>, group?: string): void;
    addParticle(position?: ICoordinates, overrideOptions?: RecursivePartial<IParticlesOptions>, group?: string): Particle | undefined;
    addSplitParticle(parent: Particle): Particle | undefined;
    removeQuantity(quantity: number, group?: string): void;
    getLinkFrequency(p1: IParticle, p2: IParticle): number;
    getTriangleFrequency(p1: IParticle, p2: IParticle, p3: IParticle): number;
    addManualParticles(): void;
    setDensity(): void;
    handleClickMode(mode: ClickMode | string): void;
    private applyDensity;
    private initDensityFactor;
    private pushParticle;
}
