{"ast":null,"code":"import _slicedToArray from\"/home/mele/CodeYourFuture/Directory/htmlcssweek4/Full-Stack-Project-Assessment/server/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import\"./App.css\";import React,{useState}from'react';import uploadedVideoData from\"./data/uploadedVideoData.json\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var videoData=uploadedVideoData;function Uploadvideo(){/*function isValidURL(url) {\n    const pattern = /^(https?:\\/\\/)?[a-z0-9\\-._~:/?#[\\]@!$&'()*+,;=]+$/i;\n    return pattern.test(url);\n  }\n\n  \n////////////////////\n/*const [title, setTitle] = useState('');\n  const [url, setURL] = useState('');\n  \n  const handleSubmit = (event) => {\n    event.preventDefault();\n    \n    if (title.trim() === '') {\n          return  (alert('Title cannot be empty.'));\n      \n    }\n    \n    if (!isValidURL(url)) {\n      return (alert('Please enter a valid URL.'));\n      \n    }\n    \n    const currentDate = new Date();\n    const formattedDate = currentDate.toISOString();\n    \n    const submission = {\n      id: (videoData[(videoData.length-1)].id)+1,\n      rating:0,\n      title: title,\n      url: url.split('watch?')[0]+'embed/'+url.split('?')[1],\n      submittedAt: formattedDate\n    };\n     // Construct the URL for the server route\n  const serverUrl = \"/videos\"; // Replace with your server route\n\n  // Send the form data to the server\n  fetch(serverUrl, {\n    method: \"POST\",\n    body: JSON.stringify(submission),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  })\n  .then(response => response.json())\n  .then(data => {\n    // Handle the response from the server\n    console.log(data);\n  })\n  .catch(error => {\n    // Handle errors\n    console.error(\"Error:\", error);\n  });\n\n   \n    \n   \n  };*/ /////////////\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),showForm=_useState2[0],setShowForm=_useState2[1];var handleButtonClick=function handleButtonClick(){if(!showForm){setShowForm(true);}};var handleCancelButtonClick=function handleCancelButtonClick(){if(showForm){setShowForm(false);}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{class:\"uploadVideo_btn\",onClick:handleButtonClick,children:\"Upload Video\"}),showForm&&/*#__PURE__*/_jsxs(\"div\",{class:\"container\",children:[\" \",/*#__PURE__*/_jsxs(\"form\",{action:\"/videos\",method:\"POST\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"title\",children:\"Title:\"}),/*#__PURE__*/_jsx(\"input\",{id:\"title\",type:\"text\"/*value={title}*/,class:\"input\",name:\"title\",onChange:function onChange(e){return setTitle(e.target.value);},required:true})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"url\",children:\"url:\\xA0\\xA0\\xA0\"}),/*#__PURE__*/_jsx(\"input\",{id:\"url\"/*value={url}*/,class:\"input\",type:\"url\",name:\"url\",onChange:function onChange(e){return setURL(e.target.value);},required:true})]}),/*#__PURE__*/_jsxs(\"div\",{class:\"formBtn\",children:[/*#__PURE__*/_jsx(\"button\",{class:\"cancelBtn\",onClick:handleCancelButtonClick,children:\"Cancel\"}),/*#__PURE__*/_jsx(\"button\",{class:\"uploadBtn\",type:\"submit\",children:\"Upload\"})]})]})]})]});}function Searchvideo(){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{for:\"searchid\",children:\"Search:\"}),/*#__PURE__*/_jsx(\"input\",{id:\"searchid\",type:\"text\",class:\"searchVideo\",name:\"search\"})]});}export default function Search(){return/*#__PURE__*/_jsxs(\"div\",{class:\"search\",children:[/*#__PURE__*/_jsx(Uploadvideo,{}),/*#__PURE__*/_jsx(Searchvideo,{})]});}","map":{"version":3,"sources":["/home/mele/CodeYourFuture/Directory/htmlcssweek4/Full-Stack-Project-Assessment/server/client/src/Search.js"],"names":["React","useState","uploadedVideoData","videoData","Uploadvideo","showForm","setShowForm","handleButtonClick","handleCancelButtonClick","e","setTitle","target","value","setURL","Searchvideo","Search"],"mappings":"kLAAA,MAAO,WAAP,CACA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,iBAAP,KAA8B,+BAA9B,C,wFACA,GAAIC,CAAAA,SAAS,CAAGD,iBAAhB,CACA,QAASE,CAAAA,WAAT,EAAuB,CACrB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MA1DuB,CA4DvB;AAEA,cAAgCH,QAAQ,CAAC,KAAD,CAAxC,wCAAOI,QAAP,eAAiBC,WAAjB,eAEE,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAC9B,GAAI,CAACF,QAAL,CAAe,CACbC,WAAW,CAAC,IAAD,CAAX,CACD,CAEF,CALD,CAMA,GAAME,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,EAAM,CACpC,GAAIH,QAAJ,CAAc,CACZC,WAAW,CAAC,KAAD,CAAX,CACD,CAEF,CALD,CAQA,mBAEI,oCACE,eAAQ,KAAK,CAAC,iBAAd,CAAgC,OAAO,CAAEC,iBAAzC,0BADF,CAOCF,QAAQ,eACP,aAAK,KAAK,CAAC,WAAX,4BAAwB,cAAM,MAAM,CAAC,SAAb,CAAuB,MAAM,CAAC,MAA9B,wBACxB,oCACE,cAAO,OAAO,CAAC,OAAf,oBADF,cAEE,cAAO,EAAE,CAAC,OAAV,CAAiB,IAAI,CAAC,MAAO,iBAA7B,CAA+C,KAAK,CAAC,OAArD,CAA6D,IAAI,CAAC,OAAlE,CAA0E,QAAQ,CAAE,kBAACI,CAAD,QAAKC,CAAAA,QAAQ,CAACD,CAAC,CAACE,MAAF,CAASC,KAAV,CAAb,EAApF,CAAkH,QAAQ,KAA1H,EAFF,GADwB,cAKxB,oCACE,cAAO,OAAO,CAAC,KAAf,8BADF,cAEE,cAAO,EAAE,CAAC,KAAM,eAAhB,CAA+B,KAAK,CAAC,OAArC,CAA6C,IAAI,CAAC,KAAlD,CAAyD,IAAI,CAAC,KAA9D,CAAoE,QAAQ,CAAE,kBAACH,CAAD,QAAKI,CAAAA,MAAM,CAACJ,CAAC,CAACE,MAAF,CAASC,KAAV,CAAX,EAA9E,CAA0G,QAAQ,KAAlH,EAFF,GALwB,cASxB,aAAK,KAAK,CAAC,SAAX,wBACE,eAAQ,KAAK,CAAC,WAAd,CAA0B,OAAO,CAAEJ,uBAAnC,oBADF,cAEE,eAAQ,KAAK,CAAC,WAAd,CAA0B,IAAI,CAAC,QAA/B,oBAFF,GATwB,GAAxB,GARF,GAFJ,CA8BD,CACD,QAASM,CAAAA,WAAT,EAAuB,CACrB,mBACE,oCACE,cAAO,GAAG,CAAC,UAAX,qBADF,cAEE,cAAO,EAAE,CAAC,UAAV,CAAqB,IAAI,CAAC,MAA1B,CAAiC,KAAK,CAAC,aAAvC,CAAqD,IAAI,CAAC,QAA1D,EAFF,GADF,CAMD,CAED,cAAe,SAASC,CAAAA,MAAT,EAAkB,CAC/B,mBACE,aAAK,KAAK,CAAC,QAAX,wBACE,KAAC,WAAD,IADF,cAEE,KAAC,WAAD,IAFF,GADF,CAMD","sourcesContent":["import \"./App.css\";\nimport React, { useState } from 'react';\nimport uploadedVideoData from \"./data/uploadedVideoData.json\";\nlet videoData = uploadedVideoData;\nfunction Uploadvideo() {\n  /*function isValidURL(url) {\n    const pattern = /^(https?:\\/\\/)?[a-z0-9\\-._~:/?#[\\]@!$&'()*+,;=]+$/i;\n    return pattern.test(url);\n  }\n\n  \n////////////////////\n/*const [title, setTitle] = useState('');\n  const [url, setURL] = useState('');\n  \n  const handleSubmit = (event) => {\n    event.preventDefault();\n    \n    if (title.trim() === '') {\n          return  (alert('Title cannot be empty.'));\n      \n    }\n    \n    if (!isValidURL(url)) {\n      return (alert('Please enter a valid URL.'));\n      \n    }\n    \n    const currentDate = new Date();\n    const formattedDate = currentDate.toISOString();\n    \n    const submission = {\n      id: (videoData[(videoData.length-1)].id)+1,\n      rating:0,\n      title: title,\n      url: url.split('watch?')[0]+'embed/'+url.split('?')[1],\n      submittedAt: formattedDate\n    };\n     // Construct the URL for the server route\n  const serverUrl = \"/videos\"; // Replace with your server route\n\n  // Send the form data to the server\n  fetch(serverUrl, {\n    method: \"POST\",\n    body: JSON.stringify(submission),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  })\n  .then(response => response.json())\n  .then(data => {\n    // Handle the response from the server\n    console.log(data);\n  })\n  .catch(error => {\n    // Handle errors\n    console.error(\"Error:\", error);\n  });\n\n   \n    \n   \n  };*/\n  \n/////////////\n\nconst [showForm, setShowForm] = useState(false);\n  \n  const handleButtonClick = () => {\n    if (!showForm) {\n      setShowForm(true);\n    }\n\n  };\n  const handleCancelButtonClick = () => {\n    if (showForm) {\n      setShowForm(false);\n    }\n\n  };\n  \n\n  return (\n    \n      <div>\n        <button class=\"uploadVideo_btn\" onClick={handleButtonClick}>\n      \n        Upload Video\n      </button>\n      \n      {/* //onSubmit={handleSubmit} id=\"form\" */}\n      {showForm && (\n        <div class=\"container\"> <form action=\"/videos\" method=\"POST\" >\n        <div>\n          <label htmlFor=\"title\">Title:</label>\n          <input id=\"title\"type=\"text\" /*value={title}*/ class=\"input\" name=\"title\" onChange={(e)=>setTitle(e.target.value)}required></input>\n        </div>\n        <div>\n          <label htmlFor=\"url\">url:&nbsp;&nbsp;&nbsp;</label>\n          <input id=\"url\" /*value={url}*/class=\"input\" type=\"url\"  name=\"url\" onChange={(e)=>setURL(e.target.value)}required></input>\n        </div>\n        <div class=\"formBtn\">\n          <button class=\"cancelBtn\" onClick={handleCancelButtonClick}>Cancel</button>\n          <button class=\"uploadBtn\" type=\"submit\">Upload</button>\n        </div>\n      </form></div>\n       \n      )}\n      \n        </div>\n  \n  );\n}\nfunction Searchvideo() {\n  return (\n    <div>\n      <label for=\"searchid\">Search:</label>\n      <input id=\"searchid\" type=\"text\" class=\"searchVideo\" name=\"search\"></input>\n    </div>\n  );\n}\n\nexport default function Search() {\n  return (\n    <div class=\"search\">\n      <Uploadvideo />\n      <Searchvideo />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}