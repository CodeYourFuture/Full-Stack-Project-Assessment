[{"/Users/roozbehshokri/Documents/GitHub/Full-Stack-Project-Assessment/client/src/index.js":"1","/Users/roozbehshokri/Documents/GitHub/Full-Stack-Project-Assessment/client/src/App.js":"2","/Users/roozbehshokri/Documents/GitHub/Full-Stack-Project-Assessment/client/src/Video.js":"3","/Users/roozbehshokri/Documents/GitHub/Full-Stack-Project-Assessment/client/src/AddVideo.js":"4","/Users/roozbehshokri/Documents/GitHub/Full-Stack-Project-Assessment/client/src/SearchVideo.jsx":"5","/Users/roozbehshokri/Documents/GitHub/Full-Stack-Project-Assessment/client/src/VideoList.jsx":"6","/Users/roozbehshokri/Documents/GitHub/Full-Stack-Project-Assessment/client/src/Votes.js":"7"},{"size":283,"mtime":1685476993878,"results":"8","hashOfConfig":"9"},{"size":5333,"mtime":1686083020590,"results":"10","hashOfConfig":"9"},{"size":1793,"mtime":1686083154464,"results":"11","hashOfConfig":"9"},{"size":1758,"mtime":1685476080383,"results":"12","hashOfConfig":"9"},{"size":858,"mtime":1685474339711,"results":"13","hashOfConfig":"9"},{"size":588,"mtime":1685475004288,"results":"14","hashOfConfig":"9"},{"size":688,"mtime":1685477166181,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1344q8m",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/roozbehshokri/Documents/GitHub/Full-Stack-Project-Assessment/client/src/index.js",[],"/Users/roozbehshokri/Documents/GitHub/Full-Stack-Project-Assessment/client/src/App.js",["32"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Video from \"./Video\";\n\nfunction App() {\n  const [title, setTitle] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n  const [items, setItems] = useState(null);\n  const [search, setSearch] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAscending, setIsAscending] = useState(false);\n  const [isAdding, setIsAdding] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(\n          // `https://full-stack-assessment.onrender.com/videos?ordering=${\n          //   isAscending ? \"asc\" : \"desc\"\n          // }`\n          `http://localhost:5009/videos?ordering=${\n            isAscending ? \"asc\" : \"desc\"\n          }`\n        );\n        setIsLoading(true);\n        setItems(response.data);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    fetchData();\n  }, [isAscending, isAdding]);\n\n  const orderHandler = (e) => {\n    setIsAscending(!isAscending);\n  };\n\n  const searchHandler = async () => {\n    const res = await axios.get(\n      `https://full-stack-assessment.onrender.com/search/?title=${search}`\n    );\n    setItems(res.data);\n  };\n\n  const openHandler = () => {\n    setIsOpen(true);\n  };\n\n  const cancelHandler = () => {\n    setIsOpen(false);\n  };\n\n  const urlHandler = (event) => {\n    setUrl(event.target.value);\n  };\n\n  const titleHandler = (event) => {\n    setTitle(event.target.value);\n  };\n\n  const validateUrl = (value) => {\n    // Regular expression for URL validation\n    const urlRegex = /^(ftp|http|https):\\/\\/[^ \"]+$/;\n    if (!value || !urlRegex.test(value)) {\n      alert(\"Please enter a valid URL\");\n    }\n    return null; // Return null for no validation errors\n  };\n\n  const addClickHandler = async (e) => {\n    e.preventDefault();\n    if (!title) {\n      alert(\"Please enter a title\");\n      return;\n    }\n    validateUrl(url);\n    try {\n      const response = await axios.post(\n        \"https://full-stack-assessment.onrender.com/video\",\n        {\n          title: title.toLowerCase(),\n          url: url.split(\"watch?v=\")[1],\n        }\n      );\n      setTitle(\"\");\n      setUrl(\"\");\n      alert(\"Video has been sent\");\n      // // window.location.reload();\n    } catch (e) {\n      console.log(e);\n    }\n    setIsAdding(!isAdding);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header bg-primary py-4 custom-header\">\n        <h1 className=\"text-center mb-0\">Video Recommendation</h1>\n      </header>\n\n      <Container className=\"p-4\">\n        <Row>\n          <Col md={4} className=\"mb-4\">\n            <Button variant=\"link\" onClick={openHandler}>\n              Add Video\n            </Button>\n            {isOpen && (\n              <>\n                <InputGroup className=\"mb-3\">\n                  <InputGroup.Text>Title</InputGroup.Text>\n                  <Form.Control\n                    onChange={titleHandler}\n                    value={title}\n                    placeholder=\"Title\"\n                    aria-label=\"Title\"\n                    aria-describedby=\"basic-addon1\"\n                  />\n                </InputGroup>\n                <InputGroup className=\"mb-3\">\n                  <InputGroup.Text>URL</InputGroup.Text>\n                  <Form.Control\n                    onChange={urlHandler}\n                    value={url}\n                    placeholder=\"Youtube URL\"\n                    aria-label=\"URL\"\n                    aria-describedby=\"basic-addon1\"\n                  />\n                </InputGroup>\n                <br />\n                <Button\n                  variant=\"outline-success\"\n                  onClick={addClickHandler}\n                  className=\"mr-3\"\n                >\n                  Add\n                </Button>\n                <Button variant=\"outline-warning\" onClick={cancelHandler}>\n                  Cancel\n                </Button>\n              </>\n            )}\n          </Col>\n          <Col>\n            <Button onClick={orderHandler} id=\"asc-btn\">\n              {isAscending ? \"Descending\" : \"Ascending\"}\n            </Button>\n          </Col>\n          <Col md={4}>\n            <InputGroup className=\"mb-3 mt-3\">\n              <Form.Control\n                placeholder=\"Search...\"\n                aria-label=\"Search\"\n                aria-describedby=\"basic-addon1\"\n                onChange={(e) => setSearch(e.target.value)}\n                value={search}\n              />\n              <Button onClick={searchHandler} className=\"mr-5\">\n                Search\n              </Button>\n            </InputGroup>\n          </Col>\n        </Row>\n      </Container>\n      <Container>\n        <Row xs={1} sm={2} md={3}>\n          {!isLoading && <h1>Loading...</h1>}\n          {items &&\n            items.map((item) => (\n              <Col key={item.id}>\n                <Video info={item} />\n              </Col>\n            ))}\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/roozbehshokri/Documents/GitHub/Full-Stack-Project-Assessment/client/src/Video.js",[],"/Users/roozbehshokri/Documents/GitHub/Full-Stack-Project-Assessment/client/src/AddVideo.js",[],["33","34"],"/Users/roozbehshokri/Documents/GitHub/Full-Stack-Project-Assessment/client/src/SearchVideo.jsx",[],"/Users/roozbehshokri/Documents/GitHub/Full-Stack-Project-Assessment/client/src/VideoList.jsx",[],"/Users/roozbehshokri/Documents/GitHub/Full-Stack-Project-Assessment/client/src/Votes.js",[],{"ruleId":"35","severity":1,"message":"36","line":86,"column":13,"nodeType":"37","messageId":"38","endLine":86,"endColumn":21},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-global-assign","no-unsafe-negation"]