{"ast":null,"code":"'use strict';\n\nimport { VERSION } from '../env/data.js';\nimport AxiosError from '../core/AxiosError.js';\nconst validators = {}; // eslint-disable-next-line func-names\n\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\nconst deprecatedWarnings = {};\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */\n\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  } // eslint-disable-next-line func-names\n\n\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new AxiosError(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')), AxiosError.ERR_DEPRECATED);\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true; // eslint-disable-next-line no-console\n\n      console.warn(formatMessage(opt, ' has been deprecated since v' + version + ' and will be removed in the near future'));\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n/**\n * Assert object's properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */\n\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n\n  const keys = Object.keys(options);\n  let i = keys.length;\n\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n\n    if (validator) {\n      const value = options[opt];\n      const result = value === undefined || validator(value, opt, options);\n\n      if (result !== true) {\n        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n\n      continue;\n    }\n\n    if (allowUnknown !== true) {\n      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n\nexport default {\n  assertOptions,\n  validators\n};","map":{"version":3,"sources":["/Users/anuthapaliya/Documents/GitHub/Full-Stack-Project-Assessment/node_modules/axios/lib/helpers/validator.js"],"names":["VERSION","AxiosError","validators","forEach","type","i","validator","thing","deprecatedWarnings","transitional","version","message","formatMessage","opt","desc","value","opts","ERR_DEPRECATED","console","warn","assertOptions","options","schema","allowUnknown","ERR_BAD_OPTION_VALUE","keys","Object","length","result","undefined","ERR_BAD_OPTION"],"mappings":"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","sourcesContent":["'use strict';\n\nimport {VERSION} from '../env/data.js';\nimport AxiosError from '../core/AxiosError.js';\n\nconst validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nconst deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new AxiosError(\n        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),\n        AxiosError.ERR_DEPRECATED\n      );\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  const keys = Object.keys(options);\n  let i = keys.length;\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n    if (validator) {\n      const value = options[opt];\n      const result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n\nexport default {\n  assertOptions,\n  validators\n};\n"]},"metadata":{},"sourceType":"module"}