{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"actions\", \"children\", \"defaultValue\", \"name\", \"onChange\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport FormGroup from '../FormGroup';\nimport useForkRef from '../utils/useForkRef';\nimport useControlled from '../utils/useControlled';\nimport RadioGroupContext from './RadioGroupContext';\nimport useId from '../utils/useId';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst RadioGroup = /*#__PURE__*/React.forwardRef(function RadioGroup(props, ref) {\n  const {\n    // private\n    // eslint-disable-next-line react/prop-types\n    actions,\n    children,\n    defaultValue,\n    name: nameProp,\n    onChange,\n    value: valueProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const rootRef = React.useRef(null);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: 'RadioGroup'\n  });\n  React.useImperativeHandle(actions, () => ({\n    focus: () => {\n      let input = rootRef.current.querySelector('input:not(:disabled):checked');\n\n      if (!input) {\n        input = rootRef.current.querySelector('input:not(:disabled)');\n      }\n\n      if (input) {\n        input.focus();\n      }\n    }\n  }), []);\n  const handleRef = useForkRef(ref, rootRef);\n  const name = useId(nameProp);\n  const contextValue = React.useMemo(() => ({\n    name,\n\n    onChange(event) {\n      setValueState(event.target.value);\n\n      if (onChange) {\n        onChange(event, event.target.value);\n      }\n    },\n\n    value\n  }), [name, onChange, setValueState, value]);\n  return /*#__PURE__*/_jsx(RadioGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(FormGroup, _extends({\n      role: \"radiogroup\",\n      ref: handleRef\n    }, other, {\n      children: children\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? RadioGroup.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * The default value. Use when the component is not controlled.\r\n   */\n  defaultValue: PropTypes.any,\n\n  /**\r\n   * The name used to reference the value of the control.\r\n   * If you don't provide this prop, it falls back to a randomly generated name.\r\n   */\n  name: PropTypes.string,\n\n  /**\r\n   * Callback fired when a radio button is selected.\r\n   *\r\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\r\n   * @param {string} value The value of the selected radio button.\r\n   * You can pull out the new value by accessing `event.target.value` (string).\r\n   */\n  onChange: PropTypes.func,\n\n  /**\r\n   * Value of the selected radio button. The DOM API casts this to a string.\r\n   */\n  value: PropTypes.any\n} : void 0;\nexport default RadioGroup;","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/@mui/material/RadioGroup/RadioGroup.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","FormGroup","useForkRef","useControlled","RadioGroupContext","useId","jsx","_jsx","RadioGroup","forwardRef","props","ref","actions","children","defaultValue","name","nameProp","onChange","value","valueProp","other","rootRef","useRef","setValueState","controlled","default","useImperativeHandle","focus","input","current","querySelector","handleRef","contextValue","useMemo","event","target","Provider","role","process","env","NODE_ENV","propTypes","node","any","string","func"],"mappings":"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","sourcesContent":["'use client';\r\n\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nconst _excluded = [\"actions\", \"children\", \"defaultValue\", \"name\", \"onChange\", \"value\"];\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport FormGroup from '../FormGroup';\r\nimport useForkRef from '../utils/useForkRef';\r\nimport useControlled from '../utils/useControlled';\r\nimport RadioGroupContext from './RadioGroupContext';\r\nimport useId from '../utils/useId';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nconst RadioGroup = /*#__PURE__*/React.forwardRef(function RadioGroup(props, ref) {\r\n  const {\r\n      // private\r\n      // eslint-disable-next-line react/prop-types\r\n      actions,\r\n      children,\r\n      defaultValue,\r\n      name: nameProp,\r\n      onChange,\r\n      value: valueProp\r\n    } = props,\r\n    other = _objectWithoutPropertiesLoose(props, _excluded);\r\n  const rootRef = React.useRef(null);\r\n  const [value, setValueState] = useControlled({\r\n    controlled: valueProp,\r\n    default: defaultValue,\r\n    name: 'RadioGroup'\r\n  });\r\n  React.useImperativeHandle(actions, () => ({\r\n    focus: () => {\r\n      let input = rootRef.current.querySelector('input:not(:disabled):checked');\r\n      if (!input) {\r\n        input = rootRef.current.querySelector('input:not(:disabled)');\r\n      }\r\n      if (input) {\r\n        input.focus();\r\n      }\r\n    }\r\n  }), []);\r\n  const handleRef = useForkRef(ref, rootRef);\r\n  const name = useId(nameProp);\r\n  const contextValue = React.useMemo(() => ({\r\n    name,\r\n    onChange(event) {\r\n      setValueState(event.target.value);\r\n      if (onChange) {\r\n        onChange(event, event.target.value);\r\n      }\r\n    },\r\n    value\r\n  }), [name, onChange, setValueState, value]);\r\n  return /*#__PURE__*/_jsx(RadioGroupContext.Provider, {\r\n    value: contextValue,\r\n    children: /*#__PURE__*/_jsx(FormGroup, _extends({\r\n      role: \"radiogroup\",\r\n      ref: handleRef\r\n    }, other, {\r\n      children: children\r\n    }))\r\n  });\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? RadioGroup.propTypes /* remove-proptypes */ = {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\r\n  // ----------------------------------------------------------------------\r\n  /**\r\n   * The content of the component.\r\n   */\r\n  children: PropTypes.node,\r\n  /**\r\n   * The default value. Use when the component is not controlled.\r\n   */\r\n  defaultValue: PropTypes.any,\r\n  /**\r\n   * The name used to reference the value of the control.\r\n   * If you don't provide this prop, it falls back to a randomly generated name.\r\n   */\r\n  name: PropTypes.string,\r\n  /**\r\n   * Callback fired when a radio button is selected.\r\n   *\r\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\r\n   * @param {string} value The value of the selected radio button.\r\n   * You can pull out the new value by accessing `event.target.value` (string).\r\n   */\r\n  onChange: PropTypes.func,\r\n  /**\r\n   * Value of the selected radio button. The DOM API casts this to a string.\r\n   */\r\n  value: PropTypes.any\r\n} : void 0;\r\nexport default RadioGroup;"]},"metadata":{},"sourceType":"module"}