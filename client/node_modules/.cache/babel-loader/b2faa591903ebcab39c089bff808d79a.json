{"ast":null,"code":"import { useMemo, useRef } from 'react';\nimport hasClass from 'dom-helpers/hasClass';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Popover from './Popover';\nimport Tooltip from './Tooltip'; // This is meant for internal use.\n// This applies a custom offset to the overlay if it's a popover or tooltip.\n\nexport default function useOverlayOffset(customOffset) {\n  const overlayRef = useRef(null);\n  const popoverClass = useBootstrapPrefix(undefined, 'popover');\n  const tooltipClass = useBootstrapPrefix(undefined, 'tooltip');\n  const offset = useMemo(() => ({\n    name: 'offset',\n    options: {\n      offset: () => {\n        if (customOffset) {\n          return customOffset;\n        }\n\n        if (overlayRef.current) {\n          if (hasClass(overlayRef.current, popoverClass)) {\n            return Popover.POPPER_OFFSET;\n          }\n\n          if (hasClass(overlayRef.current, tooltipClass)) {\n            return Tooltip.TOOLTIP_OFFSET;\n          }\n        }\n\n        return [0, 0];\n      }\n    }\n  }), [customOffset, popoverClass, tooltipClass]);\n  return [overlayRef, [offset]];\n}","map":{"version":3,"sources":["/home/coder/CYF/react-learn/Full-Stack-Project-Assessment/client/node_modules/react-bootstrap/esm/useOverlayOffset.js"],"names":["useMemo","useRef","hasClass","useBootstrapPrefix","Popover","Tooltip","useOverlayOffset","customOffset","overlayRef","popoverClass","undefined","tooltipClass","offset","name","options","current","POPPER_OFFSET","TOOLTIP_OFFSET"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,MAAlB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CAEA;AACA;;AACA,eAAe,SAASC,gBAAT,CAA0BC,YAA1B,EAAwC;AACrD,QAAMC,UAAU,GAAGP,MAAM,CAAC,IAAD,CAAzB;AACA,QAAMQ,YAAY,GAAGN,kBAAkB,CAACO,SAAD,EAAY,SAAZ,CAAvC;AACA,QAAMC,YAAY,GAAGR,kBAAkB,CAACO,SAAD,EAAY,SAAZ,CAAvC;AACA,QAAME,MAAM,GAAGZ,OAAO,CAAC,OAAO;AAC5Ba,IAAAA,IAAI,EAAE,QADsB;AAE5BC,IAAAA,OAAO,EAAE;AACPF,MAAAA,MAAM,EAAE,MAAM;AACZ,YAAIL,YAAJ,EAAkB;AAChB,iBAAOA,YAAP;AACD;;AACD,YAAIC,UAAU,CAACO,OAAf,EAAwB;AACtB,cAAIb,QAAQ,CAACM,UAAU,CAACO,OAAZ,EAAqBN,YAArB,CAAZ,EAAgD;AAC9C,mBAAOL,OAAO,CAACY,aAAf;AACD;;AACD,cAAId,QAAQ,CAACM,UAAU,CAACO,OAAZ,EAAqBJ,YAArB,CAAZ,EAAgD;AAC9C,mBAAON,OAAO,CAACY,cAAf;AACD;AACF;;AACD,eAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;AACD;AAdM;AAFmB,GAAP,CAAD,EAkBlB,CAACV,YAAD,EAAeE,YAAf,EAA6BE,YAA7B,CAlBkB,CAAtB;AAmBA,SAAO,CAACH,UAAD,EAAa,CAACI,MAAD,CAAb,CAAP;AACD","sourcesContent":["import { useMemo, useRef } from 'react';\nimport hasClass from 'dom-helpers/hasClass';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Popover from './Popover';\nimport Tooltip from './Tooltip';\n\n// This is meant for internal use.\n// This applies a custom offset to the overlay if it's a popover or tooltip.\nexport default function useOverlayOffset(customOffset) {\n  const overlayRef = useRef(null);\n  const popoverClass = useBootstrapPrefix(undefined, 'popover');\n  const tooltipClass = useBootstrapPrefix(undefined, 'tooltip');\n  const offset = useMemo(() => ({\n    name: 'offset',\n    options: {\n      offset: () => {\n        if (customOffset) {\n          return customOffset;\n        }\n        if (overlayRef.current) {\n          if (hasClass(overlayRef.current, popoverClass)) {\n            return Popover.POPPER_OFFSET;\n          }\n          if (hasClass(overlayRef.current, tooltipClass)) {\n            return Tooltip.TOOLTIP_OFFSET;\n          }\n        }\n        return [0, 0];\n      }\n    }\n  }), [customOffset, popoverClass, tooltipClass]);\n  return [overlayRef, [offset]];\n}"]},"metadata":{},"sourceType":"module"}