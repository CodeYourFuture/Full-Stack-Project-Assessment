{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { useFormControlContext } from '../FormControl';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Input](https://mui.com/base-ui/react-input/#hook)\r\n *\r\n * API:\r\n *\r\n * - [useInput API](https://mui.com/base-ui/react-input/hooks-api/#use-input)\r\n */\n\nexport function useInput(parameters) {\n  const {\n    defaultValue: defaultValueProp,\n    disabled: disabledProp = false,\n    error: errorProp = false,\n    onBlur,\n    onChange,\n    onFocus,\n    required: requiredProp = false,\n    value: valueProp,\n    inputRef: inputRefProp\n  } = parameters;\n  const formControlContext = useFormControlContext();\n  let defaultValue;\n  let disabled;\n  let error;\n  let required;\n  let value;\n\n  if (formControlContext) {\n    var _formControlContext$d, _formControlContext$e, _formControlContext$r;\n\n    defaultValue = undefined;\n    disabled = (_formControlContext$d = formControlContext.disabled) != null ? _formControlContext$d : false;\n    error = (_formControlContext$e = formControlContext.error) != null ? _formControlContext$e : false;\n    required = (_formControlContext$r = formControlContext.required) != null ? _formControlContext$r : false;\n    value = formControlContext.value;\n\n    if (process.env.NODE_ENV !== 'production') {\n      const definedLocalProps = ['defaultValue', 'disabled', 'error', 'required', 'value'].filter(prop => parameters[prop] !== undefined);\n\n      if (definedLocalProps.length > 0) {\n        console.warn(['MUI: You have set props on an input that is inside a FormControl.', 'Set these props on a FormControl instead. Otherwise they will be ignored.', `Ignored props: ${definedLocalProps.join(', ')}`].join('\\n'));\n      }\n    }\n  } else {\n    defaultValue = defaultValueProp;\n    disabled = disabledProp;\n    error = errorProp;\n    required = requiredProp;\n    value = valueProp;\n  }\n\n  const {\n    current: isControlled\n  } = React.useRef(value != null);\n  const handleInputRefWarning = React.useCallback(instance => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (instance && instance.nodeName !== 'INPUT' && !instance.focus) {\n        console.error(['MUI: You have provided a `slots.input` to the input component', 'that does not correctly handle the `ref` prop.', 'Make sure the `ref` prop is called with a HTMLInputElement.'].join('\\n'));\n      }\n    }\n  }, []);\n  const inputRef = React.useRef(null);\n  const handleInputRef = useForkRef(inputRef, inputRefProp, handleInputRefWarning);\n  const [focused, setFocused] = React.useState(false); // The blur won't fire when the disabled state is set on a focused input.\n  // We need to book keep the focused state manually.\n\n  React.useEffect(() => {\n    if (!formControlContext && disabled && focused) {\n      setFocused(false); // @ts-ignore\n\n      onBlur == null ? void 0 : onBlur();\n    }\n  }, [formControlContext, disabled, focused, onBlur]);\n\n  const handleFocus = otherHandlers => event => {\n    var _otherHandlers$onFocu; // Fix a bug with IE11 where the focus/blur events are triggered\n    // while the component is disabled.\n\n\n    if (formControlContext != null && formControlContext.disabled) {\n      event.stopPropagation();\n      return;\n    }\n\n    (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);\n\n    if (formControlContext && formControlContext.onFocus) {\n      var _formControlContext$o;\n\n      formControlContext == null || (_formControlContext$o = formControlContext.onFocus) == null ? void 0 : _formControlContext$o.call(formControlContext);\n    } else {\n      setFocused(true);\n    }\n  };\n\n  const handleBlur = otherHandlers => event => {\n    var _otherHandlers$onBlur;\n\n    (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);\n\n    if (formControlContext && formControlContext.onBlur) {\n      formControlContext.onBlur();\n    } else {\n      setFocused(false);\n    }\n  };\n\n  const handleChange = otherHandlers => function (event) {\n    var _formControlContext$o2, _otherHandlers$onChan;\n\n    if (!isControlled) {\n      const element = event.target || inputRef.current;\n\n      if (element == null) {\n        throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Expected valid input target. Did you use a custom \\`slots.input\\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : _formatMuiErrorMessage(17));\n      }\n    }\n\n    formControlContext == null || (_formControlContext$o2 = formControlContext.onChange) == null ? void 0 : _formControlContext$o2.call(formControlContext, event); // @ts-ignore\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    (_otherHandlers$onChan = otherHandlers.onChange) == null ? void 0 : _otherHandlers$onChan.call(otherHandlers, event, ...args);\n  };\n\n  const handleClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n\n    if (inputRef.current && event.currentTarget === event.target) {\n      inputRef.current.focus();\n    }\n\n    (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n  };\n\n  const getRootProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // onBlur, onChange and onFocus are forwarded to the input slot.\n    const propsEventHandlers = extractEventHandlers(parameters, ['onBlur', 'onChange', 'onFocus']);\n\n    const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));\n\n    return _extends({}, externalProps, externalEventHandlers, {\n      onClick: handleClick(externalEventHandlers)\n    });\n  };\n\n  const getInputProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const propsEventHandlers = {\n      onBlur,\n      onChange,\n      onFocus\n    };\n\n    const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));\n\n    const mergedEventHandlers = _extends({}, externalProps, externalEventHandlers, {\n      onBlur: handleBlur(externalEventHandlers),\n      onChange: handleChange(externalEventHandlers),\n      onFocus: handleFocus(externalEventHandlers)\n    });\n\n    return _extends({}, mergedEventHandlers, {\n      'aria-invalid': error || undefined,\n      defaultValue: defaultValue,\n      ref: handleInputRef,\n      value: value,\n      required,\n      disabled\n    });\n  };\n\n  return {\n    disabled,\n    error,\n    focused,\n    formControlContext,\n    getInputProps,\n    getRootProps,\n    inputRef: handleInputRef,\n    required,\n    value\n  };\n}","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/@mui/base/useInput/useInput.js"],"names":["_extends","formatMuiErrorMessage","_formatMuiErrorMessage","React","unstable_useForkRef","useForkRef","useFormControlContext","extractEventHandlers","useInput","parameters","defaultValue","defaultValueProp","disabled","disabledProp","error","errorProp","onBlur","onChange","onFocus","required","requiredProp","value","valueProp","inputRef","inputRefProp","formControlContext","_formControlContext$d","_formControlContext$e","_formControlContext$r","undefined","process","env","NODE_ENV","definedLocalProps","filter","prop","length","console","warn","join","current","isControlled","useRef","handleInputRefWarning","useCallback","instance","nodeName","focus","handleInputRef","focused","setFocused","useState","useEffect","handleFocus","otherHandlers","event","_otherHandlers$onFocu","stopPropagation","call","_formControlContext$o","handleBlur","_otherHandlers$onBlur","handleChange","_formControlContext$o2","_otherHandlers$onChan","element","target","Error","args","handleClick","_otherHandlers$onClic","currentTarget","onClick","getRootProps","externalProps","propsEventHandlers","externalEventHandlers","getInputProps","mergedEventHandlers","ref"],"mappings":"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","sourcesContent":["'use client';\r\n\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\r\nimport * as React from 'react';\r\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\r\nimport { useFormControlContext } from '../FormControl';\r\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\r\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Input](https://mui.com/base-ui/react-input/#hook)\r\n *\r\n * API:\r\n *\r\n * - [useInput API](https://mui.com/base-ui/react-input/hooks-api/#use-input)\r\n */\r\nexport function useInput(parameters) {\r\n  const {\r\n    defaultValue: defaultValueProp,\r\n    disabled: disabledProp = false,\r\n    error: errorProp = false,\r\n    onBlur,\r\n    onChange,\r\n    onFocus,\r\n    required: requiredProp = false,\r\n    value: valueProp,\r\n    inputRef: inputRefProp\r\n  } = parameters;\r\n  const formControlContext = useFormControlContext();\r\n  let defaultValue;\r\n  let disabled;\r\n  let error;\r\n  let required;\r\n  let value;\r\n  if (formControlContext) {\r\n    var _formControlContext$d, _formControlContext$e, _formControlContext$r;\r\n    defaultValue = undefined;\r\n    disabled = (_formControlContext$d = formControlContext.disabled) != null ? _formControlContext$d : false;\r\n    error = (_formControlContext$e = formControlContext.error) != null ? _formControlContext$e : false;\r\n    required = (_formControlContext$r = formControlContext.required) != null ? _formControlContext$r : false;\r\n    value = formControlContext.value;\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      const definedLocalProps = ['defaultValue', 'disabled', 'error', 'required', 'value'].filter(prop => parameters[prop] !== undefined);\r\n      if (definedLocalProps.length > 0) {\r\n        console.warn(['MUI: You have set props on an input that is inside a FormControl.', 'Set these props on a FormControl instead. Otherwise they will be ignored.', `Ignored props: ${definedLocalProps.join(', ')}`].join('\\n'));\r\n      }\r\n    }\r\n  } else {\r\n    defaultValue = defaultValueProp;\r\n    disabled = disabledProp;\r\n    error = errorProp;\r\n    required = requiredProp;\r\n    value = valueProp;\r\n  }\r\n  const {\r\n    current: isControlled\r\n  } = React.useRef(value != null);\r\n  const handleInputRefWarning = React.useCallback(instance => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (instance && instance.nodeName !== 'INPUT' && !instance.focus) {\r\n        console.error(['MUI: You have provided a `slots.input` to the input component', 'that does not correctly handle the `ref` prop.', 'Make sure the `ref` prop is called with a HTMLInputElement.'].join('\\n'));\r\n      }\r\n    }\r\n  }, []);\r\n  const inputRef = React.useRef(null);\r\n  const handleInputRef = useForkRef(inputRef, inputRefProp, handleInputRefWarning);\r\n  const [focused, setFocused] = React.useState(false);\r\n\r\n  // The blur won't fire when the disabled state is set on a focused input.\r\n  // We need to book keep the focused state manually.\r\n  React.useEffect(() => {\r\n    if (!formControlContext && disabled && focused) {\r\n      setFocused(false);\r\n\r\n      // @ts-ignore\r\n      onBlur == null ? void 0 : onBlur();\r\n    }\r\n  }, [formControlContext, disabled, focused, onBlur]);\r\n  const handleFocus = otherHandlers => event => {\r\n    var _otherHandlers$onFocu;\r\n    // Fix a bug with IE11 where the focus/blur events are triggered\r\n    // while the component is disabled.\r\n    if (formControlContext != null && formControlContext.disabled) {\r\n      event.stopPropagation();\r\n      return;\r\n    }\r\n    (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);\r\n    if (formControlContext && formControlContext.onFocus) {\r\n      var _formControlContext$o;\r\n      formControlContext == null || (_formControlContext$o = formControlContext.onFocus) == null ? void 0 : _formControlContext$o.call(formControlContext);\r\n    } else {\r\n      setFocused(true);\r\n    }\r\n  };\r\n  const handleBlur = otherHandlers => event => {\r\n    var _otherHandlers$onBlur;\r\n    (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);\r\n    if (formControlContext && formControlContext.onBlur) {\r\n      formControlContext.onBlur();\r\n    } else {\r\n      setFocused(false);\r\n    }\r\n  };\r\n  const handleChange = otherHandlers => (event, ...args) => {\r\n    var _formControlContext$o2, _otherHandlers$onChan;\r\n    if (!isControlled) {\r\n      const element = event.target || inputRef.current;\r\n      if (element == null) {\r\n        throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Expected valid input target. Did you use a custom \\`slots.input\\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : _formatMuiErrorMessage(17));\r\n      }\r\n    }\r\n    formControlContext == null || (_formControlContext$o2 = formControlContext.onChange) == null ? void 0 : _formControlContext$o2.call(formControlContext, event);\r\n\r\n    // @ts-ignore\r\n    (_otherHandlers$onChan = otherHandlers.onChange) == null ? void 0 : _otherHandlers$onChan.call(otherHandlers, event, ...args);\r\n  };\r\n  const handleClick = otherHandlers => event => {\r\n    var _otherHandlers$onClic;\r\n    if (inputRef.current && event.currentTarget === event.target) {\r\n      inputRef.current.focus();\r\n    }\r\n    (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\r\n  };\r\n  const getRootProps = (externalProps = {}) => {\r\n    // onBlur, onChange and onFocus are forwarded to the input slot.\r\n    const propsEventHandlers = extractEventHandlers(parameters, ['onBlur', 'onChange', 'onFocus']);\r\n    const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));\r\n    return _extends({}, externalProps, externalEventHandlers, {\r\n      onClick: handleClick(externalEventHandlers)\r\n    });\r\n  };\r\n  const getInputProps = (externalProps = {}) => {\r\n    const propsEventHandlers = {\r\n      onBlur,\r\n      onChange,\r\n      onFocus\r\n    };\r\n    const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));\r\n    const mergedEventHandlers = _extends({}, externalProps, externalEventHandlers, {\r\n      onBlur: handleBlur(externalEventHandlers),\r\n      onChange: handleChange(externalEventHandlers),\r\n      onFocus: handleFocus(externalEventHandlers)\r\n    });\r\n    return _extends({}, mergedEventHandlers, {\r\n      'aria-invalid': error || undefined,\r\n      defaultValue: defaultValue,\r\n      ref: handleInputRef,\r\n      value: value,\r\n      required,\r\n      disabled\r\n    });\r\n  };\r\n  return {\r\n    disabled,\r\n    error,\r\n    focused,\r\n    formControlContext,\r\n    getInputProps,\r\n    getRootProps,\r\n    inputRef: handleInputRef,\r\n    required,\r\n    value\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}