{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument, unstable_useForkRef as useForkRef, unstable_useEventCallback as useEventCallback, unstable_createChainedFunction as createChainedFunction } from '@mui/utils';\nimport { extractEventHandlers } from '../utils';\nimport { ModalManager, ariaHidden } from './ModalManager';\n\nfunction getContainer(container) {\n  return typeof container === 'function' ? container() : container;\n}\n\nfunction getHasTransition(children) {\n  return children ? children.props.hasOwnProperty('in') : false;\n} // A modal manager used to track and manage the state of open Modals.\n// Modals don't open on the server so this won't conflict with concurrent requests.\n\n\nconst defaultManager = new ModalManager();\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Modal](https://mui.com/base-ui/react-modal/#hook)\r\n *\r\n * API:\r\n *\r\n * - [useModal API](https://mui.com/base-ui/react-modal/hooks-api/#use-modal)\r\n */\n\nexport function useModal(parameters) {\n  const {\n    container,\n    disableEscapeKeyDown = false,\n    disableScrollLock = false,\n    // @ts-ignore internal logic - Base UI supports the manager as a prop too\n    manager = defaultManager,\n    closeAfterTransition = false,\n    onTransitionEnter,\n    onTransitionExited,\n    children,\n    onClose,\n    open,\n    rootRef\n  } = parameters; // @ts-ignore internal logic\n\n  const modal = React.useRef({});\n  const mountNodeRef = React.useRef(null);\n  const modalRef = React.useRef(null);\n  const handleRef = useForkRef(modalRef, rootRef);\n  const [exited, setExited] = React.useState(!open);\n  const hasTransition = getHasTransition(children);\n  let ariaHiddenProp = true;\n\n  if (parameters['aria-hidden'] === 'false' || parameters['aria-hidden'] === false) {\n    ariaHiddenProp = false;\n  }\n\n  const getDoc = () => ownerDocument(mountNodeRef.current);\n\n  const getModal = () => {\n    modal.current.modalRef = modalRef.current;\n    modal.current.mount = mountNodeRef.current;\n    return modal.current;\n  };\n\n  const handleMounted = () => {\n    manager.mount(getModal(), {\n      disableScrollLock\n    }); // Fix a bug on Chrome where the scroll isn't initially 0.\n\n    if (modalRef.current) {\n      modalRef.current.scrollTop = 0;\n    }\n  };\n\n  const handleOpen = useEventCallback(() => {\n    const resolvedContainer = getContainer(container) || getDoc().body;\n    manager.add(getModal(), resolvedContainer); // The element was already mounted.\n\n    if (modalRef.current) {\n      handleMounted();\n    }\n  });\n  const isTopModal = React.useCallback(() => manager.isTopModal(getModal()), [manager]);\n  const handlePortalRef = useEventCallback(node => {\n    mountNodeRef.current = node;\n\n    if (!node) {\n      return;\n    }\n\n    if (open && isTopModal()) {\n      handleMounted();\n    } else if (modalRef.current) {\n      ariaHidden(modalRef.current, ariaHiddenProp);\n    }\n  });\n  const handleClose = React.useCallback(() => {\n    manager.remove(getModal(), ariaHiddenProp);\n  }, [ariaHiddenProp, manager]);\n  React.useEffect(() => {\n    return () => {\n      handleClose();\n    };\n  }, [handleClose]);\n  React.useEffect(() => {\n    if (open) {\n      handleOpen();\n    } else if (!hasTransition || !closeAfterTransition) {\n      handleClose();\n    }\n  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);\n\n  const createHandleKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event); // The handler doesn't take event.defaultPrevented into account:\n    //\n    // event.preventDefault() is meant to stop default behaviors like\n    // clicking a checkbox to check it, hitting a button to submit a form,\n    // and hitting left arrow to move the cursor in a text input etc.\n    // Only special HTML elements have these default behaviors.\n\n    if (event.key !== 'Escape' || !isTopModal()) {\n      return;\n    }\n\n    if (!disableEscapeKeyDown) {\n      // Swallow the event, in case someone is listening for the escape key on the body.\n      event.stopPropagation();\n\n      if (onClose) {\n        onClose(event, 'escapeKeyDown');\n      }\n    }\n  };\n\n  const createHandleBackdropClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n\n    (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    if (onClose) {\n      onClose(event, 'backdropClick');\n    }\n  };\n\n  const getRootProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const propsEventHandlers = extractEventHandlers(parameters); // The custom event handlers shouldn't be spread on the root element\n\n    delete propsEventHandlers.onTransitionEnter;\n    delete propsEventHandlers.onTransitionExited;\n\n    const externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);\n\n    return _extends({\n      role: 'presentation'\n    }, externalEventHandlers, {\n      onKeyDown: createHandleKeyDown(externalEventHandlers),\n      ref: handleRef\n    });\n  };\n\n  const getBackdropProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const externalEventHandlers = otherHandlers;\n    return _extends({\n      'aria-hidden': true\n    }, externalEventHandlers, {\n      onClick: createHandleBackdropClick(externalEventHandlers),\n      open\n    });\n  };\n\n  const getTransitionProps = () => {\n    const handleEnter = () => {\n      setExited(false);\n\n      if (onTransitionEnter) {\n        onTransitionEnter();\n      }\n    };\n\n    const handleExited = () => {\n      setExited(true);\n\n      if (onTransitionExited) {\n        onTransitionExited();\n      }\n\n      if (closeAfterTransition) {\n        handleClose();\n      }\n    };\n\n    return {\n      onEnter: createChainedFunction(handleEnter, children.props.onEnter),\n      onExited: createChainedFunction(handleExited, children.props.onExited)\n    };\n  };\n\n  return {\n    getRootProps,\n    getBackdropProps,\n    getTransitionProps,\n    rootRef: handleRef,\n    portalRef: handlePortalRef,\n    isTopModal,\n    exited,\n    hasTransition\n  };\n}","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/@mui/base/unstable_useModal/useModal.js"],"names":["_extends","React","unstable_ownerDocument","ownerDocument","unstable_useForkRef","useForkRef","unstable_useEventCallback","useEventCallback","unstable_createChainedFunction","createChainedFunction","extractEventHandlers","ModalManager","ariaHidden","getContainer","container","getHasTransition","children","props","hasOwnProperty","defaultManager","useModal","parameters","disableEscapeKeyDown","disableScrollLock","manager","closeAfterTransition","onTransitionEnter","onTransitionExited","onClose","open","rootRef","modal","useRef","mountNodeRef","modalRef","handleRef","exited","setExited","useState","hasTransition","ariaHiddenProp","getDoc","current","getModal","mount","handleMounted","scrollTop","handleOpen","resolvedContainer","body","add","isTopModal","useCallback","handlePortalRef","node","handleClose","remove","useEffect","createHandleKeyDown","otherHandlers","event","_otherHandlers$onKeyD","onKeyDown","call","key","stopPropagation","createHandleBackdropClick","_otherHandlers$onClic","onClick","target","currentTarget","getRootProps","propsEventHandlers","externalEventHandlers","role","ref","getBackdropProps","getTransitionProps","handleEnter","handleExited","onEnter","onExited","portalRef"],"mappings":"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","sourcesContent":["'use client';\r\n\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport * as React from 'react';\r\nimport { unstable_ownerDocument as ownerDocument, unstable_useForkRef as useForkRef, unstable_useEventCallback as useEventCallback, unstable_createChainedFunction as createChainedFunction } from '@mui/utils';\r\nimport { extractEventHandlers } from '../utils';\r\nimport { ModalManager, ariaHidden } from './ModalManager';\r\nfunction getContainer(container) {\r\n  return typeof container === 'function' ? container() : container;\r\n}\r\nfunction getHasTransition(children) {\r\n  return children ? children.props.hasOwnProperty('in') : false;\r\n}\r\n\r\n// A modal manager used to track and manage the state of open Modals.\r\n// Modals don't open on the server so this won't conflict with concurrent requests.\r\nconst defaultManager = new ModalManager();\r\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Modal](https://mui.com/base-ui/react-modal/#hook)\r\n *\r\n * API:\r\n *\r\n * - [useModal API](https://mui.com/base-ui/react-modal/hooks-api/#use-modal)\r\n */\r\nexport function useModal(parameters) {\r\n  const {\r\n    container,\r\n    disableEscapeKeyDown = false,\r\n    disableScrollLock = false,\r\n    // @ts-ignore internal logic - Base UI supports the manager as a prop too\r\n    manager = defaultManager,\r\n    closeAfterTransition = false,\r\n    onTransitionEnter,\r\n    onTransitionExited,\r\n    children,\r\n    onClose,\r\n    open,\r\n    rootRef\r\n  } = parameters;\r\n\r\n  // @ts-ignore internal logic\r\n  const modal = React.useRef({});\r\n  const mountNodeRef = React.useRef(null);\r\n  const modalRef = React.useRef(null);\r\n  const handleRef = useForkRef(modalRef, rootRef);\r\n  const [exited, setExited] = React.useState(!open);\r\n  const hasTransition = getHasTransition(children);\r\n  let ariaHiddenProp = true;\r\n  if (parameters['aria-hidden'] === 'false' || parameters['aria-hidden'] === false) {\r\n    ariaHiddenProp = false;\r\n  }\r\n  const getDoc = () => ownerDocument(mountNodeRef.current);\r\n  const getModal = () => {\r\n    modal.current.modalRef = modalRef.current;\r\n    modal.current.mount = mountNodeRef.current;\r\n    return modal.current;\r\n  };\r\n  const handleMounted = () => {\r\n    manager.mount(getModal(), {\r\n      disableScrollLock\r\n    });\r\n\r\n    // Fix a bug on Chrome where the scroll isn't initially 0.\r\n    if (modalRef.current) {\r\n      modalRef.current.scrollTop = 0;\r\n    }\r\n  };\r\n  const handleOpen = useEventCallback(() => {\r\n    const resolvedContainer = getContainer(container) || getDoc().body;\r\n    manager.add(getModal(), resolvedContainer);\r\n\r\n    // The element was already mounted.\r\n    if (modalRef.current) {\r\n      handleMounted();\r\n    }\r\n  });\r\n  const isTopModal = React.useCallback(() => manager.isTopModal(getModal()), [manager]);\r\n  const handlePortalRef = useEventCallback(node => {\r\n    mountNodeRef.current = node;\r\n    if (!node) {\r\n      return;\r\n    }\r\n    if (open && isTopModal()) {\r\n      handleMounted();\r\n    } else if (modalRef.current) {\r\n      ariaHidden(modalRef.current, ariaHiddenProp);\r\n    }\r\n  });\r\n  const handleClose = React.useCallback(() => {\r\n    manager.remove(getModal(), ariaHiddenProp);\r\n  }, [ariaHiddenProp, manager]);\r\n  React.useEffect(() => {\r\n    return () => {\r\n      handleClose();\r\n    };\r\n  }, [handleClose]);\r\n  React.useEffect(() => {\r\n    if (open) {\r\n      handleOpen();\r\n    } else if (!hasTransition || !closeAfterTransition) {\r\n      handleClose();\r\n    }\r\n  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);\r\n  const createHandleKeyDown = otherHandlers => event => {\r\n    var _otherHandlers$onKeyD;\r\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);\r\n\r\n    // The handler doesn't take event.defaultPrevented into account:\r\n    //\r\n    // event.preventDefault() is meant to stop default behaviors like\r\n    // clicking a checkbox to check it, hitting a button to submit a form,\r\n    // and hitting left arrow to move the cursor in a text input etc.\r\n    // Only special HTML elements have these default behaviors.\r\n    if (event.key !== 'Escape' || !isTopModal()) {\r\n      return;\r\n    }\r\n    if (!disableEscapeKeyDown) {\r\n      // Swallow the event, in case someone is listening for the escape key on the body.\r\n      event.stopPropagation();\r\n      if (onClose) {\r\n        onClose(event, 'escapeKeyDown');\r\n      }\r\n    }\r\n  };\r\n  const createHandleBackdropClick = otherHandlers => event => {\r\n    var _otherHandlers$onClic;\r\n    (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\r\n    if (event.target !== event.currentTarget) {\r\n      return;\r\n    }\r\n    if (onClose) {\r\n      onClose(event, 'backdropClick');\r\n    }\r\n  };\r\n  const getRootProps = (otherHandlers = {}) => {\r\n    const propsEventHandlers = extractEventHandlers(parameters);\r\n\r\n    // The custom event handlers shouldn't be spread on the root element\r\n    delete propsEventHandlers.onTransitionEnter;\r\n    delete propsEventHandlers.onTransitionExited;\r\n    const externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);\r\n    return _extends({\r\n      role: 'presentation'\r\n    }, externalEventHandlers, {\r\n      onKeyDown: createHandleKeyDown(externalEventHandlers),\r\n      ref: handleRef\r\n    });\r\n  };\r\n  const getBackdropProps = (otherHandlers = {}) => {\r\n    const externalEventHandlers = otherHandlers;\r\n    return _extends({\r\n      'aria-hidden': true\r\n    }, externalEventHandlers, {\r\n      onClick: createHandleBackdropClick(externalEventHandlers),\r\n      open\r\n    });\r\n  };\r\n  const getTransitionProps = () => {\r\n    const handleEnter = () => {\r\n      setExited(false);\r\n      if (onTransitionEnter) {\r\n        onTransitionEnter();\r\n      }\r\n    };\r\n    const handleExited = () => {\r\n      setExited(true);\r\n      if (onTransitionExited) {\r\n        onTransitionExited();\r\n      }\r\n      if (closeAfterTransition) {\r\n        handleClose();\r\n      }\r\n    };\r\n    return {\r\n      onEnter: createChainedFunction(handleEnter, children.props.onEnter),\r\n      onExited: createChainedFunction(handleExited, children.props.onExited)\r\n    };\r\n  };\r\n  return {\r\n    getRootProps,\r\n    getBackdropProps,\r\n    getTransitionProps,\r\n    rootRef: handleRef,\r\n    portalRef: handlePortalRef,\r\n    isTopModal,\r\n    exited,\r\n    hasTransition\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}