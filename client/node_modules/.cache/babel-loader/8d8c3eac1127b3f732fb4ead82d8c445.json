{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"actions\", \"children\", \"defaultValue\", \"name\", \"onChange\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport FormGroup from '../FormGroup';\nimport useForkRef from '../utils/useForkRef';\nimport useControlled from '../utils/useControlled';\nimport RadioGroupContext from './RadioGroupContext';\nimport useId from '../utils/useId';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar RadioGroup = /*#__PURE__*/React.forwardRef(function RadioGroup(props, ref) {\n  var actions = props.actions,\n      children = props.children,\n      defaultValue = props.defaultValue,\n      nameProp = props.name,\n      _onChange = props.onChange,\n      valueProp = props.value,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var rootRef = React.useRef(null);\n\n  var _useControlled = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: 'RadioGroup'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      value = _useControlled2[0],\n      setValueState = _useControlled2[1];\n\n  React.useImperativeHandle(actions, function () {\n    return {\n      focus: function focus() {\n        var input = rootRef.current.querySelector('input:not(:disabled):checked');\n\n        if (!input) {\n          input = rootRef.current.querySelector('input:not(:disabled)');\n        }\n\n        if (input) {\n          input.focus();\n        }\n      }\n    };\n  }, []);\n  var handleRef = useForkRef(ref, rootRef);\n  var name = useId(nameProp);\n  var contextValue = React.useMemo(function () {\n    return {\n      name: name,\n      onChange: function onChange(event) {\n        setValueState(event.target.value);\n\n        if (_onChange) {\n          _onChange(event, event.target.value);\n        }\n      },\n      value: value\n    };\n  }, [name, _onChange, setValueState, value]);\n  return /*#__PURE__*/_jsx(RadioGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(FormGroup, _extends({\n      role: \"radiogroup\",\n      ref: handleRef\n    }, other, {\n      children: children\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? RadioGroup.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * The name used to reference the value of the control.\n   * If you don't provide this prop, it falls back to a randomly generated name.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when a radio button is selected.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * @param {string} value The value of the selected radio button.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Value of the selected radio button. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default RadioGroup;","map":{"version":3,"sources":["/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@mui/material/RadioGroup/RadioGroup.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","FormGroup","useForkRef","useControlled","RadioGroupContext","useId","jsx","_jsx","RadioGroup","forwardRef","props","ref","actions","children","defaultValue","nameProp","name","onChange","valueProp","value","other","rootRef","useRef","controlled","default","setValueState","useImperativeHandle","focus","input","current","querySelector","handleRef","contextValue","useMemo","event","target","Provider","role","process","env","NODE_ENV","propTypes","node","any","string","func"],"mappings":"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","sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"actions\", \"children\", \"defaultValue\", \"name\", \"onChange\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport FormGroup from '../FormGroup';\nimport useForkRef from '../utils/useForkRef';\nimport useControlled from '../utils/useControlled';\nimport RadioGroupContext from './RadioGroupContext';\nimport useId from '../utils/useId';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst RadioGroup = /*#__PURE__*/React.forwardRef(function RadioGroup(props, ref) {\n  const {\n      // private\n      // eslint-disable-next-line react/prop-types\n      actions,\n      children,\n      defaultValue,\n      name: nameProp,\n      onChange,\n      value: valueProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const rootRef = React.useRef(null);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: 'RadioGroup'\n  });\n  React.useImperativeHandle(actions, () => ({\n    focus: () => {\n      let input = rootRef.current.querySelector('input:not(:disabled):checked');\n      if (!input) {\n        input = rootRef.current.querySelector('input:not(:disabled)');\n      }\n      if (input) {\n        input.focus();\n      }\n    }\n  }), []);\n  const handleRef = useForkRef(ref, rootRef);\n  const name = useId(nameProp);\n  const contextValue = React.useMemo(() => ({\n    name,\n    onChange(event) {\n      setValueState(event.target.value);\n      if (onChange) {\n        onChange(event, event.target.value);\n      }\n    },\n    value\n  }), [name, onChange, setValueState, value]);\n  return /*#__PURE__*/_jsx(RadioGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(FormGroup, _extends({\n      role: \"radiogroup\",\n      ref: handleRef\n    }, other, {\n      children: children\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? RadioGroup.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * The name used to reference the value of the control.\n   * If you don't provide this prop, it falls back to a randomly generated name.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when a radio button is selected.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * @param {string} value The value of the selected radio button.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * Value of the selected radio button. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default RadioGroup;"]},"metadata":{},"sourceType":"module"}