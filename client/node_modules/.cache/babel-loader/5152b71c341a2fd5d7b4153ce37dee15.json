{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport merge from './merge'; // The breakpoint **start** at this value.\n// For instance with the first breakpoint xs: [xs, sm[.\n\nexport const values = {\n  xs: 0,\n  // phone\n  sm: 600,\n  // tablet\n  md: 900,\n  // small laptop\n  lg: 1200,\n  // desktop\n  xl: 1536 // large screen\n\n};\nconst defaultBreakpoints = {\n  // Sorted ASC by size. That's important.\n  // It can't be configured as it's used statically for propTypes.\n  keys: ['xs', 'sm', 'md', 'lg', 'xl'],\n  up: key => `@media (min-width:${values[key]}px)`\n};\nexport function handleBreakpoints(props, propValue, styleFromPropValue) {\n  const theme = props.theme || {};\n\n  if (Array.isArray(propValue)) {\n    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;\n    return propValue.reduce((acc, item, index) => {\n      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);\n      return acc;\n    }, {});\n  }\n\n  if (typeof propValue === 'object') {\n    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;\n    return Object.keys(propValue).reduce((acc, breakpoint) => {\n      // key is breakpoint\n      if (Object.keys(themeBreakpoints.values || values).indexOf(breakpoint) !== -1) {\n        const mediaKey = themeBreakpoints.up(breakpoint);\n        acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);\n      } else {\n        const cssKey = breakpoint;\n        acc[cssKey] = propValue[cssKey];\n      }\n\n      return acc;\n    }, {});\n  }\n\n  const output = styleFromPropValue(propValue);\n  return output;\n}\n\nfunction breakpoints(styleFunction) {\n  // false positive\n  // eslint-disable-next-line react/function-component-definition\n  const newStyleFunction = props => {\n    const theme = props.theme || {};\n    const base = styleFunction(props);\n    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;\n    const extended = themeBreakpoints.keys.reduce((acc, key) => {\n      if (props[key]) {\n        acc = acc || {};\n        acc[themeBreakpoints.up(key)] = styleFunction(_extends({\n          theme\n        }, props[key]));\n      }\n\n      return acc;\n    }, null);\n    return merge(base, extended);\n  };\n\n  newStyleFunction.propTypes = process.env.NODE_ENV !== 'production' ? _extends({}, styleFunction.propTypes, {\n    xs: PropTypes.object,\n    sm: PropTypes.object,\n    md: PropTypes.object,\n    lg: PropTypes.object,\n    xl: PropTypes.object\n  }) : {};\n  newStyleFunction.filterProps = ['xs', 'sm', 'md', 'lg', 'xl', ...styleFunction.filterProps];\n  return newStyleFunction;\n}\n\nexport function createEmptyBreakpointObject() {\n  let breakpointsInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _breakpointsInput$key;\n\n  const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {\n    const breakpointStyleKey = breakpointsInput.up(key);\n    acc[breakpointStyleKey] = {};\n    return acc;\n  }, {});\n  return breakpointsInOrder || {};\n}\nexport function removeUnusedBreakpoints(breakpointKeys, style) {\n  return breakpointKeys.reduce((acc, key) => {\n    const breakpointOutput = acc[key];\n    const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;\n\n    if (isBreakpointUnused) {\n      delete acc[key];\n    }\n\n    return acc;\n  }, style);\n}\nexport function mergeBreakpointsInOrder(breakpointsInput) {\n  const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);\n\n  for (var _len = arguments.length, styles = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    styles[_key - 1] = arguments[_key];\n  }\n\n  const mergedOutput = [emptyBreakpoints, ...styles].reduce((prev, next) => deepmerge(prev, next), {});\n  return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);\n} // compute base for responsive values; e.g.,\n// [1,2,3] => {xs: true, sm: true, md: true}\n// {xs: 1, sm: 2, md: 3} => {xs: true, sm: true, md: true}\n\nexport function computeBreakpointsBase(breakpointValues, themeBreakpoints) {\n  // fixed value\n  if (typeof breakpointValues !== 'object') {\n    return {};\n  }\n\n  const base = {};\n  const breakpointsKeys = Object.keys(themeBreakpoints);\n\n  if (Array.isArray(breakpointValues)) {\n    breakpointsKeys.forEach((breakpoint, i) => {\n      if (i < breakpointValues.length) {\n        base[breakpoint] = true;\n      }\n    });\n  } else {\n    breakpointsKeys.forEach(breakpoint => {\n      if (breakpointValues[breakpoint] != null) {\n        base[breakpoint] = true;\n      }\n    });\n  }\n\n  return base;\n}\nexport function resolveBreakpointValues(_ref) {\n  let {\n    values: breakpointValues,\n    breakpoints: themeBreakpoints,\n    base: customBase\n  } = _ref;\n  const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);\n  const keys = Object.keys(base);\n\n  if (keys.length === 0) {\n    return breakpointValues;\n  }\n\n  let previous;\n  return keys.reduce((acc, breakpoint, i) => {\n    if (Array.isArray(breakpointValues)) {\n      acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];\n      previous = i;\n    } else if (typeof breakpointValues === 'object') {\n      acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];\n      previous = breakpoint;\n    } else {\n      acc[breakpoint] = breakpointValues;\n    }\n\n    return acc;\n  }, {});\n}\nexport default breakpoints;","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/@mui/system/esm/breakpoints.js"],"names":["_extends","PropTypes","deepmerge","merge","values","xs","sm","md","lg","xl","defaultBreakpoints","keys","up","key","handleBreakpoints","props","propValue","styleFromPropValue","theme","Array","isArray","themeBreakpoints","breakpoints","reduce","acc","item","index","Object","breakpoint","indexOf","mediaKey","cssKey","output","styleFunction","newStyleFunction","base","extended","propTypes","process","env","NODE_ENV","object","filterProps","createEmptyBreakpointObject","breakpointsInput","_breakpointsInput$key","breakpointsInOrder","breakpointStyleKey","removeUnusedBreakpoints","breakpointKeys","style","breakpointOutput","isBreakpointUnused","length","mergeBreakpointsInOrder","emptyBreakpoints","styles","mergedOutput","prev","next","computeBreakpointsBase","breakpointValues","breakpointsKeys","forEach","i","resolveBreakpointValues","customBase","previous"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport PropTypes from 'prop-types';\r\nimport { deepmerge } from '@mui/utils';\r\nimport merge from './merge';\r\n\r\n// The breakpoint **start** at this value.\r\n// For instance with the first breakpoint xs: [xs, sm[.\r\nexport const values = {\r\n  xs: 0,\r\n  // phone\r\n  sm: 600,\r\n  // tablet\r\n  md: 900,\r\n  // small laptop\r\n  lg: 1200,\r\n  // desktop\r\n  xl: 1536 // large screen\r\n};\r\n\r\nconst defaultBreakpoints = {\r\n  // Sorted ASC by size. That's important.\r\n  // It can't be configured as it's used statically for propTypes.\r\n  keys: ['xs', 'sm', 'md', 'lg', 'xl'],\r\n  up: key => `@media (min-width:${values[key]}px)`\r\n};\r\nexport function handleBreakpoints(props, propValue, styleFromPropValue) {\r\n  const theme = props.theme || {};\r\n  if (Array.isArray(propValue)) {\r\n    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;\r\n    return propValue.reduce((acc, item, index) => {\r\n      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);\r\n      return acc;\r\n    }, {});\r\n  }\r\n  if (typeof propValue === 'object') {\r\n    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;\r\n    return Object.keys(propValue).reduce((acc, breakpoint) => {\r\n      // key is breakpoint\r\n      if (Object.keys(themeBreakpoints.values || values).indexOf(breakpoint) !== -1) {\r\n        const mediaKey = themeBreakpoints.up(breakpoint);\r\n        acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);\r\n      } else {\r\n        const cssKey = breakpoint;\r\n        acc[cssKey] = propValue[cssKey];\r\n      }\r\n      return acc;\r\n    }, {});\r\n  }\r\n  const output = styleFromPropValue(propValue);\r\n  return output;\r\n}\r\nfunction breakpoints(styleFunction) {\r\n  // false positive\r\n  // eslint-disable-next-line react/function-component-definition\r\n  const newStyleFunction = props => {\r\n    const theme = props.theme || {};\r\n    const base = styleFunction(props);\r\n    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;\r\n    const extended = themeBreakpoints.keys.reduce((acc, key) => {\r\n      if (props[key]) {\r\n        acc = acc || {};\r\n        acc[themeBreakpoints.up(key)] = styleFunction(_extends({\r\n          theme\r\n        }, props[key]));\r\n      }\r\n      return acc;\r\n    }, null);\r\n    return merge(base, extended);\r\n  };\r\n  newStyleFunction.propTypes = process.env.NODE_ENV !== 'production' ? _extends({}, styleFunction.propTypes, {\r\n    xs: PropTypes.object,\r\n    sm: PropTypes.object,\r\n    md: PropTypes.object,\r\n    lg: PropTypes.object,\r\n    xl: PropTypes.object\r\n  }) : {};\r\n  newStyleFunction.filterProps = ['xs', 'sm', 'md', 'lg', 'xl', ...styleFunction.filterProps];\r\n  return newStyleFunction;\r\n}\r\nexport function createEmptyBreakpointObject(breakpointsInput = {}) {\r\n  var _breakpointsInput$key;\r\n  const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {\r\n    const breakpointStyleKey = breakpointsInput.up(key);\r\n    acc[breakpointStyleKey] = {};\r\n    return acc;\r\n  }, {});\r\n  return breakpointsInOrder || {};\r\n}\r\nexport function removeUnusedBreakpoints(breakpointKeys, style) {\r\n  return breakpointKeys.reduce((acc, key) => {\r\n    const breakpointOutput = acc[key];\r\n    const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;\r\n    if (isBreakpointUnused) {\r\n      delete acc[key];\r\n    }\r\n    return acc;\r\n  }, style);\r\n}\r\nexport function mergeBreakpointsInOrder(breakpointsInput, ...styles) {\r\n  const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);\r\n  const mergedOutput = [emptyBreakpoints, ...styles].reduce((prev, next) => deepmerge(prev, next), {});\r\n  return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);\r\n}\r\n\r\n// compute base for responsive values; e.g.,\r\n// [1,2,3] => {xs: true, sm: true, md: true}\r\n// {xs: 1, sm: 2, md: 3} => {xs: true, sm: true, md: true}\r\nexport function computeBreakpointsBase(breakpointValues, themeBreakpoints) {\r\n  // fixed value\r\n  if (typeof breakpointValues !== 'object') {\r\n    return {};\r\n  }\r\n  const base = {};\r\n  const breakpointsKeys = Object.keys(themeBreakpoints);\r\n  if (Array.isArray(breakpointValues)) {\r\n    breakpointsKeys.forEach((breakpoint, i) => {\r\n      if (i < breakpointValues.length) {\r\n        base[breakpoint] = true;\r\n      }\r\n    });\r\n  } else {\r\n    breakpointsKeys.forEach(breakpoint => {\r\n      if (breakpointValues[breakpoint] != null) {\r\n        base[breakpoint] = true;\r\n      }\r\n    });\r\n  }\r\n  return base;\r\n}\r\nexport function resolveBreakpointValues({\r\n  values: breakpointValues,\r\n  breakpoints: themeBreakpoints,\r\n  base: customBase\r\n}) {\r\n  const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);\r\n  const keys = Object.keys(base);\r\n  if (keys.length === 0) {\r\n    return breakpointValues;\r\n  }\r\n  let previous;\r\n  return keys.reduce((acc, breakpoint, i) => {\r\n    if (Array.isArray(breakpointValues)) {\r\n      acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];\r\n      previous = i;\r\n    } else if (typeof breakpointValues === 'object') {\r\n      acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];\r\n      previous = breakpoint;\r\n    } else {\r\n      acc[breakpoint] = breakpointValues;\r\n    }\r\n    return acc;\r\n  }, {});\r\n}\r\nexport default breakpoints;"]},"metadata":{},"sourceType":"module"}