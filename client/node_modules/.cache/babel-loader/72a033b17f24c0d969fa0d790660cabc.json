{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport clsx from 'clsx';\nimport { extractEventHandlers } from './extractEventHandlers';\nimport { omitEventHandlers } from './omitEventHandlers';\n/**\r\n * Merges the slot component internal props (usually coming from a hook)\r\n * with the externally provided ones.\r\n *\r\n * The merge order is (the latter overrides the former):\r\n * 1. The internal props (specified as a getter function to work with get*Props hook result)\r\n * 2. Additional props (specified internally on a Base UI component)\r\n * 3. External props specified on the owner component. These should only be used on a root slot.\r\n * 4. External props specified in the `slotProps.*` prop.\r\n * 5. The `className` prop - combined from all the above.\r\n * @param parameters\r\n * @returns\r\n */\n\nexport function mergeSlotProps(parameters) {\n  const {\n    getSlotProps,\n    additionalProps,\n    externalSlotProps,\n    externalForwardedProps,\n    className\n  } = parameters;\n\n  if (!getSlotProps) {\n    // The simpler case - getSlotProps is not defined, so no internal event handlers are defined,\n    // so we can simply merge all the props without having to worry about extracting event handlers.\n    const joinedClasses = clsx(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className, additionalProps == null ? void 0 : additionalProps.className);\n\n    const mergedStyle = _extends({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);\n\n    const props = _extends({}, additionalProps, externalForwardedProps, externalSlotProps);\n\n    if (joinedClasses.length > 0) {\n      props.className = joinedClasses;\n    }\n\n    if (Object.keys(mergedStyle).length > 0) {\n      props.style = mergedStyle;\n    }\n\n    return {\n      props,\n      internalRef: undefined\n    };\n  } // In this case, getSlotProps is responsible for calling the external event handlers.\n  // We don't need to include them in the merged props because of this.\n\n\n  const eventHandlers = extractEventHandlers(_extends({}, externalForwardedProps, externalSlotProps));\n  const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);\n  const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);\n  const internalSlotProps = getSlotProps(eventHandlers); // The order of classes is important here.\n  // Emotion (that we use in libraries consuming Base UI) depends on this order\n  // to properly override style. It requires the most important classes to be last\n  // (see https://github.com/mui/material-ui/pull/33205) for the related discussion.\n\n  const joinedClasses = clsx(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);\n\n  const mergedStyle = _extends({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);\n\n  const props = _extends({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);\n\n  if (joinedClasses.length > 0) {\n    props.className = joinedClasses;\n  }\n\n  if (Object.keys(mergedStyle).length > 0) {\n    props.style = mergedStyle;\n  }\n\n  return {\n    props,\n    internalRef: internalSlotProps.ref\n  };\n}","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/@mui/base/utils/mergeSlotProps.js"],"names":["_extends","clsx","extractEventHandlers","omitEventHandlers","mergeSlotProps","parameters","getSlotProps","additionalProps","externalSlotProps","externalForwardedProps","className","joinedClasses","mergedStyle","style","props","length","Object","keys","internalRef","undefined","eventHandlers","componentsPropsWithoutEventHandlers","otherPropsWithoutEventHandlers","internalSlotProps","ref"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport clsx from 'clsx';\r\nimport { extractEventHandlers } from './extractEventHandlers';\r\nimport { omitEventHandlers } from './omitEventHandlers';\r\n/**\r\n * Merges the slot component internal props (usually coming from a hook)\r\n * with the externally provided ones.\r\n *\r\n * The merge order is (the latter overrides the former):\r\n * 1. The internal props (specified as a getter function to work with get*Props hook result)\r\n * 2. Additional props (specified internally on a Base UI component)\r\n * 3. External props specified on the owner component. These should only be used on a root slot.\r\n * 4. External props specified in the `slotProps.*` prop.\r\n * 5. The `className` prop - combined from all the above.\r\n * @param parameters\r\n * @returns\r\n */\r\nexport function mergeSlotProps(parameters) {\r\n  const {\r\n    getSlotProps,\r\n    additionalProps,\r\n    externalSlotProps,\r\n    externalForwardedProps,\r\n    className\r\n  } = parameters;\r\n  if (!getSlotProps) {\r\n    // The simpler case - getSlotProps is not defined, so no internal event handlers are defined,\r\n    // so we can simply merge all the props without having to worry about extracting event handlers.\r\n    const joinedClasses = clsx(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className, additionalProps == null ? void 0 : additionalProps.className);\r\n    const mergedStyle = _extends({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);\r\n    const props = _extends({}, additionalProps, externalForwardedProps, externalSlotProps);\r\n    if (joinedClasses.length > 0) {\r\n      props.className = joinedClasses;\r\n    }\r\n    if (Object.keys(mergedStyle).length > 0) {\r\n      props.style = mergedStyle;\r\n    }\r\n    return {\r\n      props,\r\n      internalRef: undefined\r\n    };\r\n  }\r\n\r\n  // In this case, getSlotProps is responsible for calling the external event handlers.\r\n  // We don't need to include them in the merged props because of this.\r\n\r\n  const eventHandlers = extractEventHandlers(_extends({}, externalForwardedProps, externalSlotProps));\r\n  const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);\r\n  const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);\r\n  const internalSlotProps = getSlotProps(eventHandlers);\r\n\r\n  // The order of classes is important here.\r\n  // Emotion (that we use in libraries consuming Base UI) depends on this order\r\n  // to properly override style. It requires the most important classes to be last\r\n  // (see https://github.com/mui/material-ui/pull/33205) for the related discussion.\r\n  const joinedClasses = clsx(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);\r\n  const mergedStyle = _extends({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);\r\n  const props = _extends({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);\r\n  if (joinedClasses.length > 0) {\r\n    props.className = joinedClasses;\r\n  }\r\n  if (Object.keys(mergedStyle).length > 0) {\r\n    props.style = mergedStyle;\r\n  }\r\n  return {\r\n    props,\r\n    internalRef: internalSlotProps.ref\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}