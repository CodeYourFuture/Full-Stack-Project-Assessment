{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from \"react\";\nimport { cssValue, parseLengthAndUnit } from \"./helpers/unitConverter\";\nimport { createAnimation } from \"./helpers/animation\";\nvar grid = createAnimation(\"GridLoader\", \"0% {transform: scale(1)} 50% {transform: scale(0.5); opacity: 0.7} 100% {transform: scale(1); opacity: 1}\", \"grid\");\nvar random = function random(top) {\n  return Math.random() * top;\n};\nfunction GridLoader(_a) {\n  var _b = _a.loading,\n    loading = _b === void 0 ? true : _b,\n    _c = _a.color,\n    color = _c === void 0 ? \"#000000\" : _c,\n    _d = _a.speedMultiplier,\n    speedMultiplier = _d === void 0 ? 1 : _d,\n    _e = _a.cssOverride,\n    cssOverride = _e === void 0 ? {} : _e,\n    _f = _a.size,\n    size = _f === void 0 ? 15 : _f,\n    _g = _a.margin,\n    margin = _g === void 0 ? 2 : _g,\n    additionalprops = __rest(_a, [\"loading\", \"color\", \"speedMultiplier\", \"cssOverride\", \"size\", \"margin\"]);\n  var sizeWithUnit = parseLengthAndUnit(size);\n  var marginWithUnit = parseLengthAndUnit(margin);\n  var width = parseFloat(sizeWithUnit.value.toString()) * 3 + parseFloat(marginWithUnit.value.toString()) * 6;\n  var wrapper = __assign({\n    width: \"\".concat(width).concat(sizeWithUnit.unit),\n    fontSize: 0,\n    display: \"inline-block\"\n  }, cssOverride);\n  var style = function style(rand) {\n    return {\n      display: \"inline-block\",\n      backgroundColor: color,\n      width: \"\".concat(cssValue(size)),\n      height: \"\".concat(cssValue(size)),\n      margin: cssValue(margin),\n      borderRadius: \"100%\",\n      animationFillMode: \"both\",\n      animation: \"\".concat(grid, \" \").concat((rand / 100 + 0.6) / speedMultiplier, \"s \").concat(rand / 100 - 0.2, \"s infinite ease\")\n    };\n  };\n  if (!loading) {\n    return null;\n  }\n  return React.createElement(\"span\", __assign({\n    style: wrapper\n  }, additionalprops, {\n    ref: function ref(node) {\n      if (node) {\n        node.style.setProperty(\"width\", \"\".concat(width).concat(sizeWithUnit.unit), \"important\");\n      }\n    }\n  }), React.createElement(\"span\", {\n    style: style(random(100))\n  }), React.createElement(\"span\", {\n    style: style(random(100))\n  }), React.createElement(\"span\", {\n    style: style(random(100))\n  }), React.createElement(\"span\", {\n    style: style(random(100))\n  }), React.createElement(\"span\", {\n    style: style(random(100))\n  }), React.createElement(\"span\", {\n    style: style(random(100))\n  }), React.createElement(\"span\", {\n    style: style(random(100))\n  }), React.createElement(\"span\", {\n    style: style(random(100))\n  }), React.createElement(\"span\", {\n    style: style(random(100))\n  }));\n}\nexport default GridLoader;","map":null,"metadata":{},"sourceType":"module"}