{"ast":null,"code":"import { useMemo, useRef } from 'react';\nimport useMounted from './useMounted';\nimport useWillUnmount from './useWillUnmount';\n/*\n * Browsers including Internet Explorer, Chrome, Safari, and Firefox store the\n * delay as a 32-bit signed integer internally. This causes an integer overflow\n * when using delays larger than 2,147,483,647 ms (about 24.8 days),\n * resulting in the timeout being executed immediately.\n *\n * via: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\n */\n\nconst MAX_DELAY_MS = 2 ** 31 - 1;\n\nfunction setChainedTimeout(handleRef, fn, timeoutAtMs) {\n  const delayMs = timeoutAtMs - Date.now();\n  handleRef.current = delayMs <= MAX_DELAY_MS ? setTimeout(fn, delayMs) : setTimeout(() => setChainedTimeout(handleRef, fn, timeoutAtMs), MAX_DELAY_MS);\n}\n/**\n * Returns a controller object for setting a timeout that is properly cleaned up\n * once the component unmounts. New timeouts cancel and replace existing ones.\n *\n *\n *\n * ```tsx\n * const { set, clear } = useTimeout();\n * const [hello, showHello] = useState(false);\n * //Display hello after 5 seconds\n * set(() => showHello(true), 5000);\n * return (\n *   <div className=\"App\">\n *     {hello ? <h3>Hello</h3> : null}\n *   </div>\n * );\n * ```\n */\n\n\nexport default function useTimeout() {\n  const isMounted = useMounted(); // types are confused between node and web here IDK\n\n  const handleRef = useRef();\n  useWillUnmount(() => clearTimeout(handleRef.current));\n  return useMemo(() => {\n    const clear = () => clearTimeout(handleRef.current);\n\n    function set(fn) {\n      let delayMs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (!isMounted()) return;\n      clear();\n\n      if (delayMs <= MAX_DELAY_MS) {\n        // For simplicity, if the timeout is short, just set a normal timeout.\n        handleRef.current = setTimeout(fn, delayMs);\n      } else {\n        setChainedTimeout(handleRef, fn, Date.now() + delayMs);\n      }\n    }\n\n    return {\n      set,\n      clear\n    };\n  }, []);\n}","map":{"version":3,"sources":["/home/coder/CYF/react-learn/Full-Stack-Project-Assessment/client/node_modules/@restart/hooks/esm/useTimeout.js"],"names":["useMemo","useRef","useMounted","useWillUnmount","MAX_DELAY_MS","setChainedTimeout","handleRef","fn","timeoutAtMs","delayMs","Date","now","current","setTimeout","useTimeout","isMounted","clearTimeout","clear","set"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,MAAlB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,KAAK,EAAL,GAAU,CAA/B;;AACA,SAASC,iBAAT,CAA2BC,SAA3B,EAAsCC,EAAtC,EAA0CC,WAA1C,EAAuD;AACrD,QAAMC,OAAO,GAAGD,WAAW,GAAGE,IAAI,CAACC,GAAL,EAA9B;AACAL,EAAAA,SAAS,CAACM,OAAV,GAAoBH,OAAO,IAAIL,YAAX,GAA0BS,UAAU,CAACN,EAAD,EAAKE,OAAL,CAApC,GAAoDI,UAAU,CAAC,MAAMR,iBAAiB,CAACC,SAAD,EAAYC,EAAZ,EAAgBC,WAAhB,CAAxB,EAAsDJ,YAAtD,CAAlF;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASU,UAAT,GAAsB;AACnC,QAAMC,SAAS,GAAGb,UAAU,EAA5B,CADmC,CAGnC;;AACA,QAAMI,SAAS,GAAGL,MAAM,EAAxB;AACAE,EAAAA,cAAc,CAAC,MAAMa,YAAY,CAACV,SAAS,CAACM,OAAX,CAAnB,CAAd;AACA,SAAOZ,OAAO,CAAC,MAAM;AACnB,UAAMiB,KAAK,GAAG,MAAMD,YAAY,CAACV,SAAS,CAACM,OAAX,CAAhC;;AACA,aAASM,GAAT,CAAaX,EAAb,EAA8B;AAAA,UAAbE,OAAa,uEAAH,CAAG;AAC5B,UAAI,CAACM,SAAS,EAAd,EAAkB;AAClBE,MAAAA,KAAK;;AACL,UAAIR,OAAO,IAAIL,YAAf,EAA6B;AAC3B;AACAE,QAAAA,SAAS,CAACM,OAAV,GAAoBC,UAAU,CAACN,EAAD,EAAKE,OAAL,CAA9B;AACD,OAHD,MAGO;AACLJ,QAAAA,iBAAiB,CAACC,SAAD,EAAYC,EAAZ,EAAgBG,IAAI,CAACC,GAAL,KAAaF,OAA7B,CAAjB;AACD;AACF;;AACD,WAAO;AACLS,MAAAA,GADK;AAELD,MAAAA;AAFK,KAAP;AAID,GAhBa,EAgBX,EAhBW,CAAd;AAiBD","sourcesContent":["import { useMemo, useRef } from 'react';\nimport useMounted from './useMounted';\nimport useWillUnmount from './useWillUnmount';\n\n/*\n * Browsers including Internet Explorer, Chrome, Safari, and Firefox store the\n * delay as a 32-bit signed integer internally. This causes an integer overflow\n * when using delays larger than 2,147,483,647 ms (about 24.8 days),\n * resulting in the timeout being executed immediately.\n *\n * via: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\n */\nconst MAX_DELAY_MS = 2 ** 31 - 1;\nfunction setChainedTimeout(handleRef, fn, timeoutAtMs) {\n  const delayMs = timeoutAtMs - Date.now();\n  handleRef.current = delayMs <= MAX_DELAY_MS ? setTimeout(fn, delayMs) : setTimeout(() => setChainedTimeout(handleRef, fn, timeoutAtMs), MAX_DELAY_MS);\n}\n\n/**\n * Returns a controller object for setting a timeout that is properly cleaned up\n * once the component unmounts. New timeouts cancel and replace existing ones.\n *\n *\n *\n * ```tsx\n * const { set, clear } = useTimeout();\n * const [hello, showHello] = useState(false);\n * //Display hello after 5 seconds\n * set(() => showHello(true), 5000);\n * return (\n *   <div className=\"App\">\n *     {hello ? <h3>Hello</h3> : null}\n *   </div>\n * );\n * ```\n */\nexport default function useTimeout() {\n  const isMounted = useMounted();\n\n  // types are confused between node and web here IDK\n  const handleRef = useRef();\n  useWillUnmount(() => clearTimeout(handleRef.current));\n  return useMemo(() => {\n    const clear = () => clearTimeout(handleRef.current);\n    function set(fn, delayMs = 0) {\n      if (!isMounted()) return;\n      clear();\n      if (delayMs <= MAX_DELAY_MS) {\n        // For simplicity, if the timeout is short, just set a normal timeout.\n        handleRef.current = setTimeout(fn, delayMs);\n      } else {\n        setChainedTimeout(handleRef, fn, Date.now() + delayMs);\n      }\n    }\n    return {\n      set,\n      clear\n    };\n  }, []);\n}"]},"metadata":{},"sourceType":"module"}