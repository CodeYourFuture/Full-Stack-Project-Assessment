{"ast":null,"code":"export function getTypeByValue(value) {\n  var valueType = typeof value;\n\n  switch (valueType) {\n    case 'number':\n      if (Number.isNaN(value)) {\n        return 'NaN';\n      }\n\n      if (!Number.isFinite(value)) {\n        return 'Infinity';\n      }\n\n      if (value !== Math.floor(value)) {\n        return 'float';\n      }\n\n      return 'number';\n\n    case 'object':\n      if (value === null) {\n        return 'null';\n      }\n\n      return value.constructor.name;\n\n    default:\n      return valueType;\n  }\n} // IE 11 support\n\nfunction ponyfillIsInteger(x) {\n  // eslint-disable-next-line no-restricted-globals\n  return typeof x === 'number' && isFinite(x) && Math.floor(x) === x;\n}\n\nvar isInteger = Number.isInteger || ponyfillIsInteger;\n\nfunction requiredInteger(props, propName, componentName, location) {\n  var propValue = props[propName];\n\n  if (propValue == null || !isInteger(propValue)) {\n    var propType = getTypeByValue(propValue);\n    return new RangeError(\"Invalid \".concat(location, \" `\").concat(propName, \"` of type `\").concat(propType, \"` supplied to `\").concat(componentName, \"`, expected `integer`.\"));\n  }\n\n  return null;\n}\n\nfunction validator(props, propName) {\n  var propValue = props[propName];\n\n  if (propValue === undefined) {\n    return null;\n  }\n\n  for (var _len = arguments.length, other = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    other[_key - 2] = arguments[_key];\n  }\n\n  return requiredInteger.apply(void 0, [props, propName].concat(other));\n}\n\nfunction validatorNoop() {\n  return null;\n}\n\nvalidator.isRequired = requiredInteger;\nvalidatorNoop.isRequired = validatorNoop;\nexport default process.env.NODE_ENV === 'production' ? validatorNoop : validator;","map":{"version":3,"sources":["/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@mui/utils/esm/integerPropType.js"],"names":["getTypeByValue","value","valueType","Number","isNaN","isFinite","Math","floor","constructor","name","ponyfillIsInteger","x","isInteger","requiredInteger","props","propName","componentName","location","propValue","propType","RangeError","validator","undefined","other","validatorNoop","isRequired","process","env","NODE_ENV"],"mappings":"AAAA,OAAO,SAASA,cAAT,CAAwBC,KAAxB,EAA+B;AACpC,MAAMC,SAAS,GAAG,OAAOD,KAAzB;;AACA,UAAQC,SAAR;AACE,SAAK,QAAL;AACE,UAAIC,MAAM,CAACC,KAAP,CAAaH,KAAb,CAAJ,EAAyB;AACvB,eAAO,KAAP;AACD;;AACD,UAAI,CAACE,MAAM,CAACE,QAAP,CAAgBJ,KAAhB,CAAL,EAA6B;AAC3B,eAAO,UAAP;AACD;;AACD,UAAIA,KAAK,KAAKK,IAAI,CAACC,KAAL,CAAWN,KAAX,CAAd,EAAiC;AAC/B,eAAO,OAAP;AACD;;AACD,aAAO,QAAP;;AACF,SAAK,QAAL;AACE,UAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB,eAAO,MAAP;AACD;;AACD,aAAOA,KAAK,CAACO,WAAN,CAAkBC,IAAzB;;AACF;AACE,aAAOP,SAAP;AAlBJ;AAoBD,C,CAED;;AACA,SAASQ,iBAAT,CAA2BC,CAA3B,EAA8B;AAC5B;AACA,SAAO,OAAOA,CAAP,KAAa,QAAb,IAAyBN,QAAQ,CAACM,CAAD,CAAjC,IAAwCL,IAAI,CAACC,KAAL,CAAWI,CAAX,MAAkBA,CAAjE;AACD;;AACD,IAAMC,SAAS,GAAGT,MAAM,CAACS,SAAP,IAAoBF,iBAAtC;;AACA,SAASG,eAAT,CAAyBC,KAAzB,EAAgCC,QAAhC,EAA0CC,aAA1C,EAAyDC,QAAzD,EAAmE;AACjE,MAAMC,SAAS,GAAGJ,KAAK,CAACC,QAAD,CAAvB;;AACA,MAAIG,SAAS,IAAI,IAAb,IAAqB,CAACN,SAAS,CAACM,SAAD,CAAnC,EAAgD;AAC9C,QAAMC,QAAQ,GAAGnB,cAAc,CAACkB,SAAD,CAA/B;AACA,WAAO,IAAIE,UAAJ,mBAA0BH,QAA1B,eAAwCF,QAAxC,wBAAgEI,QAAhE,4BAA4FH,aAA5F,4BAAP;AACD;;AACD,SAAO,IAAP;AACD;;AACD,SAASK,SAAT,CAAmBP,KAAnB,EAA0BC,QAA1B,EAA8C;AAC5C,MAAMG,SAAS,GAAGJ,KAAK,CAACC,QAAD,CAAvB;;AACA,MAAIG,SAAS,KAAKI,SAAlB,EAA6B;AAC3B,WAAO,IAAP;AACD;;AAJ2C,oCAAPC,KAAO;AAAPA,IAAAA,KAAO;AAAA;;AAK5C,SAAOV,eAAe,MAAf,UAAgBC,KAAhB,EAAuBC,QAAvB,SAAoCQ,KAApC,EAAP;AACD;;AACD,SAASC,aAAT,GAAyB;AACvB,SAAO,IAAP;AACD;;AACDH,SAAS,CAACI,UAAV,GAAuBZ,eAAvB;AACAW,aAAa,CAACC,UAAd,GAA2BD,aAA3B;AACA,eAAeE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCJ,aAAxC,GAAwDH,SAAvE","sourcesContent":["export function getTypeByValue(value) {\n  const valueType = typeof value;\n  switch (valueType) {\n    case 'number':\n      if (Number.isNaN(value)) {\n        return 'NaN';\n      }\n      if (!Number.isFinite(value)) {\n        return 'Infinity';\n      }\n      if (value !== Math.floor(value)) {\n        return 'float';\n      }\n      return 'number';\n    case 'object':\n      if (value === null) {\n        return 'null';\n      }\n      return value.constructor.name;\n    default:\n      return valueType;\n  }\n}\n\n// IE 11 support\nfunction ponyfillIsInteger(x) {\n  // eslint-disable-next-line no-restricted-globals\n  return typeof x === 'number' && isFinite(x) && Math.floor(x) === x;\n}\nconst isInteger = Number.isInteger || ponyfillIsInteger;\nfunction requiredInteger(props, propName, componentName, location) {\n  const propValue = props[propName];\n  if (propValue == null || !isInteger(propValue)) {\n    const propType = getTypeByValue(propValue);\n    return new RangeError(`Invalid ${location} \\`${propName}\\` of type \\`${propType}\\` supplied to \\`${componentName}\\`, expected \\`integer\\`.`);\n  }\n  return null;\n}\nfunction validator(props, propName, ...other) {\n  const propValue = props[propName];\n  if (propValue === undefined) {\n    return null;\n  }\n  return requiredInteger(props, propName, ...other);\n}\nfunction validatorNoop() {\n  return null;\n}\nvalidator.isRequired = requiredInteger;\nvalidatorNoop.isRequired = validatorNoop;\nexport default process.env.NODE_ENV === 'production' ? validatorNoop : validator;"]},"metadata":{},"sourceType":"module"}