{"ast":null,"code":"'use strict';\n/**\r\n * Calculate data maxRate\r\n * @param {Number} [samplesCount= 10]\r\n * @param {Number} [min= 1000]\r\n * @returns {Function}\r\n */\n\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n  min = min !== undefined ? min : 1000;\n  return function push(chunkLength) {\n    const now = Date.now();\n    const startedAt = timestamps[tail];\n\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n    let i = tail;\n    let bytesCount = 0;\n\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n\n    head = (head + 1) % samplesCount;\n\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n\n    if (now - firstSampleTS < min) {\n      return;\n    }\n\n    const passed = startedAt && now - startedAt;\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n\nexport default speedometer;","map":{"version":3,"sources":["C:/Users/onura/Documents/GitHub/Full-Stack-Project-Assessment/client/node_modules/axios/lib/helpers/speedometer.js"],"names":["speedometer","samplesCount","min","bytes","Array","timestamps","head","tail","firstSampleTS","undefined","push","chunkLength","now","Date","startedAt","i","bytesCount","passed","Math","round"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,WAAT,CAAqBC,YAArB,EAAmCC,GAAnC,EAAwC;AACtCD,EAAAA,YAAY,GAAGA,YAAY,IAAI,EAA/B;AACA,QAAME,KAAK,GAAG,IAAIC,KAAJ,CAAUH,YAAV,CAAd;AACA,QAAMI,UAAU,GAAG,IAAID,KAAJ,CAAUH,YAAV,CAAnB;AACA,MAAIK,IAAI,GAAG,CAAX;AACA,MAAIC,IAAI,GAAG,CAAX;AACA,MAAIC,aAAJ;AAEAN,EAAAA,GAAG,GAAGA,GAAG,KAAKO,SAAR,GAAoBP,GAApB,GAA0B,IAAhC;AAEA,SAAO,SAASQ,IAAT,CAAcC,WAAd,EAA2B;AAChC,UAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AAEA,UAAME,SAAS,GAAGT,UAAU,CAACE,IAAD,CAA5B;;AAEA,QAAI,CAACC,aAAL,EAAoB;AAClBA,MAAAA,aAAa,GAAGI,GAAhB;AACD;;AAEDT,IAAAA,KAAK,CAACG,IAAD,CAAL,GAAcK,WAAd;AACAN,IAAAA,UAAU,CAACC,IAAD,CAAV,GAAmBM,GAAnB;AAEA,QAAIG,CAAC,GAAGR,IAAR;AACA,QAAIS,UAAU,GAAG,CAAjB;;AAEA,WAAOD,CAAC,KAAKT,IAAb,EAAmB;AACjBU,MAAAA,UAAU,IAAIb,KAAK,CAACY,CAAC,EAAF,CAAnB;AACAA,MAAAA,CAAC,GAAGA,CAAC,GAAGd,YAAR;AACD;;AAEDK,IAAAA,IAAI,GAAG,CAACA,IAAI,GAAG,CAAR,IAAaL,YAApB;;AAEA,QAAIK,IAAI,KAAKC,IAAb,EAAmB;AACjBA,MAAAA,IAAI,GAAG,CAACA,IAAI,GAAG,CAAR,IAAaN,YAApB;AACD;;AAED,QAAIW,GAAG,GAAGJ,aAAN,GAAsBN,GAA1B,EAA+B;AAC7B;AACD;;AAED,UAAMe,MAAM,GAAGH,SAAS,IAAIF,GAAG,GAAGE,SAAlC;AAEA,WAAOG,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,UAAU,GAAG,IAAb,GAAoBC,MAA/B,CAAH,GAA4CR,SAAzD;AACD,GAjCD;AAkCD;;AAED,eAAeT,WAAf","sourcesContent":["'use strict';\r\n\r\n/**\r\n * Calculate data maxRate\r\n * @param {Number} [samplesCount= 10]\r\n * @param {Number} [min= 1000]\r\n * @returns {Function}\r\n */\r\nfunction speedometer(samplesCount, min) {\r\n  samplesCount = samplesCount || 10;\r\n  const bytes = new Array(samplesCount);\r\n  const timestamps = new Array(samplesCount);\r\n  let head = 0;\r\n  let tail = 0;\r\n  let firstSampleTS;\r\n\r\n  min = min !== undefined ? min : 1000;\r\n\r\n  return function push(chunkLength) {\r\n    const now = Date.now();\r\n\r\n    const startedAt = timestamps[tail];\r\n\r\n    if (!firstSampleTS) {\r\n      firstSampleTS = now;\r\n    }\r\n\r\n    bytes[head] = chunkLength;\r\n    timestamps[head] = now;\r\n\r\n    let i = tail;\r\n    let bytesCount = 0;\r\n\r\n    while (i !== head) {\r\n      bytesCount += bytes[i++];\r\n      i = i % samplesCount;\r\n    }\r\n\r\n    head = (head + 1) % samplesCount;\r\n\r\n    if (head === tail) {\r\n      tail = (tail + 1) % samplesCount;\r\n    }\r\n\r\n    if (now - firstSampleTS < min) {\r\n      return;\r\n    }\r\n\r\n    const passed = startedAt && now - startedAt;\r\n\r\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\r\n  };\r\n}\r\n\r\nexport default speedometer;\r\n"]},"metadata":{},"sourceType":"module"}