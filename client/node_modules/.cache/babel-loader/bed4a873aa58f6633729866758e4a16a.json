{"ast":null,"code":"import $89yE2$react, { useContext as $89yE2$useContext, useMemo as $89yE2$useMemo, useState as $89yE2$useState, useLayoutEffect as $89yE2$useLayoutEffect } from \"react\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n// We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is\n// guarded by a check that it only runs on the client side.\n// eslint-disable-next-line rulesdir/useLayoutEffectRule\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\n\nconst $704cf1d3b684cc5c$var$defaultContext = {\n  prefix: String(Math.round(Math.random() * 10000000000)),\n  current: 0\n};\nconst $704cf1d3b684cc5c$var$SSRContext = /*#__PURE__*/(0, $89yE2$react).createContext($704cf1d3b684cc5c$var$defaultContext);\n\nfunction $704cf1d3b684cc5c$export$9f8ac96af4b1b2ae(props) {\n  let cur = (0, $89yE2$useContext)($704cf1d3b684cc5c$var$SSRContext);\n  let value = (0, $89yE2$useMemo)(() => ({\n    // If this is the first SSRProvider, start with an empty string prefix, otherwise\n    // append and increment the counter.\n    prefix: cur === $704cf1d3b684cc5c$var$defaultContext ? \"\" : `${cur.prefix}-${++cur.current}`,\n    current: 0\n  }), [cur]);\n  return /*#__PURE__*/(0, $89yE2$react).createElement($704cf1d3b684cc5c$var$SSRContext.Provider, {\n    value: value\n  }, props.children);\n}\n\nlet $704cf1d3b684cc5c$var$canUseDOM = Boolean(typeof window !== \"undefined\" && window.document && window.document.createElement);\n\nfunction $704cf1d3b684cc5c$export$619500959fc48b26(defaultId) {\n  let ctx = (0, $89yE2$useContext)($704cf1d3b684cc5c$var$SSRContext); // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n  // provide a warning to hint to the developer to add one.\n\n  if (ctx === $704cf1d3b684cc5c$var$defaultContext && !$704cf1d3b684cc5c$var$canUseDOM) console.warn(\"When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.\"); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  return (0, $89yE2$useMemo)(() => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`, [defaultId]);\n}\n\nfunction $704cf1d3b684cc5c$export$535bd6ca7f90a273() {\n  let cur = (0, $89yE2$useContext)($704cf1d3b684cc5c$var$SSRContext);\n  let isInSSRContext = cur !== $704cf1d3b684cc5c$var$defaultContext;\n  let [isSSR, setIsSSR] = (0, $89yE2$useState)(isInSSRContext); // If on the client, and the component was initially server rendered,\n  // then schedule a layout effect to update the component after hydration.\n\n  if (typeof window !== \"undefined\" && isInSSRContext) // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    (0, $89yE2$useLayoutEffect)(() => {\n      setIsSSR(false);\n    }, []);\n  return isSSR;\n}\n\nexport { $704cf1d3b684cc5c$export$9f8ac96af4b1b2ae as SSRProvider, $704cf1d3b684cc5c$export$619500959fc48b26 as useSSRSafeId, $704cf1d3b684cc5c$export$535bd6ca7f90a273 as useIsSSR };","map":{"version":3,"sources":["C:\\Users\\meron\\Documents\\GitHub\\Full-Stack-Project-Assessment\\client\\node_modules\\@react-aria\\ssr\\dist\\packages\\@react-aria\\ssr\\src\\index.ts","C:\\Users\\meron\\Documents\\GitHub\\Full-Stack-Project-Assessment\\client\\node_modules\\@react-aria\\ssr\\dist\\packages\\@react-aria\\ssr\\src\\SSRProvider.tsx"],"names":[],"mappings":";AAAA;;;;;;;;;;ACAA;;AAAA;;;;;;;;;;AAUC;AAED;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;;AACA,MAAM,oCAAA,GAAkC;AACtC,EAAA,MAAA,EAAQ,MAAA,CAAO,IAAA,CAAK,KAAL,CAAW,IAAA,CAAK,MAAL,KAAgB,WAA3B,CAAP,CAD8B;AAEtC,EAAA,OAAA,EAAS;AAF6B,CAAxC;AAKA,MAAM,gCAAA,GAAA,aAAa,CAAA,GAAA,YAAA,EAAM,aAAN,CAAqC,oCAArC,CAAnB;;AAWO,SAAS,yCAAT,CAAqB,KAArB,EAA2D;AAChE,MAAI,GAAA,GAAM,CAAA,GAAA,iBAAA,EAAW,gCAAX,CAAV;AACA,MAAI,KAAA,GAAyB,CAAA,GAAA,cAAA,EAAQ,OAAO;AAC1C;AACA;AACA,IAAA,MAAA,EAAQ,GAAA,KAAQ,oCAAR,GAAyB,EAAzB,GAA+B,GAAE,GAAA,CAAI,MAAO,IAAG,EAAE,GAAA,CAAI,OAAQ,EAH3B;AAI1C,IAAA,OAAA,EAAS;AAJiC,GAAP,CAAR,EAKzB,CAAC,GAAD,CALyB,CAA7B;AAOA,SAAA,aACE,CAAA,GAAA,YAAA,EAAA,aAAA,CAAC,gCAAA,CAAW,QAAZ,EAAoB;AAAC,IAAA,KAAA,EAAO;AAAR,GAApB,EACG,KAAA,CAAM,QADT,CADF;AAKF;;AAEA,IAAI,+BAAA,GAAY,OAAA,CACd,OAAO,MAAP,KAAkB,WAAlB,IACA,MAAA,CAAO,QADP,IAEA,MAAA,CAAO,QAAP,CAAgB,aAHF,CAAhB;;AAOO,SAAS,yCAAT,CAAsB,SAAtB,EAAkD;AACvD,MAAI,GAAA,GAAM,CAAA,GAAA,iBAAA,EAAW,gCAAX,CAAV,CADuD,CAGvD;AACA;;AACA,MAAI,GAAA,KAAQ,oCAAR,IAA0B,CAAC,+BAA/B,EACE,OAAA,CAAQ,IAAR,CAAa,iJAAb,EANqD,CASvD;;AACA,SAAO,CAAA,GAAA,cAAA,EAAQ,MAAM,SAAA,IAAc,aAAY,GAAA,CAAI,MAAO,IAAG,EAAE,GAAA,CAAI,OAAQ,EAApE,EAAuE,CAAC,SAAD,CAAvE,CAAP;AACF;;AAOO,SAAS,yCAAT,GAA6B;AAClC,MAAI,GAAA,GAAM,CAAA,GAAA,iBAAA,EAAW,gCAAX,CAAV;AACA,MAAI,cAAA,GAAiB,GAAA,KAAQ,oCAA7B;AACA,MAAI,CAAC,KAAD,EAAQ,QAAR,IAAoB,CAAA,GAAA,eAAA,EAAS,cAAT,CAAxB,CAHkC,CAKlC;AACA;;AACA,MAAI,OAAO,MAAP,KAAkB,WAAlB,IAAiC,cAArC,EACE;AACA;AACA;AACA,KAAA,GAAA,sBAAA,EAAgB,MAAM;AACpB,MAAA,QAAA,CAAS,KAAT,CAAA;AACF,KAFA,EAEG,EAFH;AAKF,SAAO,KAAP;AACF","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nexport {SSRProvider, useSSRSafeId, useIsSSR} from './SSRProvider';\nexport type {SSRProviderProps} from './SSRProvider';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is\n// guarded by a check that it only runs on the client side.\n// eslint-disable-next-line rulesdir/useLayoutEffectRule\nimport React, {ReactNode, useContext, useLayoutEffect, useMemo, useState} from 'react';\n\n// To support SSR, the auto incrementing id counter is stored in a context. This allows\n// it to be reset on every request to ensure the client and server are consistent.\n// There is also a prefix string that is used to support async loading components\n// Each async boundary must be wrapped in an SSR provider, which appends to the prefix\n// and resets the current id counter. This ensures that async loaded components have\n// consistent ids regardless of the loading order.\ninterface SSRContextValue {\n  prefix: string,\n  current: number\n}\n\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\nconst defaultContext: SSRContextValue = {\n  prefix: String(Math.round(Math.random() * 10000000000)),\n  current: 0\n};\n\nconst SSRContext = React.createContext<SSRContextValue>(defaultContext);\n\nexport interface SSRProviderProps {\n  /** Your application here. */\n  children: ReactNode\n}\n\n/**\n * When using SSR with React Aria, applications must be wrapped in an SSRProvider.\n * This ensures that auto generated ids are consistent between the client and server.\n */\nexport function SSRProvider(props: SSRProviderProps): JSX.Element {\n  let cur = useContext(SSRContext);\n  let value: SSRContextValue = useMemo(() => ({\n    // If this is the first SSRProvider, start with an empty string prefix, otherwise\n    // append and increment the counter.\n    prefix: cur === defaultContext ? '' : `${cur.prefix}-${++cur.current}`,\n    current: 0\n  }), [cur]);\n\n  return (\n    <SSRContext.Provider value={value}>\n      {props.children}\n    </SSRContext.Provider>\n  );\n}\n\nlet canUseDOM = Boolean(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\n/** @private */\nexport function useSSRSafeId(defaultId?: string): string {\n  let ctx = useContext(SSRContext);\n\n  // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n  // provide a warning to hint to the developer to add one.\n  if (ctx === defaultContext && !canUseDOM) {\n    console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useMemo(() => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`, [defaultId]);\n}\n\n/**\n * Returns whether the component is currently being server side rendered or\n * hydrated on the client. Can be used to delay browser-specific rendering\n * until after hydration.\n */\nexport function useIsSSR(): boolean {\n  let cur = useContext(SSRContext);\n  let isInSSRContext = cur !== defaultContext;\n  let [isSSR, setIsSSR] = useState(isInSSRContext);\n\n  // If on the client, and the component was initially server rendered,\n  // then schedule a layout effect to update the component after hydration.\n  if (typeof window !== 'undefined' && isInSSRContext) {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useLayoutEffect(() => {\n      setIsSSR(false);\n    }, []);\n  }\n\n  return isSSR;\n}\n"]},"metadata":{},"sourceType":"module"}