{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"autoHideDuration\", \"children\", \"disableWindowBlurListener\", \"exited\", \"onBlur\", \"onClose\", \"onFocus\", \"onMouseEnter\", \"onMouseLeave\", \"open\", \"resumeHideDuration\", \"slotProps\", \"slots\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ClickAwayListener } from '../ClickAwayListener';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { getSnackbarUtilityClass } from './snackbarClasses';\nimport { useSnackbar } from '../useSnackbar';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = () => {\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, useClassNamesOverride(getSnackbarUtilityClass));\n};\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Snackbar](https://mui.com/base-ui/react-snackbar/)\r\n * - [Snackbar](https://mui.com/material-ui/react-snackbar/)\r\n *\r\n * API:\r\n *\r\n * - [Snackbar API](https://mui.com/base-ui/react-snackbar/components-api/#snackbar)\r\n */\n\n\nconst Snackbar = /*#__PURE__*/React.forwardRef(function Snackbar(props, forwardedRef) {\n  const {\n    autoHideDuration = null,\n    children,\n    disableWindowBlurListener = false,\n    exited = true,\n    onClose,\n    open,\n    resumeHideDuration,\n    slotProps = {},\n    slots = {}\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const classes = useUtilityClasses();\n  const {\n    getRootProps,\n    onClickAway\n  } = useSnackbar(_extends({}, props, {\n    autoHideDuration,\n    disableWindowBlurListener,\n    onClose,\n    open,\n    resumeHideDuration\n  }));\n  const ownerState = props;\n  const Root = slots.root || 'div';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalForwardedProps: other,\n    externalSlotProps: slotProps.root,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const clickAwayListenerProps = useSlotProps({\n    elementType: ClickAwayListener,\n    externalSlotProps: slotProps.clickAwayListener,\n    additionalProps: {\n      onClickAway\n    },\n    ownerState\n  }); // ClickAwayListener doesn't support ownerState\n\n  delete clickAwayListenerProps.ownerState; // So that we only render active snackbars.\n\n  if (!open && exited) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(ClickAwayListener, _extends({}, clickAwayListenerProps, {\n    children: /*#__PURE__*/_jsx(Root, _extends({}, rootProps, {\n      children: children\n    }))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Snackbar.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The number of milliseconds to wait before automatically calling the\r\n   * `onClose` function. `onClose` should then set the state of the `open`\r\n   * prop to hide the Snackbar. This behavior is disabled by default with\r\n   * the `null` value.\r\n   * @default null\r\n   */\n  autoHideDuration: PropTypes.number,\n\n  /**\r\n   * @ignore\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.\r\n   * @default false\r\n   */\n  disableWindowBlurListener: PropTypes.bool,\n\n  /**\r\n   * The prop used to handle exited transition and unmount the component.\r\n   * @default true\r\n   */\n  exited: PropTypes.bool,\n\n  /**\r\n   * Callback fired when the component requests to be closed.\r\n   * Typically `onClose` is used to set state in the parent component,\r\n   * which is used to control the `Snackbar` `open` prop.\r\n   * The `reason` parameter can optionally be used to control the response to `onClose`,\r\n   * for example ignoring `clickaway`.\r\n   *\r\n   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.\r\n   * @param {string} reason Can be: `\"timeout\"` (`autoHideDuration` expired), `\"clickaway\"`, or `\"escapeKeyDown\"`.\r\n   */\n  onClose: PropTypes.func,\n\n  /**\r\n   * If `true`, the component is shown.\r\n   */\n  open: PropTypes.bool,\n\n  /**\r\n   * The number of milliseconds to wait before dismissing after user interaction.\r\n   * If `autoHideDuration` prop isn't specified, it does nothing.\r\n   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\r\n   * we default to `autoHideDuration / 2` ms.\r\n   */\n  resumeHideDuration: PropTypes.number,\n\n  /**\r\n   * The props used for each slot inside the Snackbar.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    clickAwayListener: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n      children: PropTypes.element.isRequired,\n      disableReactTree: PropTypes.bool,\n      mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', 'onPointerDown', 'onPointerUp', false]),\n      onClickAway: PropTypes.func,\n      touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\n    })]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\r\n   * The components used for each slot inside the Snackbar.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport { Snackbar };","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/@mui/base/Snackbar/Snackbar.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","ClickAwayListener","unstable_composeClasses","composeClasses","getSnackbarUtilityClass","useSnackbar","useSlotProps","useClassNamesOverride","jsx","_jsx","useUtilityClasses","slots","root","Snackbar","forwardRef","props","forwardedRef","autoHideDuration","children","disableWindowBlurListener","exited","onClose","open","resumeHideDuration","slotProps","other","classes","getRootProps","onClickAway","ownerState","Root","rootProps","elementType","getSlotProps","externalForwardedProps","externalSlotProps","additionalProps","ref","className","clickAwayListenerProps","clickAwayListener","process","env","NODE_ENV","propTypes","number","node","bool","func","shape","oneOfType","element","isRequired","disableReactTree","mouseEvent","oneOf","touchEvent","object"],"mappings":"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","sourcesContent":["'use client';\r\n\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nconst _excluded = [\"autoHideDuration\", \"children\", \"disableWindowBlurListener\", \"exited\", \"onBlur\", \"onClose\", \"onFocus\", \"onMouseEnter\", \"onMouseLeave\", \"open\", \"resumeHideDuration\", \"slotProps\", \"slots\"];\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ClickAwayListener } from '../ClickAwayListener';\r\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\r\nimport { getSnackbarUtilityClass } from './snackbarClasses';\r\nimport { useSnackbar } from '../useSnackbar';\r\nimport { useSlotProps } from '../utils';\r\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nconst useUtilityClasses = () => {\r\n  const slots = {\r\n    root: ['root']\r\n  };\r\n  return composeClasses(slots, useClassNamesOverride(getSnackbarUtilityClass));\r\n};\r\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Snackbar](https://mui.com/base-ui/react-snackbar/)\r\n * - [Snackbar](https://mui.com/material-ui/react-snackbar/)\r\n *\r\n * API:\r\n *\r\n * - [Snackbar API](https://mui.com/base-ui/react-snackbar/components-api/#snackbar)\r\n */\r\nconst Snackbar = /*#__PURE__*/React.forwardRef(function Snackbar(props, forwardedRef) {\r\n  const {\r\n      autoHideDuration = null,\r\n      children,\r\n      disableWindowBlurListener = false,\r\n      exited = true,\r\n      onClose,\r\n      open,\r\n      resumeHideDuration,\r\n      slotProps = {},\r\n      slots = {}\r\n    } = props,\r\n    other = _objectWithoutPropertiesLoose(props, _excluded);\r\n  const classes = useUtilityClasses();\r\n  const {\r\n    getRootProps,\r\n    onClickAway\r\n  } = useSnackbar(_extends({}, props, {\r\n    autoHideDuration,\r\n    disableWindowBlurListener,\r\n    onClose,\r\n    open,\r\n    resumeHideDuration\r\n  }));\r\n  const ownerState = props;\r\n  const Root = slots.root || 'div';\r\n  const rootProps = useSlotProps({\r\n    elementType: Root,\r\n    getSlotProps: getRootProps,\r\n    externalForwardedProps: other,\r\n    externalSlotProps: slotProps.root,\r\n    additionalProps: {\r\n      ref: forwardedRef\r\n    },\r\n    ownerState,\r\n    className: classes.root\r\n  });\r\n  const clickAwayListenerProps = useSlotProps({\r\n    elementType: ClickAwayListener,\r\n    externalSlotProps: slotProps.clickAwayListener,\r\n    additionalProps: {\r\n      onClickAway\r\n    },\r\n    ownerState\r\n  });\r\n\r\n  // ClickAwayListener doesn't support ownerState\r\n  delete clickAwayListenerProps.ownerState;\r\n\r\n  // So that we only render active snackbars.\r\n  if (!open && exited) {\r\n    return null;\r\n  }\r\n  return /*#__PURE__*/_jsx(ClickAwayListener, _extends({}, clickAwayListenerProps, {\r\n    children: /*#__PURE__*/_jsx(Root, _extends({}, rootProps, {\r\n      children: children\r\n    }))\r\n  }));\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? Snackbar.propTypes /* remove-proptypes */ = {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\r\n  // ----------------------------------------------------------------------\r\n  /**\r\n   * The number of milliseconds to wait before automatically calling the\r\n   * `onClose` function. `onClose` should then set the state of the `open`\r\n   * prop to hide the Snackbar. This behavior is disabled by default with\r\n   * the `null` value.\r\n   * @default null\r\n   */\r\n  autoHideDuration: PropTypes.number,\r\n  /**\r\n   * @ignore\r\n   */\r\n  children: PropTypes.node,\r\n  /**\r\n   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.\r\n   * @default false\r\n   */\r\n  disableWindowBlurListener: PropTypes.bool,\r\n  /**\r\n   * The prop used to handle exited transition and unmount the component.\r\n   * @default true\r\n   */\r\n  exited: PropTypes.bool,\r\n  /**\r\n   * Callback fired when the component requests to be closed.\r\n   * Typically `onClose` is used to set state in the parent component,\r\n   * which is used to control the `Snackbar` `open` prop.\r\n   * The `reason` parameter can optionally be used to control the response to `onClose`,\r\n   * for example ignoring `clickaway`.\r\n   *\r\n   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.\r\n   * @param {string} reason Can be: `\"timeout\"` (`autoHideDuration` expired), `\"clickaway\"`, or `\"escapeKeyDown\"`.\r\n   */\r\n  onClose: PropTypes.func,\r\n  /**\r\n   * If `true`, the component is shown.\r\n   */\r\n  open: PropTypes.bool,\r\n  /**\r\n   * The number of milliseconds to wait before dismissing after user interaction.\r\n   * If `autoHideDuration` prop isn't specified, it does nothing.\r\n   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\r\n   * we default to `autoHideDuration / 2` ms.\r\n   */\r\n  resumeHideDuration: PropTypes.number,\r\n  /**\r\n   * The props used for each slot inside the Snackbar.\r\n   * @default {}\r\n   */\r\n  slotProps: PropTypes.shape({\r\n    clickAwayListener: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\r\n      children: PropTypes.element.isRequired,\r\n      disableReactTree: PropTypes.bool,\r\n      mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', 'onPointerDown', 'onPointerUp', false]),\r\n      onClickAway: PropTypes.func,\r\n      touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\r\n    })]),\r\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\r\n  }),\r\n  /**\r\n   * The components used for each slot inside the Snackbar.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\r\n  slots: PropTypes.shape({\r\n    root: PropTypes.elementType\r\n  })\r\n} : void 0;\r\nexport { Snackbar };"]},"metadata":{},"sourceType":"module"}