{"ast":null,"code":"export function isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n} // Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\n\nexport function getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n} // Emulate the sass function \"unitless\"\n\nexport function toUnitless(length) {\n  return parseFloat(length);\n} // Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\n\nexport function convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\n\n    if (fromUnit === toUnit) {\n      return length;\n    } // Convert input length to pixels.\n\n\n    let pxLength = toUnitless(length);\n\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    } // Convert length in pixels to the output unit\n\n\n    let outputLength = pxLength;\n\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nexport function alignProperty(_ref) {\n  let {\n    size,\n    grid\n  } = _ref;\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\nexport function fontGrid(_ref2) {\n  let {\n    lineHeight,\n    pixels,\n    htmlFontSize\n  } = _ref2;\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\r\n * generate a responsive version of a given CSS property\r\n * @example\r\n * responsiveProperty({\r\n *   cssProperty: 'fontSize',\r\n *   min: 15,\r\n *   max: 20,\r\n *   unit: 'px',\r\n *   breakpoints: [300, 600],\r\n * })\r\n *\r\n * // this returns\r\n *\r\n * {\r\n *   fontSize: '15px',\r\n *   '@media (min-width:300px)': {\r\n *     fontSize: '17.5px',\r\n *   },\r\n *   '@media (min-width:600px)': {\r\n *     fontSize: '20px',\r\n *   },\r\n * }\r\n * @param {Object} params\r\n * @param {string} params.cssProperty - The CSS property to be made responsive\r\n * @param {number} params.min - The smallest value of the CSS property\r\n * @param {number} params.max - The largest value of the CSS property\r\n * @param {string} [params.unit] - The unit to be used for the CSS property\r\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\r\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\r\n * @returns {Object} responsive styles for {params.cssProperty}\r\n */\n\nexport function responsiveProperty(_ref3) {\n  let {\n    cssProperty,\n    min,\n    max,\n    unit = 'rem',\n    breakpoints = [600, 900, 1200],\n    transform = null\n  } = _ref3;\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n\n    if (transform !== null) {\n      value = transform(value);\n    }\n\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/@mui/material/styles/cssUtils.js"],"names":["isUnitless","value","String","parseFloat","length","getUnit","input","match","toUnitless","convertLength","baseFontSize","toUnit","fromUnit","pxLength","outputLength","toFixed","alignProperty","size","grid","sizeBelow","sizeAbove","fontGrid","lineHeight","pixels","htmlFontSize","responsiveProperty","cssProperty","min","max","unit","breakpoints","transform","output","factor","forEach","breakpoint","Math","round"],"mappings":"AAAA,OAAO,SAASA,UAAT,CAAoBC,KAApB,EAA2B;AAChC,SAAOC,MAAM,CAACC,UAAU,CAACF,KAAD,CAAX,CAAN,CAA0BG,MAA1B,KAAqCF,MAAM,CAACD,KAAD,CAAN,CAAcG,MAA1D;AACD,C,CAED;AACA;AACA;;AACA,OAAO,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAC7B,SAAOJ,MAAM,CAACI,KAAD,CAAN,CAAcC,KAAd,CAAoB,kBAApB,EAAwC,CAAxC,KAA8C,EAArD;AACD,C,CAED;;AACA,OAAO,SAASC,UAAT,CAAoBJ,MAApB,EAA4B;AACjC,SAAOD,UAAU,CAACC,MAAD,CAAjB;AACD,C,CAED;AACA;;AACA,OAAO,SAASK,aAAT,CAAuBC,YAAvB,EAAqC;AAC1C,SAAO,CAACN,MAAD,EAASO,MAAT,KAAoB;AACzB,UAAMC,QAAQ,GAAGP,OAAO,CAACD,MAAD,CAAxB,CADyB,CAGzB;;AACA,QAAIQ,QAAQ,KAAKD,MAAjB,EAAyB;AACvB,aAAOP,MAAP;AACD,KANwB,CAQzB;;;AACA,QAAIS,QAAQ,GAAGL,UAAU,CAACJ,MAAD,CAAzB;;AACA,QAAIQ,QAAQ,KAAK,IAAjB,EAAuB;AACrB,UAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrBC,QAAAA,QAAQ,GAAGL,UAAU,CAACJ,MAAD,CAAV,GAAqBI,UAAU,CAACE,YAAD,CAA1C;AACD,OAFD,MAEO,IAAIE,QAAQ,KAAK,KAAjB,EAAwB;AAC7BC,QAAAA,QAAQ,GAAGL,UAAU,CAACJ,MAAD,CAAV,GAAqBI,UAAU,CAACE,YAAD,CAA1C;AACD;AACF,KAhBwB,CAkBzB;;;AACA,QAAII,YAAY,GAAGD,QAAnB;;AACA,QAAIF,MAAM,KAAK,IAAf,EAAqB;AACnB,UAAIA,MAAM,KAAK,IAAf,EAAqB;AACnBG,QAAAA,YAAY,GAAGD,QAAQ,GAAGL,UAAU,CAACE,YAAD,CAApC;AACD,OAFD,MAEO,IAAIC,MAAM,KAAK,KAAf,EAAsB;AAC3BG,QAAAA,YAAY,GAAGD,QAAQ,GAAGL,UAAU,CAACE,YAAD,CAApC;AACD,OAFM,MAEA;AACL,eAAON,MAAP;AACD;AACF;;AACD,WAAOD,UAAU,CAACW,YAAY,CAACC,OAAb,CAAqB,CAArB,CAAD,CAAV,GAAsCJ,MAA7C;AACD,GA9BD;AA+BD;AACD,OAAO,SAASK,aAAT,OAGJ;AAAA,MAH2B;AAC5BC,IAAAA,IAD4B;AAE5BC,IAAAA;AAF4B,GAG3B;AACD,QAAMC,SAAS,GAAGF,IAAI,GAAGA,IAAI,GAAGC,IAAhC;AACA,QAAME,SAAS,GAAGD,SAAS,GAAGD,IAA9B;AACA,SAAOD,IAAI,GAAGE,SAAP,GAAmBC,SAAS,GAAGH,IAA/B,GAAsCE,SAAtC,GAAkDC,SAAzD;AACD,C,CAED;AACA;AACA;;AACA,OAAO,SAASC,QAAT,QAIJ;AAAA,MAJsB;AACvBC,IAAAA,UADuB;AAEvBC,IAAAA,MAFuB;AAGvBC,IAAAA;AAHuB,GAItB;AACD,SAAOD,MAAM,IAAID,UAAU,GAAGE,YAAjB,CAAb;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,QAOJ;AAAA,MAPgC;AACjCC,IAAAA,WADiC;AAEjCC,IAAAA,GAFiC;AAGjCC,IAAAA,GAHiC;AAIjCC,IAAAA,IAAI,GAAG,KAJ0B;AAKjCC,IAAAA,WAAW,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,IAAX,CALmB;AAMjCC,IAAAA,SAAS,GAAG;AANqB,GAOhC;AACD,QAAMC,MAAM,GAAG;AACb,KAACN,WAAD,GAAgB,GAAEC,GAAI,GAAEE,IAAK;AADhB,GAAf;AAGA,QAAMI,MAAM,GAAG,CAACL,GAAG,GAAGD,GAAP,IAAcG,WAAW,CAACA,WAAW,CAAC1B,MAAZ,GAAqB,CAAtB,CAAxC;AACA0B,EAAAA,WAAW,CAACI,OAAZ,CAAoBC,UAAU,IAAI;AAChC,QAAIlC,KAAK,GAAG0B,GAAG,GAAGM,MAAM,GAAGE,UAA3B;;AACA,QAAIJ,SAAS,KAAK,IAAlB,EAAwB;AACtB9B,MAAAA,KAAK,GAAG8B,SAAS,CAAC9B,KAAD,CAAjB;AACD;;AACD+B,IAAAA,MAAM,CAAE,qBAAoBG,UAAW,KAAjC,CAAN,GAA+C;AAC7C,OAACT,WAAD,GAAgB,GAAEU,IAAI,CAACC,KAAL,CAAWpC,KAAK,GAAG,KAAnB,IAA4B,KAAM,GAAE4B,IAAK;AADd,KAA/C;AAGD,GARD;AASA,SAAOG,MAAP;AACD","sourcesContent":["export function isUnitless(value) {\r\n  return String(parseFloat(value)).length === String(value).length;\r\n}\r\n\r\n// Ported from Compass\r\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\r\n// Emulate the sass function \"unit\"\r\nexport function getUnit(input) {\r\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\r\n}\r\n\r\n// Emulate the sass function \"unitless\"\r\nexport function toUnitless(length) {\r\n  return parseFloat(length);\r\n}\r\n\r\n// Convert any CSS <length> or <percentage> value to any another.\r\n// From https://github.com/KyleAMathews/convert-css-length\r\nexport function convertLength(baseFontSize) {\r\n  return (length, toUnit) => {\r\n    const fromUnit = getUnit(length);\r\n\r\n    // Optimize for cases where `from` and `to` units are accidentally the same.\r\n    if (fromUnit === toUnit) {\r\n      return length;\r\n    }\r\n\r\n    // Convert input length to pixels.\r\n    let pxLength = toUnitless(length);\r\n    if (fromUnit !== 'px') {\r\n      if (fromUnit === 'em') {\r\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\r\n      } else if (fromUnit === 'rem') {\r\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\r\n      }\r\n    }\r\n\r\n    // Convert length in pixels to the output unit\r\n    let outputLength = pxLength;\r\n    if (toUnit !== 'px') {\r\n      if (toUnit === 'em') {\r\n        outputLength = pxLength / toUnitless(baseFontSize);\r\n      } else if (toUnit === 'rem') {\r\n        outputLength = pxLength / toUnitless(baseFontSize);\r\n      } else {\r\n        return length;\r\n      }\r\n    }\r\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\r\n  };\r\n}\r\nexport function alignProperty({\r\n  size,\r\n  grid\r\n}) {\r\n  const sizeBelow = size - size % grid;\r\n  const sizeAbove = sizeBelow + grid;\r\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\r\n}\r\n\r\n// fontGrid finds a minimal grid (in rem) for the fontSize values so that the\r\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\r\n// without changing the relative line height\r\nexport function fontGrid({\r\n  lineHeight,\r\n  pixels,\r\n  htmlFontSize\r\n}) {\r\n  return pixels / (lineHeight * htmlFontSize);\r\n}\r\n\r\n/**\r\n * generate a responsive version of a given CSS property\r\n * @example\r\n * responsiveProperty({\r\n *   cssProperty: 'fontSize',\r\n *   min: 15,\r\n *   max: 20,\r\n *   unit: 'px',\r\n *   breakpoints: [300, 600],\r\n * })\r\n *\r\n * // this returns\r\n *\r\n * {\r\n *   fontSize: '15px',\r\n *   '@media (min-width:300px)': {\r\n *     fontSize: '17.5px',\r\n *   },\r\n *   '@media (min-width:600px)': {\r\n *     fontSize: '20px',\r\n *   },\r\n * }\r\n * @param {Object} params\r\n * @param {string} params.cssProperty - The CSS property to be made responsive\r\n * @param {number} params.min - The smallest value of the CSS property\r\n * @param {number} params.max - The largest value of the CSS property\r\n * @param {string} [params.unit] - The unit to be used for the CSS property\r\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\r\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\r\n * @returns {Object} responsive styles for {params.cssProperty}\r\n */\r\nexport function responsiveProperty({\r\n  cssProperty,\r\n  min,\r\n  max,\r\n  unit = 'rem',\r\n  breakpoints = [600, 900, 1200],\r\n  transform = null\r\n}) {\r\n  const output = {\r\n    [cssProperty]: `${min}${unit}`\r\n  };\r\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\r\n  breakpoints.forEach(breakpoint => {\r\n    let value = min + factor * breakpoint;\r\n    if (transform !== null) {\r\n      value = transform(value);\r\n    }\r\n    output[`@media (min-width:${breakpoint}px)`] = {\r\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\r\n    };\r\n  });\r\n  return output;\r\n}"]},"metadata":{},"sourceType":"module"}