{"ast":null,"code":"var _jsxFileName = \"/home/baki/Desktop/codeyourfuture/Full-Stack-Project-Assessment/client/src/components/AddVideo.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddVideo = _ref => {\n  _s();\n\n  let {\n    onAddVideo\n  } = _ref;\n  const [title, setTitle] = useState('');\n  const [url, setUrl] = useState('');\n\n  const handleAddVideo = () => {\n    if (title.trim() === '' || url.trim() === '') {\n      alert('Please enter a valid title and a valid YouTube URL.');\n      return;\n    } // Create a new video object\n\n\n    const newVideo = {\n      title,\n      youtubeVideoId: getYouTubeVideoIdFromUrl(url) // You can use your existing function to extract the video ID\n\n    }; // Send a POST request to add the new video to your API\n\n    fetch('http://127.0.0.1:5000/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newVideo)\n    }).then(response => response.json()).then(data => {\n      if (data.id) {\n        // If the video was successfully added, call the parent component's function\n        onAddVideo({ ...newVideo,\n          id: data.id\n        }); // Reset the input fields\n\n        setTitle('');\n        setUrl('');\n      } else {\n        alert('Video could not be saved.');\n      }\n    }).catch(error => console.error('Error adding video:', error));\n  };\n\n  const getYouTubeVideoIdFromUrl = url => {// Your existing function to extract the video ID from a YouTube URL\n    // Example implementation provided earlier\n    // ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add a New Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Title\",\n      value: title,\n      onChange: e => setTitle(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"YouTube URL\",\n      value: url,\n      onChange: e => setUrl(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddVideo,\n      children: \"Add Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddVideo, \"72MpAzgDUQlEdTFufuGkfu+ySnY=\");\n\n_c = AddVideo;\nexport default AddVideo;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddVideo\");","map":{"version":3,"sources":["/home/baki/Desktop/codeyourfuture/Full-Stack-Project-Assessment/client/src/components/AddVideo.jsx"],"names":["React","useState","AddVideo","onAddVideo","title","setTitle","url","setUrl","handleAddVideo","trim","alert","newVideo","youtubeVideoId","getYouTubeVideoIdFromUrl","fetch","method","headers","body","JSON","stringify","then","response","json","data","id","catch","error","console","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,QAAQ,GAAG,QAAoB;AAAA;;AAAA,MAAnB;AAAEC,IAAAA;AAAF,GAAmB;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACK,GAAD,EAAMC,MAAN,IAAgBN,QAAQ,CAAC,EAAD,CAA9B;;AAEA,QAAMO,cAAc,GAAG,MAAM;AAC3B,QAAIJ,KAAK,CAACK,IAAN,OAAiB,EAAjB,IAAuBH,GAAG,CAACG,IAAJ,OAAe,EAA1C,EAA8C;AAC5CC,MAAAA,KAAK,CAAC,qDAAD,CAAL;AACA;AACD,KAJ0B,CAM3B;;;AACA,UAAMC,QAAQ,GAAG;AACfP,MAAAA,KADe;AAEfQ,MAAAA,cAAc,EAAEC,wBAAwB,CAACP,GAAD,CAFzB,CAEgC;;AAFhC,KAAjB,CAP2B,CAY3B;;AACAQ,IAAAA,KAAK,CAAC,wBAAD,EAA2B;AAC9BC,MAAAA,MAAM,EAAE,MADsB;AAE9BC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFqB;AAK9BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,QAAf;AALwB,KAA3B,CAAL,CAOGS,IAPH,CAOSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAPtB,EAQGF,IARH,CAQSG,IAAD,IAAU;AACd,UAAIA,IAAI,CAACC,EAAT,EAAa;AACX;AACArB,QAAAA,UAAU,CAAC,EAAE,GAAGQ,QAAL;AAAea,UAAAA,EAAE,EAAED,IAAI,CAACC;AAAxB,SAAD,CAAV,CAFW,CAGX;;AACAnB,QAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,QAAAA,MAAM,CAAC,EAAD,CAAN;AACD,OAND,MAMO;AACLG,QAAAA,KAAK,CAAC,2BAAD,CAAL;AACD;AACF,KAlBH,EAmBGe,KAnBH,CAmBUC,KAAD,IAAWC,OAAO,CAACD,KAAR,CAAc,qBAAd,EAAqCA,KAArC,CAnBpB;AAoBD,GAjCD;;AAmCA,QAAMb,wBAAwB,GAAIP,GAAD,IAAS,CACxC;AACA;AACA;AACD,GAJD;;AAMA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,WAAW,EAAC,OAFd;AAGE,MAAA,KAAK,EAAEF,KAHT;AAIE,MAAA,QAAQ,EAAGwB,CAAD,IAAOvB,QAAQ,CAACuB,CAAC,CAACC,MAAF,CAASC,KAAV;AAJ3B;AAAA;AAAA;AAAA;AAAA,YAFF,eAQE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,WAAW,EAAC,aAFd;AAGE,MAAA,KAAK,EAAExB,GAHT;AAIE,MAAA,QAAQ,EAAGsB,CAAD,IAAOrB,MAAM,CAACqB,CAAC,CAACC,MAAF,CAASC,KAAV;AAJzB;AAAA;AAAA;AAAA;AAAA,YARF,eAcE;AAAQ,MAAA,OAAO,EAAEtB,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CA/DD;;GAAMN,Q;;KAAAA,Q;AAiEN,eAAeA,QAAf","sourcesContent":["import React, { useState } from 'react';\n\nconst AddVideo = ({ onAddVideo }) => {\n  const [title, setTitle] = useState('');\n  const [url, setUrl] = useState('');\n\n  const handleAddVideo = () => {\n    if (title.trim() === '' || url.trim() === '') {\n      alert('Please enter a valid title and a valid YouTube URL.');\n      return;\n    }\n\n    // Create a new video object\n    const newVideo = {\n      title,\n      youtubeVideoId: getYouTubeVideoIdFromUrl(url), // You can use your existing function to extract the video ID\n    };\n\n    // Send a POST request to add the new video to your API\n    fetch('http://127.0.0.1:5000/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(newVideo),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.id) {\n          // If the video was successfully added, call the parent component's function\n          onAddVideo({ ...newVideo, id: data.id });\n          // Reset the input fields\n          setTitle('');\n          setUrl('');\n        } else {\n          alert('Video could not be saved.');\n        }\n      })\n      .catch((error) => console.error('Error adding video:', error));\n  };\n\n  const getYouTubeVideoIdFromUrl = (url) => {\n    // Your existing function to extract the video ID from a YouTube URL\n    // Example implementation provided earlier\n    // ...\n  };\n\n  return (\n    <div>\n      <h2>Add a New Video</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Title\"\n        value={title}\n        onChange={(e) => setTitle(e.target.value)}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"YouTube URL\"\n        value={url}\n        onChange={(e) => setUrl(e.target.value)}\n      />\n      <button onClick={handleAddVideo}>Add Video</button>\n    </div>\n  );\n};\n\nexport default AddVideo;\n"]},"metadata":{},"sourceType":"module"}