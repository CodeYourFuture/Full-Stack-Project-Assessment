{"ast":null,"code":"import URLSearchParams from './classes/URLSearchParams.js';\nimport FormData from './classes/FormData.js';\nimport Blob from './classes/Blob.js';\n/**\r\n * Determine if we're running in a standard browser environment\r\n *\r\n * This allows axios to run in a web worker, and react-native.\r\n * Both environments support XMLHttpRequest, but not fully standard globals.\r\n *\r\n * web workers:\r\n *  typeof window -> undefined\r\n *  typeof document -> undefined\r\n *\r\n * react-native:\r\n *  navigator.product -> 'ReactNative'\r\n * nativescript\r\n *  navigator.product -> 'NativeScript' or 'NS'\r\n *\r\n * @returns {boolean}\r\n */\n\nconst isStandardBrowserEnv = (() => {\n  let product;\n\n  if (typeof navigator !== 'undefined' && ((product = navigator.product) === 'ReactNative' || product === 'NativeScript' || product === 'NS')) {\n    return false;\n  }\n\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\n})();\n/**\r\n * Determine if we're running in a standard browser webWorker environment\r\n *\r\n * Although the `isStandardBrowserEnv` method indicates that\r\n * `allows axios to run in a web worker`, the WebWorker will still be\r\n * filtered out due to its judgment standard\r\n * `typeof window !== 'undefined' && typeof document !== 'undefined'`.\r\n * This leads to a problem when axios post `FormData` in webWorker\r\n */\n\n\nconst isStandardBrowserWebWorkerEnv = (() => {\n  return typeof WorkerGlobalScope !== 'undefined' && // eslint-disable-next-line no-undef\n  self instanceof WorkerGlobalScope && typeof self.importScripts === 'function';\n})();\n\nexport default {\n  isBrowser: true,\n  classes: {\n    URLSearchParams,\n    FormData,\n    Blob\n  },\n  isStandardBrowserEnv,\n  isStandardBrowserWebWorkerEnv,\n  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']\n};","map":{"version":3,"sources":["C:/Users/onura/Documents/GitHub/Full-Stack-Project-Assessment/client/node_modules/axios/lib/platform/browser/index.js"],"names":["URLSearchParams","FormData","Blob","isStandardBrowserEnv","product","navigator","window","document","isStandardBrowserWebWorkerEnv","WorkerGlobalScope","self","importScripts","isBrowser","classes","protocols"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,8BAA5B;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,oBAAoB,GAAG,CAAC,MAAM;AAClC,MAAIC,OAAJ;;AACA,MAAI,OAAOC,SAAP,KAAqB,WAArB,KACF,CAACD,OAAO,GAAGC,SAAS,CAACD,OAArB,MAAkC,aAAlC,IACAA,OAAO,KAAK,cADZ,IAEAA,OAAO,KAAK,IAHV,CAAJ,EAIE;AACA,WAAO,KAAP;AACD;;AAED,SAAO,OAAOE,MAAP,KAAkB,WAAlB,IAAiC,OAAOC,QAAP,KAAoB,WAA5D;AACD,CAX4B,GAA7B;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,MAAMC,6BAA6B,GAAG,CAAC,MAAM;AAC5C,SACE,OAAOC,iBAAP,KAA6B,WAA7B,IACA;AACAC,EAAAA,IAAI,YAAYD,iBAFhB,IAGA,OAAOC,IAAI,CAACC,aAAZ,KAA8B,UAJhC;AAMD,CAPsC,GAAtC;;AAUD,eAAe;AACbC,EAAAA,SAAS,EAAE,IADE;AAEbC,EAAAA,OAAO,EAAE;AACPb,IAAAA,eADO;AAEPC,IAAAA,QAFO;AAGPC,IAAAA;AAHO,GAFI;AAObC,EAAAA,oBAPa;AAQbK,EAAAA,6BARa;AASbM,EAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAA0B,MAA1B,EAAkC,KAAlC,EAAyC,MAAzC;AATE,CAAf","sourcesContent":["import URLSearchParams from './classes/URLSearchParams.js'\r\nimport FormData from './classes/FormData.js'\r\nimport Blob from './classes/Blob.js'\r\n\r\n/**\r\n * Determine if we're running in a standard browser environment\r\n *\r\n * This allows axios to run in a web worker, and react-native.\r\n * Both environments support XMLHttpRequest, but not fully standard globals.\r\n *\r\n * web workers:\r\n *  typeof window -> undefined\r\n *  typeof document -> undefined\r\n *\r\n * react-native:\r\n *  navigator.product -> 'ReactNative'\r\n * nativescript\r\n *  navigator.product -> 'NativeScript' or 'NS'\r\n *\r\n * @returns {boolean}\r\n */\r\nconst isStandardBrowserEnv = (() => {\r\n  let product;\r\n  if (typeof navigator !== 'undefined' && (\r\n    (product = navigator.product) === 'ReactNative' ||\r\n    product === 'NativeScript' ||\r\n    product === 'NS')\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\r\n})();\r\n\r\n/**\r\n * Determine if we're running in a standard browser webWorker environment\r\n *\r\n * Although the `isStandardBrowserEnv` method indicates that\r\n * `allows axios to run in a web worker`, the WebWorker will still be\r\n * filtered out due to its judgment standard\r\n * `typeof window !== 'undefined' && typeof document !== 'undefined'`.\r\n * This leads to a problem when axios post `FormData` in webWorker\r\n */\r\n const isStandardBrowserWebWorkerEnv = (() => {\r\n  return (\r\n    typeof WorkerGlobalScope !== 'undefined' &&\r\n    // eslint-disable-next-line no-undef\r\n    self instanceof WorkerGlobalScope &&\r\n    typeof self.importScripts === 'function'\r\n  );\r\n})();\r\n\r\n\r\nexport default {\r\n  isBrowser: true,\r\n  classes: {\r\n    URLSearchParams,\r\n    FormData,\r\n    Blob\r\n  },\r\n  isStandardBrowserEnv,\r\n  isStandardBrowserWebWorkerEnv,\r\n  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']\r\n};\r\n"]},"metadata":{},"sourceType":"module"}