{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string}\n   * @required\n   */\n  id: PropTypes.string,\n\n  /**\n   * Accessible label for the toggle; the value of `title` if not specified.\n   */\n  toggleLabel: PropTypes.string,\n\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** A `type` passed to the non-toggle Button */\n  type: PropTypes.string,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /**\n   * Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer to\n   * Popper.js's flip [docs](https://popper.js.org/docs/v2/modifiers/flip/).\n   *\n   */\n  flip: PropTypes.bool,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\n/**\n * A convenience component for simple or general use split button dropdowns. Renders a\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\n * props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\n * and menu-related props are passed to the `Dropdown.Menu`\n */\n\nconst SplitButton = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    id,\n    bsPrefix,\n    size,\n    variant,\n    title,\n    type = 'button',\n    toggleLabel = 'Toggle dropdown',\n    children,\n    onClick,\n    href,\n    target,\n    menuRole,\n    renderMenuOnMount,\n    rootCloseEvent,\n    flip,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/_jsxs(Dropdown, {\n    ref: ref,\n    ...props,\n    as: ButtonGroup,\n    children: [/*#__PURE__*/_jsx(Button, {\n      size: size,\n      variant: variant,\n      disabled: props.disabled,\n      bsPrefix: bsPrefix,\n      href: href,\n      target: target,\n      onClick: onClick,\n      type: type,\n      children: title\n    }), /*#__PURE__*/_jsx(Dropdown.Toggle, {\n      split: true,\n      id: id,\n      size: size,\n      variant: variant,\n      disabled: props.disabled,\n      childBsPrefix: bsPrefix,\n      children: /*#__PURE__*/_jsx(\"span\", {\n        className: \"visually-hidden\",\n        children: toggleLabel\n      })\n    }), /*#__PURE__*/_jsx(Dropdown.Menu, {\n      role: menuRole,\n      renderOnMount: renderMenuOnMount,\n      rootCloseEvent: rootCloseEvent,\n      flip: flip,\n      children: children\n    })]\n  });\n});\nSplitButton.propTypes = propTypes;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;","map":{"version":3,"sources":["/home/coder/CYF/react-learn/Full-Stack-Project-Assessment/client/node_modules/react-bootstrap/esm/SplitButton.js"],"names":["React","PropTypes","Button","ButtonGroup","Dropdown","alignPropType","jsx","_jsx","jsxs","_jsxs","propTypes","id","string","toggleLabel","href","target","onClick","func","title","node","isRequired","type","disabled","bool","align","menuRole","renderMenuOnMount","rootCloseEvent","flip","bsPrefix","variant","size","SplitButton","forwardRef","ref","children","props","as","Toggle","split","childBsPrefix","className","Menu","role","renderOnMount","displayName"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string}\n   * @required\n   */\n  id: PropTypes.string,\n  /**\n   * Accessible label for the toggle; the value of `title` if not specified.\n   */\n  toggleLabel: PropTypes.string,\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n  /** A `type` passed to the non-toggle Button */\n  type: PropTypes.string,\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n  /**\n   * Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer to\n   * Popper.js's flip [docs](https://popper.js.org/docs/v2/modifiers/flip/).\n   *\n   */\n  flip: PropTypes.bool,\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n  /** @ignore */\n  variant: PropTypes.string,\n  /** @ignore */\n  size: PropTypes.string\n};\n\n/**\n * A convenience component for simple or general use split button dropdowns. Renders a\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\n * props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\n * and menu-related props are passed to the `Dropdown.Menu`\n */\nconst SplitButton = /*#__PURE__*/React.forwardRef(({\n  id,\n  bsPrefix,\n  size,\n  variant,\n  title,\n  type = 'button',\n  toggleLabel = 'Toggle dropdown',\n  children,\n  onClick,\n  href,\n  target,\n  menuRole,\n  renderMenuOnMount,\n  rootCloseEvent,\n  flip,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  as: ButtonGroup,\n  children: [/*#__PURE__*/_jsx(Button, {\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    bsPrefix: bsPrefix,\n    href: href,\n    target: target,\n    onClick: onClick,\n    type: type,\n    children: title\n  }), /*#__PURE__*/_jsx(Dropdown.Toggle, {\n    split: true,\n    id: id,\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    childBsPrefix: bsPrefix,\n    children: /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: toggleLabel\n    })\n  }), /*#__PURE__*/_jsx(Dropdown.Menu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    flip: flip,\n    children: children\n  })]\n}));\nSplitButton.propTypes = propTypes;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;"]},"metadata":{},"sourceType":"module"}