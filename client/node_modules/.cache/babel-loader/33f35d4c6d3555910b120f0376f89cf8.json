{"ast":null,"code":"var _jsxFileName = \"/Users/anuthapaliya/Documents/GitHub/Full-Stack-Project-Assessment/client/src/AddNewVideo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport './App.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AddNewVideo({\n  addVideoButton\n}) {\n  _s();\n\n  const [title, setTitle] = useState('');\n  const [url, setUrl] = useState('');\n  const [error, setError] = useState('');\n\n  const correctYoutubeUrl = url => {\n    try {\n      const youtubeUrl = new URL(url);\n      return youtubeUrl.hostname === 'www.youtube.com' || youtubeUrl.hostname === 'youtube.com';\n    } catch (error) {\n      return false;\n    }\n  };\n\n  const submitButton = async e => {\n    e.preventDefault();\n\n    if (title.trim() === '') {\n      setError('Title cannot be empty.');\n      return;\n    }\n\n    if (!correctYoutubeUrl(url)) {\n      setError('Invalid youTube URL.');\n      return;\n    }\n\n    setError('');\n\n    try {\n      const response = await axios.post('http://localhost:8000/videos', {\n        title: title,\n        url: url\n      });\n\n      if (response.status === 201) {\n        // if successful, fetch updated videos and clear input fields\n        //         fetchVideos();\n        //         setTitle('');\n        //         setUrl('');\n        //     }\n        //    } catch (error) {\n        //     console.error('Error adding video:', error);\n        //    }\n        // };\n        const newVideo = {\n          title: title,\n          url: url,\n          rating: 0,\n          id: Date.now(),\n          uploadDate: new Date()\n        };\n        addVideoButton(newVideo);\n        setTitle('');\n        setUrl('');\n      }\n    } catch (error) {\n      console.error('Error adding video:', error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitButton,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add a New Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Title:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: title,\n      onChange: e => setTitle(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"URL:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: url,\n      onChange: e => setUrl(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"AddNewVideo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 13\n  }, this);\n}\n\n_s(AddNewVideo, \"E3fwj/q3aGQy5gcnakufUaV4wr8=\");\n\n_c = AddNewVideo;\nexport default AddNewVideo;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddNewVideo\");","map":{"version":3,"sources":["/Users/anuthapaliya/Documents/GitHub/Full-Stack-Project-Assessment/client/src/AddNewVideo.js"],"names":["React","useState","axios","AddNewVideo","addVideoButton","title","setTitle","url","setUrl","error","setError","correctYoutubeUrl","youtubeUrl","URL","hostname","submitButton","e","preventDefault","trim","response","post","status","newVideo","rating","id","Date","now","uploadDate","console","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport './App.css';\nimport axios from 'axios';\n\nfunction AddNewVideo ({ addVideoButton }) {\n    const [title, setTitle] = useState('');\n    const [url, setUrl] = useState('');\n    const [error, setError] = useState('');\n\n    const correctYoutubeUrl = (url) => {\n        try {\n            const youtubeUrl = new URL(url);\n            return (\n                youtubeUrl.hostname === 'www.youtube.com' ||\n                youtubeUrl.hostname === 'youtube.com'\n            );\n        } catch (error) {\n            return false;\n        }\n    };\n\n\n    const submitButton = async (e) => {\n        e.preventDefault();\n\n        if (title.trim() === '') {\n            setError('Title cannot be empty.');\n            return;\n        }\n\n        if (!correctYoutubeUrl(url)) {\n            setError('Invalid youTube URL.');\n            return;\n        }\n\n        setError('');\n\n       try {\n        const response = await axios.post('http://localhost:8000/videos', {\n            title: title,\n            url: url,\n        });\n\n        if (response.status === 201) {\n            // if successful, fetch updated videos and clear input fields\n    //         fetchVideos();\n    //         setTitle('');\n    //         setUrl('');\n    //     }\n        \n    //    } catch (error) {\n    //     console.error('Error adding video:', error);\n    //    }\n    // };\n             const newVideo = {\n                title: title,\n                url: url,\n                rating: 0,\n                id: Date.now(),\n                uploadDate: new Date()\n            };\n            addVideoButton(newVideo);\n            setTitle('');\n            setUrl('');\n        }\n\n    } catch (error) {\n        console.error('Error adding video:', error);\n    }\n};\n        \n        return (\n            <form onSubmit={submitButton}>\n                <h2>Add a New Video</h2>\n              <label>Title:</label>\n                <input type='text' value={title} onChange={(e) => setTitle(e.target.value)} />\n                <label>URL:</label>\n                <input type='text' value={url} onChange={(e) => setUrl(e.target.value)} />\n                {error && <p className=\"error-message\">{error}</p>}\n               <button type=\"submit\">AddNewVideo</button>\n            </form>\n           );\n           }\n        \n         export default AddNewVideo;"]},"metadata":{},"sourceType":"module"}