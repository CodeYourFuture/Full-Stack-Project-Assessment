{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@mui/utils';\nimport withWidth, { isWidthDown, isWidthUp } from './withWidth';\nimport useTheme from '../styles/useTheme';\n/**\r\n * @ignore - internal component.\r\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction HiddenJs(props) {\n  const {\n    children,\n    only,\n    width\n  } = props;\n  const theme = useTheme();\n  let visible = true; // `only` check is faster to get out sooner if used.\n\n  if (only) {\n    if (Array.isArray(only)) {\n      for (let i = 0; i < only.length; i += 1) {\n        const breakpoint = only[i];\n\n        if (width === breakpoint) {\n          visible = false;\n          break;\n        }\n      }\n    } else if (only && width === only) {\n      visible = false;\n    }\n  } // Allow `only` to be combined with other props. If already hidden, no need to check others.\n\n\n  if (visible) {\n    // determine visibility based on the smallest size up\n    for (let i = 0; i < theme.breakpoints.keys.length; i += 1) {\n      const breakpoint = theme.breakpoints.keys[i];\n      const breakpointUp = props[`${breakpoint}Up`];\n      const breakpointDown = props[`${breakpoint}Down`];\n\n      if (breakpointUp && isWidthUp(breakpoint, width) || breakpointDown && isWidthDown(breakpoint, width)) {\n        visible = false;\n        break;\n      }\n    }\n  }\n\n  if (!visible) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: children\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? HiddenJs.propTypes = {\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * If `true`, screens this size and down are hidden.\r\n   */\n  // eslint-disable-next-line react/no-unused-prop-types\n  lgDown: PropTypes.bool,\n\n  /**\r\n   * If `true`, screens this size and up are hidden.\r\n   */\n  // eslint-disable-next-line react/no-unused-prop-types\n  lgUp: PropTypes.bool,\n\n  /**\r\n   * If `true`, screens this size and down are hidden.\r\n   */\n  // eslint-disable-next-line react/no-unused-prop-types\n  mdDown: PropTypes.bool,\n\n  /**\r\n   * If `true`, screens this size and up are hidden.\r\n   */\n  // eslint-disable-next-line react/no-unused-prop-types\n  mdUp: PropTypes.bool,\n\n  /**\r\n   * Hide the given breakpoint(s).\r\n   */\n  only: PropTypes.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), PropTypes.arrayOf(PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),\n\n  /**\r\n   * If `true`, screens this size and down are hidden.\r\n   */\n  // eslint-disable-next-line react/no-unused-prop-types\n  smDown: PropTypes.bool,\n\n  /**\r\n   * If `true`, screens this size and up are hidden.\r\n   */\n  // eslint-disable-next-line react/no-unused-prop-types\n  smUp: PropTypes.bool,\n\n  /**\r\n   * @ignore\r\n   * width prop provided by withWidth decorator.\r\n   */\n  width: PropTypes.string.isRequired,\n\n  /**\r\n   * If `true`, screens this size and down are hidden.\r\n   */\n  // eslint-disable-next-line react/no-unused-prop-types\n  xlDown: PropTypes.bool,\n\n  /**\r\n   * If `true`, screens this size and up are hidden.\r\n   */\n  // eslint-disable-next-line react/no-unused-prop-types\n  xlUp: PropTypes.bool,\n\n  /**\r\n   * If `true`, screens this size and down are hidden.\r\n   */\n  // eslint-disable-next-line react/no-unused-prop-types\n  xsDown: PropTypes.bool,\n\n  /**\r\n   * If `true`, screens this size and up are hidden.\r\n   */\n  // eslint-disable-next-line react/no-unused-prop-types\n  xsUp: PropTypes.bool\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? HiddenJs.propTypes = exactProp(HiddenJs.propTypes) : void 0;\n}\n\nexport default withWidth()(HiddenJs);","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/@mui/material/Hidden/HiddenJs.js"],"names":["React","PropTypes","exactProp","withWidth","isWidthDown","isWidthUp","useTheme","jsx","_jsx","HiddenJs","props","children","only","width","theme","visible","Array","isArray","i","length","breakpoint","breakpoints","keys","breakpointUp","breakpointDown","Fragment","process","env","NODE_ENV","propTypes","node","lgDown","bool","lgUp","mdDown","mdUp","oneOfType","oneOf","arrayOf","smDown","smUp","string","isRequired","xlDown","xlUp","xsDown","xsUp"],"mappings":"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","sourcesContent":["'use client';\r\n\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { exactProp } from '@mui/utils';\r\nimport withWidth, { isWidthDown, isWidthUp } from './withWidth';\r\nimport useTheme from '../styles/useTheme';\r\n\r\n/**\r\n * @ignore - internal component.\r\n */\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nfunction HiddenJs(props) {\r\n  const {\r\n    children,\r\n    only,\r\n    width\r\n  } = props;\r\n  const theme = useTheme();\r\n  let visible = true;\r\n\r\n  // `only` check is faster to get out sooner if used.\r\n  if (only) {\r\n    if (Array.isArray(only)) {\r\n      for (let i = 0; i < only.length; i += 1) {\r\n        const breakpoint = only[i];\r\n        if (width === breakpoint) {\r\n          visible = false;\r\n          break;\r\n        }\r\n      }\r\n    } else if (only && width === only) {\r\n      visible = false;\r\n    }\r\n  }\r\n\r\n  // Allow `only` to be combined with other props. If already hidden, no need to check others.\r\n  if (visible) {\r\n    // determine visibility based on the smallest size up\r\n    for (let i = 0; i < theme.breakpoints.keys.length; i += 1) {\r\n      const breakpoint = theme.breakpoints.keys[i];\r\n      const breakpointUp = props[`${breakpoint}Up`];\r\n      const breakpointDown = props[`${breakpoint}Down`];\r\n      if (breakpointUp && isWidthUp(breakpoint, width) || breakpointDown && isWidthDown(breakpoint, width)) {\r\n        visible = false;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  if (!visible) {\r\n    return null;\r\n  }\r\n  return /*#__PURE__*/_jsx(React.Fragment, {\r\n    children: children\r\n  });\r\n}\r\nprocess.env.NODE_ENV !== \"production\" ? HiddenJs.propTypes = {\r\n  /**\r\n   * The content of the component.\r\n   */\r\n  children: PropTypes.node,\r\n  /**\r\n   * If `true`, screens this size and down are hidden.\r\n   */\r\n  // eslint-disable-next-line react/no-unused-prop-types\r\n  lgDown: PropTypes.bool,\r\n  /**\r\n   * If `true`, screens this size and up are hidden.\r\n   */\r\n  // eslint-disable-next-line react/no-unused-prop-types\r\n  lgUp: PropTypes.bool,\r\n  /**\r\n   * If `true`, screens this size and down are hidden.\r\n   */\r\n  // eslint-disable-next-line react/no-unused-prop-types\r\n  mdDown: PropTypes.bool,\r\n  /**\r\n   * If `true`, screens this size and up are hidden.\r\n   */\r\n  // eslint-disable-next-line react/no-unused-prop-types\r\n  mdUp: PropTypes.bool,\r\n  /**\r\n   * Hide the given breakpoint(s).\r\n   */\r\n  only: PropTypes.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), PropTypes.arrayOf(PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),\r\n  /**\r\n   * If `true`, screens this size and down are hidden.\r\n   */\r\n  // eslint-disable-next-line react/no-unused-prop-types\r\n  smDown: PropTypes.bool,\r\n  /**\r\n   * If `true`, screens this size and up are hidden.\r\n   */\r\n  // eslint-disable-next-line react/no-unused-prop-types\r\n  smUp: PropTypes.bool,\r\n  /**\r\n   * @ignore\r\n   * width prop provided by withWidth decorator.\r\n   */\r\n  width: PropTypes.string.isRequired,\r\n  /**\r\n   * If `true`, screens this size and down are hidden.\r\n   */\r\n  // eslint-disable-next-line react/no-unused-prop-types\r\n  xlDown: PropTypes.bool,\r\n  /**\r\n   * If `true`, screens this size and up are hidden.\r\n   */\r\n  // eslint-disable-next-line react/no-unused-prop-types\r\n  xlUp: PropTypes.bool,\r\n  /**\r\n   * If `true`, screens this size and down are hidden.\r\n   */\r\n  // eslint-disable-next-line react/no-unused-prop-types\r\n  xsDown: PropTypes.bool,\r\n  /**\r\n   * If `true`, screens this size and up are hidden.\r\n   */\r\n  // eslint-disable-next-line react/no-unused-prop-types\r\n  xsUp: PropTypes.bool\r\n} : void 0;\r\nif (process.env.NODE_ENV !== 'production') {\r\n  process.env.NODE_ENV !== \"production\" ? HiddenJs.propTypes = exactProp(HiddenJs.propTypes) : void 0;\r\n}\r\nexport default withWidth()(HiddenJs);"]},"metadata":{},"sourceType":"module"}