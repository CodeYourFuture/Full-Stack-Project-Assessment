{"ast":null,"code":"// import React , {useState} from \"react\";\n// import exampleresponse from \"../exampleresponse.json\";\n// function Video({videoObj}) {\n//   const videoId = getVideoIdFromUrl(videoObj.url);\n//   const [vid, setVid] = useState(exampleresponse);\n//   const [vote,setVote] = useState(videoObj.rating)\n//   const voteIncrease = () => {\n//       setVote((prev) => prev + 1);\n//     };\n//     const voteDecrease = () => {\n//       setVote((prev) => (prev > 0 ? prev - 1 : 0));\n//     };\n//   // const updateVoteCount = (videoId, value) => {\n//   //   setVid((prevVid) =>\n//   //     prevVid.map((video) => (video.id === videoId ? { ...video, votes: (video.votes || 0) + value } : video))\n//   //   );\n//   // };\n//   // const newVideoAdd = (newInput) => {\n//   //   const newId = vid.length + 1;\n//   //   newInput.id = newId;\n//   //   newInput.votes = 0;\n//   //   setVid([...vid, newInput]);\n//   // };\n//   const deleteVideo = (videoId) => {\n//     const videoDeleted = vid.filter((el) => el.id !== videoId);\n//     setVid(videoDeleted);\n//   };\n//   let date = new Date().toDateString();\n//   return (\n//     <div className=\"card\">\n//       <iframe\n//         src={`https://www.youtube.com/embed/${videoId}`}\n//         frameborder=\"0\"\n//         allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n//         title=\"YouTube video player\"\n//         allowfullscreen height={'300px'}\n//       ></iframe>\n//       <div className=\"card-body\">\n//         <h5 className=\"card-title\">{videoObj.title}</h5>\n//         <p className=\"card-text\">Requasted At: {date}</p>\n//         <div className=\"buttons\">\n//           <button onClick = {voteIncrease} className=\"btn btn-primary\"> &#128077; </button>\n//           <p>{videoObj.rating} </p>\n//           <button onClick = {voteDecrease} className=\"btn btn-warning\"> &#128078; </button>\n//           <button onClick = {deleteVideo} className=\"btn btn-danger\">\n//             <i className=\"fa fa-trash-o\"></i>\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n// export default Video;\n// function getVideoIdFromUrl(url) {\n//   const videoId = url.split(\"v=\")[1];\n//   return videoId;\n// }","map":{"version":3,"sources":["/home/coder/CYF/react-learn/Full-Stack-Project-Assessment/client/src/components/Video.jsx"],"names":[],"mappings":"AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\n// import React , {useState} from \"react\";\n// import exampleresponse from \"../exampleresponse.json\";\n\n\n// function Video({videoObj}) {\n//   const videoId = getVideoIdFromUrl(videoObj.url);\n//   const [vid, setVid] = useState(exampleresponse);\n//   const [vote,setVote] = useState(videoObj.rating)\n\n\n//   const voteIncrease = () => {\n//       setVote((prev) => prev + 1);\n//     };\n\n//     const voteDecrease = () => {\n//       setVote((prev) => (prev > 0 ? prev - 1 : 0));\n//     };\n\n//   // const updateVoteCount = (videoId, value) => {\n//   //   setVid((prevVid) =>\n//   //     prevVid.map((video) => (video.id === videoId ? { ...video, votes: (video.votes || 0) + value } : video))\n//   //   );\n//   // };\n\n//   // const newVideoAdd = (newInput) => {\n//   //   const newId = vid.length + 1;\n//   //   newInput.id = newId;\n//   //   newInput.votes = 0;\n//   //   setVid([...vid, newInput]);\n//   // };\n\n\n//   const deleteVideo = (videoId) => {\n//     const videoDeleted = vid.filter((el) => el.id !== videoId);\n//     setVid(videoDeleted);\n//   };\n\n//   let date = new Date().toDateString();\n\n\n\n\n\n//   return (\n\n//     <div className=\"card\">\n//       <iframe\n//         src={`https://www.youtube.com/embed/${videoId}`}\n//         frameborder=\"0\"\n//         allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n//         title=\"YouTube video player\"\n//         allowfullscreen height={'300px'}\n//       ></iframe>\n//       <div className=\"card-body\">\n//         <h5 className=\"card-title\">{videoObj.title}</h5>\n//         <p className=\"card-text\">Requasted At: {date}</p>\n//         <div className=\"buttons\">\n//           <button onClick = {voteIncrease} className=\"btn btn-primary\"> &#128077; </button>\n//           <p>{videoObj.rating} </p>\n//           <button onClick = {voteDecrease} className=\"btn btn-warning\"> &#128078; </button>\n//           <button onClick = {deleteVideo} className=\"btn btn-danger\">\n//             <i className=\"fa fa-trash-o\"></i>\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n// export default Video;\n// function getVideoIdFromUrl(url) {\n//   const videoId = url.split(\"v=\")[1];\n//   return videoId;\n// }\n"]},"metadata":{},"sourceType":"module"}