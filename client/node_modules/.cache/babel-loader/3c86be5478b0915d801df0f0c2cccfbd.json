{"ast":null,"code":"import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext, useMemo } from 'react';\nimport Feedback from './Feedback';\nimport FormCheckInput from './FormCheckInput';\nimport FormCheckLabel from './FormCheckLabel';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { hasChildOfType } from './ElementChildren';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst FormCheck = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    id,\n    bsPrefix,\n    bsSwitchPrefix,\n    inline = false,\n    reverse = false,\n    disabled = false,\n    isValid = false,\n    isInvalid = false,\n    feedbackTooltip = false,\n    feedback,\n    feedbackType,\n    className,\n    style,\n    title = '',\n    type = 'checkbox',\n    label,\n    children,\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as = 'input',\n    ...props\n  } = _ref;\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check');\n  bsSwitchPrefix = useBootstrapPrefix(bsSwitchPrefix, 'form-switch');\n  const {\n    controlId\n  } = useContext(FormContext);\n  const innerFormContext = useMemo(() => ({\n    controlId: id || controlId\n  }), [controlId, id]);\n  const hasLabel = !children && label != null && label !== false || hasChildOfType(children, FormCheckLabel);\n\n  const input = /*#__PURE__*/_jsx(FormCheckInput, { ...props,\n    type: type === 'switch' ? 'checkbox' : type,\n    ref: ref,\n    isValid: isValid,\n    isInvalid: isInvalid,\n    disabled: disabled,\n    as: as\n  });\n\n  return /*#__PURE__*/_jsx(FormContext.Provider, {\n    value: innerFormContext,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      style: style,\n      className: classNames(className, hasLabel && bsPrefix, inline && `${bsPrefix}-inline`, reverse && `${bsPrefix}-reverse`, type === 'switch' && bsSwitchPrefix),\n      children: children || /*#__PURE__*/_jsxs(_Fragment, {\n        children: [input, hasLabel && /*#__PURE__*/_jsx(FormCheckLabel, {\n          title: title,\n          children: label\n        }), feedback && /*#__PURE__*/_jsx(Feedback, {\n          type: feedbackType,\n          tooltip: feedbackTooltip,\n          children: feedback\n        })]\n      })\n    })\n  });\n});\nFormCheck.displayName = 'FormCheck';\nexport default Object.assign(FormCheck, {\n  Input: FormCheckInput,\n  Label: FormCheckLabel\n});","map":{"version":3,"sources":["/Users/roozbehshokri/Documents/GitHub/Full-Stack-Project-Assessment/client/node_modules/react-bootstrap/esm/FormCheck.js"],"names":["classNames","React","useContext","useMemo","Feedback","FormCheckInput","FormCheckLabel","FormContext","useBootstrapPrefix","hasChildOfType","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","FormCheck","forwardRef","ref","id","bsPrefix","bsSwitchPrefix","inline","reverse","disabled","isValid","isInvalid","feedbackTooltip","feedback","feedbackType","className","style","title","type","label","children","as","props","controlId","innerFormContext","hasLabel","input","Provider","value","tooltip","displayName","Object","assign","Input","Label"],"mappings":"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","sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext, useMemo } from 'react';\nimport Feedback from './Feedback';\nimport FormCheckInput from './FormCheckInput';\nimport FormCheckLabel from './FormCheckLabel';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { hasChildOfType } from './ElementChildren';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst FormCheck = /*#__PURE__*/React.forwardRef(({\n  id,\n  bsPrefix,\n  bsSwitchPrefix,\n  inline = false,\n  reverse = false,\n  disabled = false,\n  isValid = false,\n  isInvalid = false,\n  feedbackTooltip = false,\n  feedback,\n  feedbackType,\n  className,\n  style,\n  title = '',\n  type = 'checkbox',\n  label,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as = 'input',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check');\n  bsSwitchPrefix = useBootstrapPrefix(bsSwitchPrefix, 'form-switch');\n  const {\n    controlId\n  } = useContext(FormContext);\n  const innerFormContext = useMemo(() => ({\n    controlId: id || controlId\n  }), [controlId, id]);\n  const hasLabel = !children && label != null && label !== false || hasChildOfType(children, FormCheckLabel);\n  const input = /*#__PURE__*/_jsx(FormCheckInput, {\n    ...props,\n    type: type === 'switch' ? 'checkbox' : type,\n    ref: ref,\n    isValid: isValid,\n    isInvalid: isInvalid,\n    disabled: disabled,\n    as: as\n  });\n  return /*#__PURE__*/_jsx(FormContext.Provider, {\n    value: innerFormContext,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      style: style,\n      className: classNames(className, hasLabel && bsPrefix, inline && `${bsPrefix}-inline`, reverse && `${bsPrefix}-reverse`, type === 'switch' && bsSwitchPrefix),\n      children: children || /*#__PURE__*/_jsxs(_Fragment, {\n        children: [input, hasLabel && /*#__PURE__*/_jsx(FormCheckLabel, {\n          title: title,\n          children: label\n        }), feedback && /*#__PURE__*/_jsx(Feedback, {\n          type: feedbackType,\n          tooltip: feedbackTooltip,\n          children: feedback\n        })]\n      })\n    })\n  });\n});\nFormCheck.displayName = 'FormCheck';\nexport default Object.assign(FormCheck, {\n  Input: FormCheckInput,\n  Label: FormCheckLabel\n});"]},"metadata":{},"sourceType":"module"}