{"ast":null,"code":"var _jsxFileName = \"/home/coder/Documents/CYF/Back-End/Full-Stack-Project-Assessment/client/src/component/ShowingVideos.jsx\";\n// import React, { useState } from \"react\";\n// function ShowingVideos(props) {\n//   const [videos, setVideos] = useState(props.result);\n//   function convertToEmbedUrl(url) {\n//     const videoId = url.split(\"v=\")[1];\n//     return `https://www.youtube.com/embed/${videoId}`;\n//   }\n//   function deleteVideo(id) {\n//     const updatedVideos = videos.filter((video) => video.id !== id);\n//     setVideos(updatedVideos);\n//   }\n//   function handleRating(id, type) {\n//     const updatedVideos = videos.map((video) => {\n//       if (video.id === id) {\n//         if (type === \"thumbs-up\") {\n//           return { ...video, rating: video.rating + 1 };\n//         } else if (type === \"thumbs-down\") {\n//           return { ...video, rating: video.rating - 1 };\n//         }\n//       }\n//       return video;\n//     });\n//     setVideos(updatedVideos);\n//   }\n//   // Sort videos based on rating in descending order\n//   const sortedVideos = [...videos].sort((a, b) => b.rating - a.rating);\n//   return (\n//     <div className=\"ShowingVideos\">\n//       {sortedVideos.map((video) => (\n//         <div className=\"videos\" key={video.id}>\n//           <p>{video.title}</p>\n//           <div className=\"buttons\">\n//             <i\n//               className=\"fa-solid fa-thumbs-up\"\n//               onClick={() => handleRating(video.id, \"thumbs-up\")}\n//             ></i>\n//             <h4>{video.rating}</h4>\n//             <i\n//               className=\"fa-solid fa-thumbs-down\"\n//               onClick={() => handleRating(video.id, \"thumbs-down\")}\n//             ></i>\n//           </div>\n//           <iframe\n//             className=\"allVideos\"\n//             width=\"300\"\n//             height=\"220\"\n//             src={convertToEmbedUrl(video.url)}\n//             title={video.title}\n//             frameBorder=\"0\"\n//             allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n//             allowFullScreen\n//           ></iframe>\n//           <button onClick={() => deleteVideo(video.id)}>Delete</button>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n// export default ShowingVideos;\n// ShowingVideos.js\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ShowingVideos(_ref) {\n  let {\n    result,\n    selectedVideo\n  } = _ref;\n\n  const convertToEmbedUrl = url => {\n    const videoId = url.split(\"v=\")[1];\n    return `https://www.youtube.com/embed/${videoId}`;\n  };\n\n  const handleRating = (id, type) => {\n    // Create a copy of the videos array\n    const updatedVideos = [...result]; // Find the index of the video with the given ID\n\n    const videoIndex = updatedVideos.findIndex(video => video.id === id);\n\n    if (videoIndex !== -1) {\n      // Update the rating of the video based on the 'type' parameter\n      if (type === \"thumbs-up\") {\n        updatedVideos[videoIndex].rating += 1;\n      } else if (type === \"thumbs-down\") {\n        updatedVideos[videoIndex].rating -= 1;\n      } // Update the state with the new array of videos\n\n\n      setVideos(updatedVideos);\n    }\n  };\n\n  const sortedVideos = [...result].sort((a, b) => b.rating - a.rating);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ShowingVideos\",\n    children: [selectedVideo && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selected-video\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Selected Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: selectedVideo.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n        className: \"allVideos\",\n        width: \"300\",\n        height: \"220\",\n        src: convertToEmbedUrl(selectedVideo.url),\n        title: selectedVideo.title,\n        frameBorder: \"0\",\n        allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n        allowFullScreen: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), sortedVideos.map(video => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"videos\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: video.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa-solid fa-thumbs-up\",\n          onClick: () => handleRating(video.id, \"thumbs-up\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: video.rating\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa-solid fa-thumbs-down\",\n          onClick: () => handleRating(video.id, \"thumbs-down\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n        className: \"allVideos\",\n        width: \"300\",\n        height: \"220\",\n        src: convertToEmbedUrl(video.url),\n        title: video.title,\n        frameBorder: \"0\",\n        allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n        allowFullScreen: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)]\n    }, video.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ShowingVideos;\nexport default ShowingVideos;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowingVideos\");","map":{"version":3,"sources":["/home/coder/Documents/CYF/Back-End/Full-Stack-Project-Assessment/client/src/component/ShowingVideos.jsx"],"names":["React","ShowingVideos","result","selectedVideo","convertToEmbedUrl","url","videoId","split","handleRating","id","type","updatedVideos","videoIndex","findIndex","video","rating","setVideos","sortedVideos","sort","a","b","title","map"],"mappings":"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","sourcesContent":["// import React, { useState } from \"react\";\n\n// function ShowingVideos(props) {\n//   const [videos, setVideos] = useState(props.result);\n\n//   function convertToEmbedUrl(url) {\n//     const videoId = url.split(\"v=\")[1];\n//     return `https://www.youtube.com/embed/${videoId}`;\n//   }\n\n//   function deleteVideo(id) {\n//     const updatedVideos = videos.filter((video) => video.id !== id);\n//     setVideos(updatedVideos);\n//   }\n\n//   function handleRating(id, type) {\n//     const updatedVideos = videos.map((video) => {\n//       if (video.id === id) {\n//         if (type === \"thumbs-up\") {\n//           return { ...video, rating: video.rating + 1 };\n//         } else if (type === \"thumbs-down\") {\n//           return { ...video, rating: video.rating - 1 };\n//         }\n//       }\n//       return video;\n//     });\n\n//     setVideos(updatedVideos);\n//   }\n\n//   // Sort videos based on rating in descending order\n//   const sortedVideos = [...videos].sort((a, b) => b.rating - a.rating);\n\n//   return (\n//     <div className=\"ShowingVideos\">\n//       {sortedVideos.map((video) => (\n//         <div className=\"videos\" key={video.id}>\n//           <p>{video.title}</p>\n//           <div className=\"buttons\">\n//             <i\n//               className=\"fa-solid fa-thumbs-up\"\n//               onClick={() => handleRating(video.id, \"thumbs-up\")}\n//             ></i>\n//             <h4>{video.rating}</h4>\n//             <i\n//               className=\"fa-solid fa-thumbs-down\"\n//               onClick={() => handleRating(video.id, \"thumbs-down\")}\n//             ></i>\n//           </div>\n\n//           <iframe\n//             className=\"allVideos\"\n//             width=\"300\"\n//             height=\"220\"\n//             src={convertToEmbedUrl(video.url)}\n//             title={video.title}\n//             frameBorder=\"0\"\n//             allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n//             allowFullScreen\n//           ></iframe>\n//           <button onClick={() => deleteVideo(video.id)}>Delete</button>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default ShowingVideos;\n\n// ShowingVideos.js\nimport React from \"react\";\n\nfunction ShowingVideos({ result, selectedVideo }) {\n  const convertToEmbedUrl = (url) => {\n    const videoId = url.split(\"v=\")[1];\n    return `https://www.youtube.com/embed/${videoId}`;\n  };\n\n  const handleRating = (id, type) => {\n    // Create a copy of the videos array\n    const updatedVideos = [...result];\n\n    // Find the index of the video with the given ID\n    const videoIndex = updatedVideos.findIndex((video) => video.id === id);\n\n    if (videoIndex !== -1) {\n      // Update the rating of the video based on the 'type' parameter\n      if (type === \"thumbs-up\") {\n        updatedVideos[videoIndex].rating += 1;\n      } else if (type === \"thumbs-down\") {\n        updatedVideos[videoIndex].rating -= 1;\n      }\n\n      // Update the state with the new array of videos\n      setVideos(updatedVideos);\n    }\n  };\n\n  const sortedVideos = [...result].sort((a, b) => b.rating - a.rating);\n\n  return (\n    <div className=\"ShowingVideos\">\n      {selectedVideo && (\n        <div className=\"selected-video\">\n          <h2>Selected Video</h2>\n          <p>{selectedVideo.title}</p>\n          <iframe\n            className=\"allVideos\"\n            width=\"300\"\n            height=\"220\"\n            src={convertToEmbedUrl(selectedVideo.url)}\n            title={selectedVideo.title}\n            frameBorder=\"0\"\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n          ></iframe>\n        </div>\n      )}\n\n      {sortedVideos.map((video) => (\n        <div className=\"videos\" key={video.id}>\n          <p>{video.title}</p>\n          <div className=\"buttons\">\n            <i\n              className=\"fa-solid fa-thumbs-up\"\n              onClick={() => handleRating(video.id, \"thumbs-up\")}\n            ></i>\n            <h4>{video.rating}</h4>\n            <i\n              className=\"fa-solid fa-thumbs-down\"\n              onClick={() => handleRating(video.id, \"thumbs-down\")}\n            ></i>\n          </div>\n\n          <iframe\n            className=\"allVideos\"\n            width=\"300\"\n            height=\"220\"\n            src={convertToEmbedUrl(video.url)}\n            title={video.title}\n            frameBorder=\"0\"\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n          ></iframe>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default ShowingVideos;\n"]},"metadata":{},"sourceType":"module"}