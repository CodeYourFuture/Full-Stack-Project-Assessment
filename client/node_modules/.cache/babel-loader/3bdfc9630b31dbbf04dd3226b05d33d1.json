{"ast":null,"code":"import { useMemo, useRef } from 'react';\nimport hasClass from 'dom-helpers/hasClass';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Popover from './Popover'; // This is meant for internal use.\n// This applies a custom offset to the overlay if it's a popover.\n\nexport default function useOverlayOffset(customOffset) {\n  const overlayRef = useRef(null);\n  const popoverClass = useBootstrapPrefix(undefined, 'popover');\n  const offset = useMemo(() => ({\n    name: 'offset',\n    options: {\n      offset: () => {\n        if (overlayRef.current && hasClass(overlayRef.current, popoverClass)) {\n          return customOffset || Popover.POPPER_OFFSET;\n        }\n\n        return customOffset || [0, 0];\n      }\n    }\n  }), [customOffset, popoverClass]);\n  return [overlayRef, [offset]];\n}","map":{"version":3,"sources":["C:/Users/meron/Documents/GitHub/Full-Stack-Project-Assessment/client/node_modules/react-bootstrap/esm/useOverlayOffset.js"],"names":["useMemo","useRef","hasClass","useBootstrapPrefix","Popover","useOverlayOffset","customOffset","overlayRef","popoverClass","undefined","offset","name","options","current","POPPER_OFFSET"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,MAAlB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CAEA;AACA;;AACA,eAAe,SAASC,gBAAT,CAA0BC,YAA1B,EAAwC;AACrD,QAAMC,UAAU,GAAGN,MAAM,CAAC,IAAD,CAAzB;AACA,QAAMO,YAAY,GAAGL,kBAAkB,CAACM,SAAD,EAAY,SAAZ,CAAvC;AACA,QAAMC,MAAM,GAAGV,OAAO,CAAC,OAAO;AAC5BW,IAAAA,IAAI,EAAE,QADsB;AAE5BC,IAAAA,OAAO,EAAE;AACPF,MAAAA,MAAM,EAAE,MAAM;AACZ,YAAIH,UAAU,CAACM,OAAX,IAAsBX,QAAQ,CAACK,UAAU,CAACM,OAAZ,EAAqBL,YAArB,CAAlC,EAAsE;AACpE,iBAAOF,YAAY,IAAIF,OAAO,CAACU,aAA/B;AACD;;AACD,eAAOR,YAAY,IAAI,CAAC,CAAD,EAAI,CAAJ,CAAvB;AACD;AANM;AAFmB,GAAP,CAAD,EAUlB,CAACA,YAAD,EAAeE,YAAf,CAVkB,CAAtB;AAWA,SAAO,CAACD,UAAD,EAAa,CAACG,MAAD,CAAb,CAAP;AACD","sourcesContent":["import { useMemo, useRef } from 'react';\nimport hasClass from 'dom-helpers/hasClass';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Popover from './Popover';\n\n// This is meant for internal use.\n// This applies a custom offset to the overlay if it's a popover.\nexport default function useOverlayOffset(customOffset) {\n  const overlayRef = useRef(null);\n  const popoverClass = useBootstrapPrefix(undefined, 'popover');\n  const offset = useMemo(() => ({\n    name: 'offset',\n    options: {\n      offset: () => {\n        if (overlayRef.current && hasClass(overlayRef.current, popoverClass)) {\n          return customOffset || Popover.POPPER_OFFSET;\n        }\n        return customOffset || [0, 0];\n      }\n    }\n  }), [customOffset, popoverClass]);\n  return [overlayRef, [offset]];\n}"]},"metadata":{},"sourceType":"module"}