{"ast":null,"code":"var _jsxFileName = \"/Users/ebrahim/Documents/GitHub/Full-Stack-Project-Assessment/client/src/App.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState } from \"react\";\n// import VideoList from \"./components/VideoList\";\n// import AddVideoForm from \"./components/AddVideoForm\";\n// import \"./App.css\";\n// function extractVideoId(url) {\n//   // Extract the video ID from the YouTube URL\n//   // Implement this function according to your requirements\n//   // Example implementation:\n//   const urlParts = url.split(\"/\");\n//   return urlParts[urlParts.length - 1];\n// }\n// function App() {\n//   const [videos, setVideos] = useState([\n//     {\n//       id: 1,\n//       title: \"Video 1\",\n//       url: \"https://www.youtube.com/embed/dQw4w9WgXcQ\",\n//       votes: 0,\n//     },\n//     {\n//       id: 2,\n//       title: \"Video 2\",\n//       url: \"https://www.youtube.com/embed/K4DyBUG242c\",\n//       votes: 0,\n//     },\n//     {\n//       id: 3,\n//       title: \"Video 3\",\n//       url: \"https://www.youtube.com/embed/tgbNymZ7vqY\",\n//       votes: 0,\n//     },\n//   ]);\n//   const handleAddVideo = (title, url) => {\n//     const videoId = extractVideoId(url);\n//     const newVideo = {\n//       id: videos.length + 1,\n//       title,\n//       url: `https://www.youtube.com/embed/${videoId}`,\n//       votes: 0,\n//     };\n//     setVideos([...videos, newVideo]);\n//   };\n//   const handleVote = (videoId, increment) => {\n//     setVideos((prevVideos) =>\n//       prevVideos.map((video) =>\n//         video.id === videoId\n//           ? { ...video, votes: video.votes + increment }\n//           : video\n//       )\n//     );\n//   };\n//   const handleRemoveVideo = (videoId) => {\n//     setVideos((prevVideos) =>\n//       prevVideos.filter((video) => video.id !== videoId)\n//     );\n//   };\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <h1>Video Recommendation</h1>\n//       </header>\n//       <div className=\"container\">\n//         <VideoList\n//           videos={videos}\n//           handleVote={handleVote}\n//           handleRemove={handleRemoveVideo}\n//         />\n//         <AddVideoForm handleAddVideo={handleAddVideo} />\n//       </div>\n//     </div>\n//   );\n// }\n// export default App;\nimport React, { useEffect, useState } from \"react\";\nimport VideoList from \"./components/VideoList\";\nimport AddVideoForm from \"./components/AddVideoForm\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst extractVideoId = url => {\n  const urlParts = url.split(\"/\");\n  return urlParts[urlParts.length - 1];\n};\n\nconst App = () => {\n  _s();\n\n  const [videos, setVideos] = useState([{\n    id: 1,\n    title: \"Video 1\",\n    url: \"https://www.youtube.com/embed/dQw4w9WgXcQ\",\n    votes: 0\n  }, {\n    id: 2,\n    title: \"Video 2\",\n    url: \"https://www.youtube.com/embed/K4DyBUG242c\",\n    votes: 0\n  }, {\n    id: 3,\n    title: \"Video 3\",\n    url: \"https://www.youtube.com/embed/tgbNymZ7vqY\",\n    votes: 0\n  }]);\n  useEffect(() => {\n    fetch(\"http://127.0.0.1:5000/\").then(response => response.json()).then(data => {\n      setVideos(data);\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []);\n\n  const handleAddVideo = (title, url) => {\n    const videoId = extractVideoId(url);\n    const newVideo = {\n      id: videos.length + 1,\n      title,\n      url: `https://www.youtube.com/embed/${videoId}`,\n      votes: 0\n    };\n    fetch(\"http://127.0.0.1:5000/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newVideo)\n    }).then(response => response.json()).then(data => {\n      if (data.id) {\n        setVideos([...videos, newVideo]);\n      } else {\n        console.error(data.message);\n      }\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  const handleVote = (videoId, increment) => {\n    setVideos(prevVideos => prevVideos.map(video => video.id === videoId ? { ...video,\n      votes: video.votes + increment\n    } : video));\n  };\n\n  const handleRemoveVideo = videoId => {\n    setVideos(prevVideos => prevVideos.filter(video => video.id !== videoId));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Video Recommendation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(VideoList, {\n        videos: videos,\n        handleVote: handleVote,\n        handleRemove: handleRemoveVideo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AddVideoForm, {\n        handleAddVideo: handleAddVideo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"ZufyF5xJtEe0ipe1g9ciq7wjkHY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ebrahim/Documents/GitHub/Full-Stack-Project-Assessment/client/src/App.js"],"names":["React","useEffect","useState","VideoList","AddVideoForm","extractVideoId","url","urlParts","split","length","App","videos","setVideos","id","title","votes","fetch","then","response","json","data","catch","error","console","handleAddVideo","videoId","newVideo","method","headers","body","JSON","stringify","message","handleVote","increment","prevVideos","map","video","handleRemoveVideo","filter"],"mappings":";;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAO,WAAP;;;AAEA,MAAMC,cAAc,GAAIC,GAAD,IAAS;AAC9B,QAAMC,QAAQ,GAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,CAAjB;AACA,SAAOD,QAAQ,CAACA,QAAQ,CAACE,MAAT,GAAkB,CAAnB,CAAf;AACD,CAHD;;AAKA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,CACnC;AACEW,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,KAAK,EAAE,SAFT;AAGER,IAAAA,GAAG,EAAE,2CAHP;AAIES,IAAAA,KAAK,EAAE;AAJT,GADmC,EAOnC;AACEF,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,KAAK,EAAE,SAFT;AAGER,IAAAA,GAAG,EAAE,2CAHP;AAIES,IAAAA,KAAK,EAAE;AAJT,GAPmC,EAanC;AACEF,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,KAAK,EAAE,SAFT;AAGER,IAAAA,GAAG,EAAE,2CAHP;AAIES,IAAAA,KAAK,EAAE;AAJT,GAbmC,CAAD,CAApC;AAqBAd,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,KAAK,CAAC,wBAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACdR,MAAAA,SAAS,CAACQ,IAAD,CAAT;AACD,KAJH,EAKGC,KALH,CAKUC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,KAPH;AAQD,GATQ,EASN,EATM,CAAT;;AAWA,QAAME,cAAc,GAAG,CAACV,KAAD,EAAQR,GAAR,KAAgB;AACrC,UAAMmB,OAAO,GAAGpB,cAAc,CAACC,GAAD,CAA9B;AACA,UAAMoB,QAAQ,GAAG;AACfb,MAAAA,EAAE,EAAEF,MAAM,CAACF,MAAP,GAAgB,CADL;AAEfK,MAAAA,KAFe;AAGfR,MAAAA,GAAG,EAAG,iCAAgCmB,OAAQ,EAH/B;AAIfV,MAAAA,KAAK,EAAE;AAJQ,KAAjB;AAOAC,IAAAA,KAAK,CAAC,wBAAD,EAA2B;AAC9BW,MAAAA,MAAM,EAAE,MADsB;AAE9BC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFqB;AAK9BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,QAAf;AALwB,KAA3B,CAAL,CAOGT,IAPH,CAOSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAPtB,EAQGF,IARH,CAQSG,IAAD,IAAU;AACd,UAAIA,IAAI,CAACP,EAAT,EAAa;AACXD,QAAAA,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAYe,QAAZ,CAAD,CAAT;AACD,OAFD,MAEO;AACLH,QAAAA,OAAO,CAACD,KAAR,CAAcF,IAAI,CAACY,OAAnB;AACD;AACF,KAdH,EAeGX,KAfH,CAeUC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,KAjBH;AAkBD,GA3BD;;AA6BA,QAAMW,UAAU,GAAG,CAACR,OAAD,EAAUS,SAAV,KAAwB;AACzCtB,IAAAA,SAAS,CAAEuB,UAAD,IACRA,UAAU,CAACC,GAAX,CAAgBC,KAAD,IACbA,KAAK,CAACxB,EAAN,KAAaY,OAAb,GACI,EAAE,GAAGY,KAAL;AAAYtB,MAAAA,KAAK,EAAEsB,KAAK,CAACtB,KAAN,GAAcmB;AAAjC,KADJ,GAEIG,KAHN,CADO,CAAT;AAOD,GARD;;AAUA,QAAMC,iBAAiB,GAAIb,OAAD,IAAa;AACrCb,IAAAA,SAAS,CAAEuB,UAAD,IACRA,UAAU,CAACI,MAAX,CAAmBF,KAAD,IAAWA,KAAK,CAACxB,EAAN,KAAaY,OAA1C,CADO,CAAT;AAGD,GAJD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE,QAAC,SAAD;AACE,QAAA,MAAM,EAAEd,MADV;AAEE,QAAA,UAAU,EAAEsB,UAFd;AAGE,QAAA,YAAY,EAAEK;AAHhB;AAAA;AAAA;AAAA;AAAA,cADF,eAME,QAAC,YAAD;AAAc,QAAA,cAAc,EAAEd;AAA9B;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CA7FD;;GAAMd,G;;KAAAA,G;AA+FN,eAAeA,GAAf","sourcesContent":["// import React, { useState } from \"react\";\n// import VideoList from \"./components/VideoList\";\n// import AddVideoForm from \"./components/AddVideoForm\";\n// import \"./App.css\";\n\n// function extractVideoId(url) {\n//   // Extract the video ID from the YouTube URL\n//   // Implement this function according to your requirements\n//   // Example implementation:\n//   const urlParts = url.split(\"/\");\n//   return urlParts[urlParts.length - 1];\n// }\n\n// function App() {\n//   const [videos, setVideos] = useState([\n//     {\n//       id: 1,\n//       title: \"Video 1\",\n//       url: \"https://www.youtube.com/embed/dQw4w9WgXcQ\",\n//       votes: 0,\n//     },\n//     {\n//       id: 2,\n//       title: \"Video 2\",\n//       url: \"https://www.youtube.com/embed/K4DyBUG242c\",\n//       votes: 0,\n//     },\n//     {\n//       id: 3,\n//       title: \"Video 3\",\n//       url: \"https://www.youtube.com/embed/tgbNymZ7vqY\",\n//       votes: 0,\n//     },\n//   ]);\n\n//   const handleAddVideo = (title, url) => {\n//     const videoId = extractVideoId(url);\n//     const newVideo = {\n//       id: videos.length + 1,\n//       title,\n//       url: `https://www.youtube.com/embed/${videoId}`,\n//       votes: 0,\n//     };\n//     setVideos([...videos, newVideo]);\n//   };\n\n//   const handleVote = (videoId, increment) => {\n//     setVideos((prevVideos) =>\n//       prevVideos.map((video) =>\n//         video.id === videoId\n//           ? { ...video, votes: video.votes + increment }\n//           : video\n//       )\n//     );\n//   };\n\n//   const handleRemoveVideo = (videoId) => {\n//     setVideos((prevVideos) =>\n//       prevVideos.filter((video) => video.id !== videoId)\n//     );\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <h1>Video Recommendation</h1>\n//       </header>\n//       <div className=\"container\">\n//         <VideoList\n//           videos={videos}\n//           handleVote={handleVote}\n//           handleRemove={handleRemoveVideo}\n//         />\n//         <AddVideoForm handleAddVideo={handleAddVideo} />\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useEffect, useState } from \"react\";\nimport VideoList from \"./components/VideoList\";\nimport AddVideoForm from \"./components/AddVideoForm\";\nimport \"./App.css\";\n\nconst extractVideoId = (url) => {\n  const urlParts = url.split(\"/\");\n  return urlParts[urlParts.length - 1];\n};\n\nconst App = () => {\n  const [videos, setVideos] = useState([\n    {\n      id: 1,\n      title: \"Video 1\",\n      url: \"https://www.youtube.com/embed/dQw4w9WgXcQ\",\n      votes: 0,\n    },\n    {\n      id: 2,\n      title: \"Video 2\",\n      url: \"https://www.youtube.com/embed/K4DyBUG242c\",\n      votes: 0,\n    },\n    {\n      id: 3,\n      title: \"Video 3\",\n      url: \"https://www.youtube.com/embed/tgbNymZ7vqY\",\n      votes: 0,\n    },\n  ]);\n\n  useEffect(() => {\n    fetch(\"http://127.0.0.1:5000/\")\n      .then((response) => response.json())\n      .then((data) => {\n        setVideos(data);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, []);\n\n  const handleAddVideo = (title, url) => {\n    const videoId = extractVideoId(url);\n    const newVideo = {\n      id: videos.length + 1,\n      title,\n      url: `https://www.youtube.com/embed/${videoId}`,\n      votes: 0,\n    };\n\n    fetch(\"http://127.0.0.1:5000/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newVideo),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.id) {\n          setVideos([...videos, newVideo]);\n        } else {\n          console.error(data.message);\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  const handleVote = (videoId, increment) => {\n    setVideos((prevVideos) =>\n      prevVideos.map((video) =>\n        video.id === videoId\n          ? { ...video, votes: video.votes + increment }\n          : video\n      )\n    );\n  };\n\n  const handleRemoveVideo = (videoId) => {\n    setVideos((prevVideos) =>\n      prevVideos.filter((video) => video.id !== videoId)\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Video Recommendation</h1>\n      </header>\n      <div className=\"container\">\n        <VideoList\n          videos={videos}\n          handleVote={handleVote}\n          handleRemove={handleRemoveVideo}\n        />\n        <AddVideoForm handleAddVideo={handleAddVideo} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}