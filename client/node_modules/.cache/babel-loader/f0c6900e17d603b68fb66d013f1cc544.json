{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { useControllableReducer } from '../utils/useControllableReducer';\nimport { DropdownActionTypes } from './useDropdown.types';\nimport { dropdownReducer } from './dropdownReducer';\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useDropdown API](https://mui.com/base-ui/react-menu/hooks-api/#use-dropdown)\n */\n\nexport function useDropdown() {\n  var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaultOpen = parameters.defaultOpen,\n      onOpenChange = parameters.onOpenChange,\n      openProp = parameters.open;\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      popupId = _React$useState2[0],\n      setPopupId = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      triggerElement = _React$useState4[0],\n      setTriggerElement = _React$useState4[1];\n\n  var lastActionType = React.useRef(null);\n  var handleStateChange = React.useCallback(function (event, field, value, reason) {\n    if (field === 'open') {\n      onOpenChange == null ? void 0 : onOpenChange(event, value);\n    }\n\n    lastActionType.current = reason;\n  }, [onOpenChange]);\n  var controlledProps = React.useMemo(function () {\n    return openProp !== undefined ? {\n      open: openProp\n    } : {};\n  }, [openProp]);\n\n  var _useControllableReduc = useControllableReducer({\n    controlledProps: controlledProps,\n    initialState: defaultOpen ? {\n      open: true\n    } : {\n      open: false\n    },\n    onStateChange: handleStateChange,\n    reducer: dropdownReducer\n  }),\n      _useControllableReduc2 = _slicedToArray(_useControllableReduc, 2),\n      state = _useControllableReduc2[0],\n      dispatch = _useControllableReduc2[1];\n\n  React.useEffect(function () {\n    if (!state.open && lastActionType.current !== null && lastActionType.current !== DropdownActionTypes.blur) {\n      triggerElement == null ? void 0 : triggerElement.focus();\n    }\n  }, [state.open, triggerElement]);\n  var contextValue = {\n    state: state,\n    dispatch: dispatch,\n    popupId: popupId,\n    registerPopup: setPopupId,\n    registerTrigger: setTriggerElement,\n    triggerElement: triggerElement\n  };\n  return {\n    contextValue: contextValue,\n    open: state.open\n  };\n}","map":{"version":3,"sources":["/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@mui/base/useDropdown/useDropdown.js"],"names":["React","useControllableReducer","DropdownActionTypes","dropdownReducer","useDropdown","parameters","defaultOpen","onOpenChange","openProp","open","useState","popupId","setPopupId","triggerElement","setTriggerElement","lastActionType","useRef","handleStateChange","useCallback","event","field","value","reason","current","controlledProps","useMemo","undefined","initialState","onStateChange","reducer","state","dispatch","useEffect","blur","focus","contextValue","registerPopup","registerTrigger"],"mappings":"AAAA;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,sBAAT,QAAuC,iCAAvC;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,GAAsC;AAAA,MAAjBC,UAAiB,uEAAJ,EAAI;AAC3C,MACEC,WADF,GAIID,UAJJ,CACEC,WADF;AAAA,MAEEC,YAFF,GAIIF,UAJJ,CAEEE,YAFF;AAAA,MAGQC,QAHR,GAIIH,UAJJ,CAGEI,IAHF;;AAKA,wBAA8BT,KAAK,CAACU,QAAN,CAAe,EAAf,CAA9B;AAAA;AAAA,MAAOC,OAAP;AAAA,MAAgBC,UAAhB;;AACA,yBAA4CZ,KAAK,CAACU,QAAN,CAAe,IAAf,CAA5C;AAAA;AAAA,MAAOG,cAAP;AAAA,MAAuBC,iBAAvB;;AACA,MAAMC,cAAc,GAAGf,KAAK,CAACgB,MAAN,CAAa,IAAb,CAAvB;AACA,MAAMC,iBAAiB,GAAGjB,KAAK,CAACkB,WAAN,CAAkB,UAACC,KAAD,EAAQC,KAAR,EAAeC,KAAf,EAAsBC,MAAtB,EAAiC;AAC3E,QAAIF,KAAK,KAAK,MAAd,EAAsB;AACpBb,MAAAA,YAAY,IAAI,IAAhB,GAAuB,KAAK,CAA5B,GAAgCA,YAAY,CAACY,KAAD,EAAQE,KAAR,CAA5C;AACD;;AACDN,IAAAA,cAAc,CAACQ,OAAf,GAAyBD,MAAzB;AACD,GALyB,EAKvB,CAACf,YAAD,CALuB,CAA1B;AAMA,MAAMiB,eAAe,GAAGxB,KAAK,CAACyB,OAAN,CAAc;AAAA,WAAMjB,QAAQ,KAAKkB,SAAb,GAAyB;AACnEjB,MAAAA,IAAI,EAAED;AAD6D,KAAzB,GAExC,EAFkC;AAAA,GAAd,EAEhB,CAACA,QAAD,CAFgB,CAAxB;;AAGA,8BAA0BP,sBAAsB,CAAC;AAC/CuB,IAAAA,eAAe,EAAfA,eAD+C;AAE/CG,IAAAA,YAAY,EAAErB,WAAW,GAAG;AAC1BG,MAAAA,IAAI,EAAE;AADoB,KAAH,GAErB;AACFA,MAAAA,IAAI,EAAE;AADJ,KAJ2C;AAO/CmB,IAAAA,aAAa,EAAEX,iBAPgC;AAQ/CY,IAAAA,OAAO,EAAE1B;AARsC,GAAD,CAAhD;AAAA;AAAA,MAAO2B,KAAP;AAAA,MAAcC,QAAd;;AAUA/B,EAAAA,KAAK,CAACgC,SAAN,CAAgB,YAAM;AACpB,QAAI,CAACF,KAAK,CAACrB,IAAP,IAAeM,cAAc,CAACQ,OAAf,KAA2B,IAA1C,IAAkDR,cAAc,CAACQ,OAAf,KAA2BrB,mBAAmB,CAAC+B,IAArG,EAA2G;AACzGpB,MAAAA,cAAc,IAAI,IAAlB,GAAyB,KAAK,CAA9B,GAAkCA,cAAc,CAACqB,KAAf,EAAlC;AACD;AACF,GAJD,EAIG,CAACJ,KAAK,CAACrB,IAAP,EAAaI,cAAb,CAJH;AAKA,MAAMsB,YAAY,GAAG;AACnBL,IAAAA,KAAK,EAALA,KADmB;AAEnBC,IAAAA,QAAQ,EAARA,QAFmB;AAGnBpB,IAAAA,OAAO,EAAPA,OAHmB;AAInByB,IAAAA,aAAa,EAAExB,UAJI;AAKnByB,IAAAA,eAAe,EAAEvB,iBALE;AAMnBD,IAAAA,cAAc,EAAdA;AANmB,GAArB;AAQA,SAAO;AACLsB,IAAAA,YAAY,EAAZA,YADK;AAEL1B,IAAAA,IAAI,EAAEqB,KAAK,CAACrB;AAFP,GAAP;AAID","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { useControllableReducer } from '../utils/useControllableReducer';\nimport { DropdownActionTypes } from './useDropdown.types';\nimport { dropdownReducer } from './dropdownReducer';\n\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useDropdown API](https://mui.com/base-ui/react-menu/hooks-api/#use-dropdown)\n */\nexport function useDropdown(parameters = {}) {\n  const {\n    defaultOpen,\n    onOpenChange,\n    open: openProp\n  } = parameters;\n  const [popupId, setPopupId] = React.useState('');\n  const [triggerElement, setTriggerElement] = React.useState(null);\n  const lastActionType = React.useRef(null);\n  const handleStateChange = React.useCallback((event, field, value, reason) => {\n    if (field === 'open') {\n      onOpenChange == null ? void 0 : onOpenChange(event, value);\n    }\n    lastActionType.current = reason;\n  }, [onOpenChange]);\n  const controlledProps = React.useMemo(() => openProp !== undefined ? {\n    open: openProp\n  } : {}, [openProp]);\n  const [state, dispatch] = useControllableReducer({\n    controlledProps,\n    initialState: defaultOpen ? {\n      open: true\n    } : {\n      open: false\n    },\n    onStateChange: handleStateChange,\n    reducer: dropdownReducer\n  });\n  React.useEffect(() => {\n    if (!state.open && lastActionType.current !== null && lastActionType.current !== DropdownActionTypes.blur) {\n      triggerElement == null ? void 0 : triggerElement.focus();\n    }\n  }, [state.open, triggerElement]);\n  const contextValue = {\n    state,\n    dispatch,\n    popupId,\n    registerPopup: setPopupId,\n    registerTrigger: setTriggerElement,\n    triggerElement\n  };\n  return {\n    contextValue,\n    open: state.open\n  };\n}"]},"metadata":{},"sourceType":"module"}