{"ast":null,"code":"var _jsxFileName = \"/home/coder/CYF/react-learn/Full-Stack-Project-Assessment/client/src/components/Video.jsx\",\n    _s = $RefreshSig$();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// import React , {useState} from \"react\";\n// import exampleresponse from \"../exampleresponse.json\";\n// function Video({videoObj}) {\n//   const videoId = getVideoIdFromUrl(videoObj.url);\n//   const [vid, setVid] = useState(exampleresponse);\n//   const [vote,setVote] = useState(videoObj.rating)\n//   const voteIncrease = () => {\n//       setVote((prev) => prev + 1);\n//     };\n//     const voteDecrease = () => {\n//       setVote((prev) => (prev > 0 ? prev - 1 : 0));\n//     };\n//   // const updateVoteCount = (videoId, value) => {\n//   //   setVid((prevVid) =>\n//   //     prevVid.map((video) => (video.id === videoId ? { ...video, votes: (video.votes || 0) + value } : video))\n//   //   );\n//   // };\n//   // const newVideoAdd = (newInput) => {\n//   //   const newId = vid.length + 1;\n//   //   newInput.id = newId;\n//   //   newInput.votes = 0;\n//   //   setVid([...vid, newInput]);\n//   // };\n//   const deleteVideo = (videoId) => {\n//     const videoDeleted = vid.filter((el) => el.id !== videoId);\n//     setVid(videoDeleted);\n//   };\n//   let date = new Date().toDateString();\n//   return (\n//     <div className=\"card\">\n//       <iframe\n//         src={`https://www.youtube.com/embed/${videoId}`}\n//         frameborder=\"0\"\n//         allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n//         title=\"YouTube video player\"\n//         allowfullscreen height={'300px'}\n//       ></iframe>\n//       <div className=\"card-body\">\n//         <h5 className=\"card-title\">{videoObj.title}</h5>\n//         <p className=\"card-text\">Requasted At: {date}</p>\n//         <div className=\"buttons\">\n//           <button onClick = {voteIncrease} className=\"btn btn-primary\"> &#128077; </button>\n//           <p>{videoObj.rating} </p>\n//           <button onClick = {voteDecrease} className=\"btn btn-warning\"> &#128078; </button>\n//           <button onClick = {deleteVideo} className=\"btn btn-danger\">\n//             <i className=\"fa fa-trash-o\"></i>\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n// export default Video;\n// function getVideoIdFromUrl(url) {\n//   const videoId = url.split(\"v=\")[1];\n//   return videoId;\n// }\nfunction Video(_ref) {\n  _s();\n\n  let {\n    videoObj\n  } = _ref;\n  const videoId = getVideoIdFromUrl(videoObj.url);\n  const [vote, setVote] = useState(videoObj.rating);\n\n  const voteIncrease = () => {\n    setVote(prev => prev + 1);\n  };\n\n  const voteDecrease = () => {\n    setVote(prev => prev > 0 ? prev - 1 : 0);\n  };\n\n  const deleteVideo = () => {// Delete video logic\n  };\n\n  const date = new Date().toDateString();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: [/*#__PURE__*/_jsxDEV(\"iframe\", {\n      src: `https://www.youtube.com/embed/${videoId}`,\n      frameBorder: \"0\",\n      allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n      title: \"YouTube video player\",\n      allowFullScreen: true,\n      height: \"300px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"card-title\",\n        children: videoObj.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"card-text\",\n        children: [\"Requested At: \", date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: voteIncrease,\n          className: \"btn btn-primary\",\n          children: \"\\uD83D\\uDC4D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: vote\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: voteDecrease,\n          className: \"btn btn-warning\",\n          children: \"\\uD83D\\uDC4E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: deleteVideo,\n          className: \"btn btn-danger\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-trash-o\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Video, \"3FUJGpvNYGPdI7of5fQgW92YpUA=\");\n\n_c = Video;\nexport default Video;\n\nfunction getVideoIdFromUrl(url) {\n  const videoId = url.split(\"v=\")[1];\n  return videoId;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Video\");","map":{"version":3,"sources":["/home/coder/CYF/react-learn/Full-Stack-Project-Assessment/client/src/components/Video.jsx"],"names":["Video","videoObj","videoId","getVideoIdFromUrl","url","vote","setVote","useState","rating","voteIncrease","prev","voteDecrease","deleteVideo","date","Date","toDateString","title","split"],"mappings":";;;;;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,KAAT,OAA6B;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAC3B,QAAMC,OAAO,GAAGC,iBAAiB,CAACF,QAAQ,CAACG,GAAV,CAAjC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBC,QAAQ,CAACN,QAAQ,CAACO,MAAV,CAAhC;;AAEA,QAAMC,YAAY,GAAG,MAAM;AACzBH,IAAAA,OAAO,CAAEI,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAP;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAG,MAAM;AACzBL,IAAAA,OAAO,CAAEI,IAAD,IAAWA,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAlC,CAAP;AACD,GAFD;;AAIA,QAAME,WAAW,GAAG,MAAM,CACxB;AACD,GAFD;;AAIA,QAAMC,IAAI,GAAG,IAAIC,IAAJ,GAAWC,YAAX,EAAb;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACE;AACE,MAAA,GAAG,EAAG,iCAAgCb,OAAQ,EADhD;AAEE,MAAA,WAAW,EAAC,GAFd;AAGE,MAAA,KAAK,EAAC,yEAHR;AAIE,MAAA,KAAK,EAAC,sBAJR;AAKE,MAAA,eAAe,MALjB;AAME,MAAA,MAAM,EAAC;AANT;AAAA;AAAA;AAAA;AAAA,YADF,eASE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA,kBAA4BD,QAAQ,CAACe;AAArC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAG,QAAA,SAAS,EAAC,WAAb;AAAA,qCAAwCH,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,gCACE;AAAQ,UAAA,OAAO,EAAEJ,YAAjB;AAA+B,UAAA,SAAS,EAAC,iBAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAA,oBAAIJ;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE;AAAQ,UAAA,OAAO,EAAEM,YAAjB;AAA+B,UAAA,SAAS,EAAC,iBAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,eAQE;AAAQ,UAAA,OAAO,EAAEC,WAAjB;AAA8B,UAAA,SAAS,EAAC,gBAAxC;AAAA,iCACE;AAAG,YAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD;;GA9CQZ,K;;KAAAA,K;AAgDT,eAAeA,KAAf;;AACA,SAASG,iBAAT,CAA2BC,GAA3B,EAAgC;AAC9B,QAAMF,OAAO,GAAGE,GAAG,CAACa,KAAJ,CAAU,IAAV,EAAgB,CAAhB,CAAhB;AACA,SAAOf,OAAP;AACD","sourcesContent":["\n// import React , {useState} from \"react\";\n// import exampleresponse from \"../exampleresponse.json\";\n\n\n// function Video({videoObj}) {\n//   const videoId = getVideoIdFromUrl(videoObj.url);\n//   const [vid, setVid] = useState(exampleresponse);\n//   const [vote,setVote] = useState(videoObj.rating)\n\n\n//   const voteIncrease = () => {\n//       setVote((prev) => prev + 1);\n//     };\n\n//     const voteDecrease = () => {\n//       setVote((prev) => (prev > 0 ? prev - 1 : 0));\n//     };\n\n//   // const updateVoteCount = (videoId, value) => {\n//   //   setVid((prevVid) =>\n//   //     prevVid.map((video) => (video.id === videoId ? { ...video, votes: (video.votes || 0) + value } : video))\n//   //   );\n//   // };\n\n//   // const newVideoAdd = (newInput) => {\n//   //   const newId = vid.length + 1;\n//   //   newInput.id = newId;\n//   //   newInput.votes = 0;\n//   //   setVid([...vid, newInput]);\n//   // };\n\n\n//   const deleteVideo = (videoId) => {\n//     const videoDeleted = vid.filter((el) => el.id !== videoId);\n//     setVid(videoDeleted);\n//   };\n\n//   let date = new Date().toDateString();\n\n\n\n\n\n//   return (\n\n//     <div className=\"card\">\n//       <iframe\n//         src={`https://www.youtube.com/embed/${videoId}`}\n//         frameborder=\"0\"\n//         allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n//         title=\"YouTube video player\"\n//         allowfullscreen height={'300px'}\n//       ></iframe>\n//       <div className=\"card-body\">\n//         <h5 className=\"card-title\">{videoObj.title}</h5>\n//         <p className=\"card-text\">Requasted At: {date}</p>\n//         <div className=\"buttons\">\n//           <button onClick = {voteIncrease} className=\"btn btn-primary\"> &#128077; </button>\n//           <p>{videoObj.rating} </p>\n//           <button onClick = {voteDecrease} className=\"btn btn-warning\"> &#128078; </button>\n//           <button onClick = {deleteVideo} className=\"btn btn-danger\">\n//             <i className=\"fa fa-trash-o\"></i>\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n// export default Video;\n// function getVideoIdFromUrl(url) {\n//   const videoId = url.split(\"v=\")[1];\n//   return videoId;\n// }\nfunction Video({ videoObj }) {\n  const videoId = getVideoIdFromUrl(videoObj.url);\n  const [vote, setVote] = useState(videoObj.rating);\n\n  const voteIncrease = () => {\n    setVote((prev) => prev + 1);\n  };\n\n  const voteDecrease = () => {\n    setVote((prev) => (prev > 0 ? prev - 1 : 0));\n  };\n\n  const deleteVideo = () => {\n    // Delete video logic\n  };\n\n  const date = new Date().toDateString();\n\n  return (\n    <div className=\"card\">\n      <iframe\n        src={`https://www.youtube.com/embed/${videoId}`}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n        title=\"YouTube video player\"\n        allowFullScreen\n        height=\"300px\"\n      ></iframe>\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">{videoObj.title}</h5>\n        <p className=\"card-text\">Requested At: {date}</p>\n        <div className=\"buttons\">\n          <button onClick={voteIncrease} className=\"btn btn-primary\">\n            &#128077;\n          </button>\n          <p>{vote}</p>\n          <button onClick={voteDecrease} className=\"btn btn-warning\">\n            &#128078;\n          </button>\n          <button onClick={deleteVideo} className=\"btn btn-danger\">\n            <i className=\"fa fa-trash-o\"></i>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Video;\nfunction getVideoIdFromUrl(url) {\n  const videoId = url.split(\"v=\")[1];\n  return videoId;\n}"]},"metadata":{},"sourceType":"module"}