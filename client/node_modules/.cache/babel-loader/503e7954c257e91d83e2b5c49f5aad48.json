{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"fontFamily\", \"fontSize\", \"fontWeightLight\", \"fontWeightRegular\", \"fontWeightMedium\", \"fontWeightBold\", \"htmlFontSize\", \"allVariants\", \"pxToRem\"];\nimport { deepmerge } from '@mui/utils';\n\nfunction round(value) {\n  return Math.round(value * 1e5) / 1e5;\n}\n\nconst caseAllCaps = {\n  textTransform: 'uppercase'\n};\nconst defaultFontFamily = '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif';\n/**\n * @see @link{https://m2.material.io/design/typography/the-type-system.html}\n * @see @link{https://m2.material.io/design/typography/understanding-typography.html}\n */\n\nexport default function createTypography(palette, typography) {\n  const _ref = typeof typography === 'function' ? typography(palette) : typography,\n        {\n    fontFamily = defaultFontFamily,\n    // The default font size of the Material Specification.\n    fontSize = 14,\n    // px\n    fontWeightLight = 300,\n    fontWeightRegular = 400,\n    fontWeightMedium = 500,\n    fontWeightBold = 700,\n    // Tell MUI what's the font-size on the html element.\n    // 16px is the default font-size used by browsers.\n    htmlFontSize = 16,\n    // Apply the CSS properties to all the variants.\n    allVariants,\n    pxToRem: pxToRem2\n  } = _ref,\n        other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof fontSize !== 'number') {\n      console.error('MUI: `fontSize` is required to be a number.');\n    }\n\n    if (typeof htmlFontSize !== 'number') {\n      console.error('MUI: `htmlFontSize` is required to be a number.');\n    }\n  }\n\n  const coef = fontSize / 14;\n\n  const pxToRem = pxToRem2 || (size => `${size / htmlFontSize * coef}rem`);\n\n  const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends({\n    fontFamily,\n    fontWeight,\n    fontSize: pxToRem(size),\n    // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/\n    lineHeight\n  }, fontFamily === defaultFontFamily ? {\n    letterSpacing: `${round(letterSpacing / size)}em`\n  } : {}, casing, allVariants);\n\n  const variants = {\n    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),\n    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),\n    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),\n    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),\n    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),\n    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),\n    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),\n    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),\n    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),\n    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),\n    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),\n    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),\n    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),\n    // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.\n    inherit: {\n      fontFamily: 'inherit',\n      fontWeight: 'inherit',\n      fontSize: 'inherit',\n      lineHeight: 'inherit',\n      letterSpacing: 'inherit'\n    }\n  };\n  return deepmerge(_extends({\n    htmlFontSize,\n    pxToRem,\n    fontFamily,\n    fontSize,\n    fontWeightLight,\n    fontWeightRegular,\n    fontWeightMedium,\n    fontWeightBold\n  }, variants), other, {\n    clone: false // No need to clone deep\n\n  });\n}","map":{"version":3,"sources":["/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@mui/material/styles/createTypography.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","deepmerge","round","value","Math","caseAllCaps","textTransform","defaultFontFamily","createTypography","palette","typography","_ref","fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem","pxToRem2","other","process","env","NODE_ENV","console","error","coef","size","buildVariant","fontWeight","lineHeight","letterSpacing","casing","variants","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","button","caption","overline","inherit","clone"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,MAAMC,SAAS,GAAG,CAAC,YAAD,EAAe,UAAf,EAA2B,iBAA3B,EAA8C,mBAA9C,EAAmE,kBAAnE,EAAuF,gBAAvF,EAAyG,cAAzG,EAAyH,aAAzH,EAAwI,SAAxI,CAAlB;AACA,SAASC,SAAT,QAA0B,YAA1B;;AACA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,SAAOC,IAAI,CAACF,KAAL,CAAWC,KAAK,GAAG,GAAnB,IAA0B,GAAjC;AACD;;AACD,MAAME,WAAW,GAAG;AAClBC,EAAAA,aAAa,EAAE;AADG,CAApB;AAGA,MAAMC,iBAAiB,GAAG,4CAA1B;AAEA;AACA;AACA;AACA;;AACA,eAAe,SAASC,gBAAT,CAA0BC,OAA1B,EAAmCC,UAAnC,EAA+C;AAC5D,QAAMC,IAAI,GAAG,OAAOD,UAAP,KAAsB,UAAtB,GAAmCA,UAAU,CAACD,OAAD,CAA7C,GAAyDC,UAAtE;AAAA,QACE;AACEE,IAAAA,UAAU,GAAGL,iBADf;AAEE;AACAM,IAAAA,QAAQ,GAAG,EAHb;AAIE;AACAC,IAAAA,eAAe,GAAG,GALpB;AAMEC,IAAAA,iBAAiB,GAAG,GANtB;AAOEC,IAAAA,gBAAgB,GAAG,GAPrB;AAQEC,IAAAA,cAAc,GAAG,GARnB;AASE;AACA;AACAC,IAAAA,YAAY,GAAG,EAXjB;AAYE;AACAC,IAAAA,WAbF;AAcEC,IAAAA,OAAO,EAAEC;AAdX,MAeIV,IAhBN;AAAA,QAiBEW,KAAK,GAAGvB,6BAA6B,CAACY,IAAD,EAAOX,SAAP,CAjBvC;;AAkBA,MAAIuB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAI,OAAOZ,QAAP,KAAoB,QAAxB,EAAkC;AAChCa,MAAAA,OAAO,CAACC,KAAR,CAAc,6CAAd;AACD;;AACD,QAAI,OAAOT,YAAP,KAAwB,QAA5B,EAAsC;AACpCQ,MAAAA,OAAO,CAACC,KAAR,CAAc,iDAAd;AACD;AACF;;AACD,QAAMC,IAAI,GAAGf,QAAQ,GAAG,EAAxB;;AACA,QAAMO,OAAO,GAAGC,QAAQ,KAAKQ,IAAI,IAAK,GAAEA,IAAI,GAAGX,YAAP,GAAsBU,IAAK,KAA3C,CAAxB;;AACA,QAAME,YAAY,GAAG,CAACC,UAAD,EAAaF,IAAb,EAAmBG,UAAnB,EAA+BC,aAA/B,EAA8CC,MAA9C,KAAyDpC,QAAQ,CAAC;AACrFc,IAAAA,UADqF;AAErFmB,IAAAA,UAFqF;AAGrFlB,IAAAA,QAAQ,EAAEO,OAAO,CAACS,IAAD,CAHoE;AAIrF;AACAG,IAAAA;AALqF,GAAD,EAMnFpB,UAAU,KAAKL,iBAAf,GAAmC;AACpC0B,IAAAA,aAAa,EAAG,GAAE/B,KAAK,CAAC+B,aAAa,GAAGJ,IAAjB,CAAuB;AADV,GAAnC,GAEC,EARkF,EAQ9EK,MAR8E,EAQtEf,WARsE,CAAtF;;AASA,QAAMgB,QAAQ,GAAG;AACfC,IAAAA,EAAE,EAAEN,YAAY,CAAChB,eAAD,EAAkB,EAAlB,EAAsB,KAAtB,EAA6B,CAAC,GAA9B,CADD;AAEfuB,IAAAA,EAAE,EAAEP,YAAY,CAAChB,eAAD,EAAkB,EAAlB,EAAsB,GAAtB,EAA2B,CAAC,GAA5B,CAFD;AAGfwB,IAAAA,EAAE,EAAER,YAAY,CAACf,iBAAD,EAAoB,EAApB,EAAwB,KAAxB,EAA+B,CAA/B,CAHD;AAIfwB,IAAAA,EAAE,EAAET,YAAY,CAACf,iBAAD,EAAoB,EAApB,EAAwB,KAAxB,EAA+B,IAA/B,CAJD;AAKfyB,IAAAA,EAAE,EAAEV,YAAY,CAACf,iBAAD,EAAoB,EAApB,EAAwB,KAAxB,EAA+B,CAA/B,CALD;AAMf0B,IAAAA,EAAE,EAAEX,YAAY,CAACd,gBAAD,EAAmB,EAAnB,EAAuB,GAAvB,EAA4B,IAA5B,CAND;AAOf0B,IAAAA,SAAS,EAAEZ,YAAY,CAACf,iBAAD,EAAoB,EAApB,EAAwB,IAAxB,EAA8B,IAA9B,CAPR;AAQf4B,IAAAA,SAAS,EAAEb,YAAY,CAACd,gBAAD,EAAmB,EAAnB,EAAuB,IAAvB,EAA6B,GAA7B,CARR;AASf4B,IAAAA,KAAK,EAAEd,YAAY,CAACf,iBAAD,EAAoB,EAApB,EAAwB,GAAxB,EAA6B,IAA7B,CATJ;AAUf8B,IAAAA,KAAK,EAAEf,YAAY,CAACf,iBAAD,EAAoB,EAApB,EAAwB,IAAxB,EAA8B,IAA9B,CAVJ;AAWf+B,IAAAA,MAAM,EAAEhB,YAAY,CAACd,gBAAD,EAAmB,EAAnB,EAAuB,IAAvB,EAA6B,GAA7B,EAAkCX,WAAlC,CAXL;AAYf0C,IAAAA,OAAO,EAAEjB,YAAY,CAACf,iBAAD,EAAoB,EAApB,EAAwB,IAAxB,EAA8B,GAA9B,CAZN;AAafiC,IAAAA,QAAQ,EAAElB,YAAY,CAACf,iBAAD,EAAoB,EAApB,EAAwB,IAAxB,EAA8B,CAA9B,EAAiCV,WAAjC,CAbP;AAcf;AACA4C,IAAAA,OAAO,EAAE;AACPrC,MAAAA,UAAU,EAAE,SADL;AAEPmB,MAAAA,UAAU,EAAE,SAFL;AAGPlB,MAAAA,QAAQ,EAAE,SAHH;AAIPmB,MAAAA,UAAU,EAAE,SAJL;AAKPC,MAAAA,aAAa,EAAE;AALR;AAfM,GAAjB;AAuBA,SAAOhC,SAAS,CAACH,QAAQ,CAAC;AACxBoB,IAAAA,YADwB;AAExBE,IAAAA,OAFwB;AAGxBR,IAAAA,UAHwB;AAIxBC,IAAAA,QAJwB;AAKxBC,IAAAA,eALwB;AAMxBC,IAAAA,iBANwB;AAOxBC,IAAAA,gBAPwB;AAQxBC,IAAAA;AARwB,GAAD,EAStBkB,QATsB,CAAT,EASFb,KATE,EASK;AACnB4B,IAAAA,KAAK,EAAE,KADY,CACN;;AADM,GATL,CAAhB;AAYD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"fontFamily\", \"fontSize\", \"fontWeightLight\", \"fontWeightRegular\", \"fontWeightMedium\", \"fontWeightBold\", \"htmlFontSize\", \"allVariants\", \"pxToRem\"];\nimport { deepmerge } from '@mui/utils';\nfunction round(value) {\n  return Math.round(value * 1e5) / 1e5;\n}\nconst caseAllCaps = {\n  textTransform: 'uppercase'\n};\nconst defaultFontFamily = '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif';\n\n/**\n * @see @link{https://m2.material.io/design/typography/the-type-system.html}\n * @see @link{https://m2.material.io/design/typography/understanding-typography.html}\n */\nexport default function createTypography(palette, typography) {\n  const _ref = typeof typography === 'function' ? typography(palette) : typography,\n    {\n      fontFamily = defaultFontFamily,\n      // The default font size of the Material Specification.\n      fontSize = 14,\n      // px\n      fontWeightLight = 300,\n      fontWeightRegular = 400,\n      fontWeightMedium = 500,\n      fontWeightBold = 700,\n      // Tell MUI what's the font-size on the html element.\n      // 16px is the default font-size used by browsers.\n      htmlFontSize = 16,\n      // Apply the CSS properties to all the variants.\n      allVariants,\n      pxToRem: pxToRem2\n    } = _ref,\n    other = _objectWithoutPropertiesLoose(_ref, _excluded);\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof fontSize !== 'number') {\n      console.error('MUI: `fontSize` is required to be a number.');\n    }\n    if (typeof htmlFontSize !== 'number') {\n      console.error('MUI: `htmlFontSize` is required to be a number.');\n    }\n  }\n  const coef = fontSize / 14;\n  const pxToRem = pxToRem2 || (size => `${size / htmlFontSize * coef}rem`);\n  const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends({\n    fontFamily,\n    fontWeight,\n    fontSize: pxToRem(size),\n    // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/\n    lineHeight\n  }, fontFamily === defaultFontFamily ? {\n    letterSpacing: `${round(letterSpacing / size)}em`\n  } : {}, casing, allVariants);\n  const variants = {\n    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),\n    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),\n    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),\n    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),\n    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),\n    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),\n    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),\n    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),\n    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),\n    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),\n    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),\n    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),\n    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),\n    // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.\n    inherit: {\n      fontFamily: 'inherit',\n      fontWeight: 'inherit',\n      fontSize: 'inherit',\n      lineHeight: 'inherit',\n      letterSpacing: 'inherit'\n    }\n  };\n  return deepmerge(_extends({\n    htmlFontSize,\n    pxToRem,\n    fontFamily,\n    fontSize,\n    fontWeightLight,\n    fontWeightRegular,\n    fontWeightMedium,\n    fontWeightBold\n  }, variants), other, {\n    clone: false // No need to clone deep\n  });\n}"]},"metadata":{},"sourceType":"module"}