{"ast":null,"code":"var _jsxFileName = \"/home/mele/CodeYourFuture/Directory/htmlcssweek4/Full-Stack-Project-Assessment/client/src/Search.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Uploadvideo() {\n  _s();\n\n  const [videoData, setVideoData] = useState([]);\n\n  function isValidURL(url) {\n    const pattern = /^(https?:\\/\\/)?[a-z0-9\\-._~:/?#[\\]@!$&'()*+,;=]+$/i;\n    return pattern.test(url);\n  }\n\n  useEffect(() => {\n    fetch(\"/videos\").then(response => response.json()).then(updatedData => {\n      setVideoData(updatedData);\n    }).catch(error => {\n      console.error(\"Error fetching data:\", error);\n    });\n  }, []);\n  const [title, setTitle] = useState(\"\");\n  const [url, setURL] = useState(\"\");\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (title.trim() === \"\") {\n      return alert(\"Title cannot be empty.\");\n    }\n\n    if (!isValidURL(url)) {\n      return alert(\"Please enter a valid URL.\");\n    }\n\n    const currentDate = new Date();\n    const formattedDate = currentDate.toISOString();\n    const formData = {\n      id: videoData[videoData.length - 1].id + 1,\n      rating: 0,\n      title: title,\n      url: url.split(\"watch?\")[0] + \"embed/\" + url.split(\"?\")[1],\n      submittedAt: formattedDate\n    };\n\n    try {\n      const response = await fetch(\"/videos\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      });\n\n      if (response.ok) {\n        console.log(\"Form data submitted successfully\");\n      } else {\n        console.error(\"Form data submission failed\");\n      }\n    } catch (error) {\n      console.log(\"Error submitting form:\", error);\n    }\n  }; ///////\n\n\n  const [showForm, setShowForm] = useState(false);\n\n  const handleButtonClick = () => {\n    if (!showForm) {\n      setShowForm(true);\n    }\n  };\n\n  const handleCancelButtonClick = () => {\n    if (showForm) {\n      setShowForm(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      class: \"uploadVideo_btn\",\n      onClick: handleButtonClick,\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"#0\",\n        children: \"Upload Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"title\",\n            children: \"Title:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"title\",\n            type: \"text\",\n            value: title,\n            class: \"input\",\n            name: \"title\",\n            onChange: e => setTitle(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"url\",\n            children: \"url:\\xA0\\xA0\\xA0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"url\",\n            value: url,\n            class: \"input\",\n            type: \"url\",\n            name: \"url\",\n            onChange: e => setURL(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"formBtn\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"cancelBtn\",\n            onClick: handleCancelButtonClick,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"uploadBtn\",\n            type: \"submit\",\n            children: \"Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Uploadvideo, \"JDUWXjXYmyGZLn+D3V530lnUvpg=\");\n\n_c = Uploadvideo;\n\nfunction Searchvideo() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      for: \"searchid\",\n      children: \"Search:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"searchid\",\n      type: \"text\",\n      class: \"searchVideo\",\n      name: \"search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = Searchvideo;\nexport default function Search() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"search\",\n    children: [/*#__PURE__*/_jsxDEV(Uploadvideo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Searchvideo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n}\n_c3 = Search;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Uploadvideo\");\n$RefreshReg$(_c2, \"Searchvideo\");\n$RefreshReg$(_c3, \"Search\");","map":{"version":3,"sources":["/home/mele/CodeYourFuture/Directory/htmlcssweek4/Full-Stack-Project-Assessment/client/src/Search.js"],"names":["React","useEffect","useState","Uploadvideo","videoData","setVideoData","isValidURL","url","pattern","test","fetch","then","response","json","updatedData","catch","error","console","title","setTitle","setURL","handleSubmit","event","preventDefault","trim","alert","currentDate","Date","formattedDate","toISOString","formData","id","length","rating","split","submittedAt","method","headers","body","JSON","stringify","ok","log","showForm","setShowForm","handleButtonClick","handleCancelButtonClick","e","target","value","Searchvideo","Search"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\n\nfunction Uploadvideo() {\n  const [videoData, setVideoData] = useState([]);\n\n  function isValidURL(url) {\n    const pattern = /^(https?:\\/\\/)?[a-z0-9\\-._~:/?#[\\]@!$&'()*+,;=]+$/i;\n    return pattern.test(url);\n  }\n\n  useEffect(() => {\n    fetch(\"/videos\")\n      .then((response) => response.json())\n      .then((updatedData) => {\n        setVideoData(updatedData);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n      });\n  }, []);\n  \n  const [title, setTitle] = useState(\"\");\n  const [url, setURL] = useState(\"\");\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (title.trim() === \"\") {\n      return alert(\"Title cannot be empty.\");\n    }\n\n    if (!isValidURL(url)) {\n      return alert(\"Please enter a valid URL.\");\n    }\n\n    const currentDate = new Date();\n    const formattedDate = currentDate.toISOString();\n\n    const formData = {\n      id: videoData[videoData.length - 1].id + 1,\n      rating: 0,\n      title: title,\n      url: url.split(\"watch?\")[0] + \"embed/\" + url.split(\"?\")[1],\n      submittedAt: formattedDate,\n    };\n\n    try {\n      const response = await fetch(\"/videos\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(formData),\n      });\n      if (response.ok) {\n        console.log(\"Form data submitted successfully\");\n      } else {\n        console.error(\"Form data submission failed\");\n      }\n    } catch (error) {\n      console.log(\"Error submitting form:\", error);\n    }\n  };\n\n  ///////\n\n  const [showForm, setShowForm] = useState(false);\n\n  const handleButtonClick = () => {\n    if (!showForm) {\n      setShowForm(true);\n    }\n  };\n  const handleCancelButtonClick = () => {\n    if (showForm) {\n      setShowForm(false);\n    }\n  };\n\n  return (\n    <div>\n      <button class=\"uploadVideo_btn\" onClick={handleButtonClick}>\n        <a href=\"#0\">Upload Video</a>\n      </button>\n      {showForm && (\n        <div class=\"container\">\n          <form onSubmit={handleSubmit}>\n            <div>\n              <label htmlFor=\"title\">Title:</label>\n              <input\n                id=\"title\"\n                type=\"text\"\n                value={title}\n                class=\"input\"\n                name=\"title\"\n                onChange={(e) => setTitle(e.target.value)}\n                required\n              ></input>\n            </div>\n            <div>\n              <label htmlFor=\"url\">url:&nbsp;&nbsp;&nbsp;</label>\n              <input\n                id=\"url\"\n                value={url}\n                class=\"input\"\n                type=\"url\"\n                name=\"url\"\n                onChange={(e) => setURL(e.target.value)}\n                required\n              ></input>\n            </div>\n            <div class=\"formBtn\">\n              <button class=\"cancelBtn\" onClick={handleCancelButtonClick}>\n                Cancel\n              </button>\n              <button class=\"uploadBtn\" type=\"submit\">\n                Upload\n              </button>\n            </div>\n          </form>\n        </div>\n      )}\n    </div>\n  );\n}\nfunction Searchvideo() {\n  return (\n    <div>\n      <label for=\"searchid\">Search:</label>\n      <input\n        id=\"searchid\"\n        type=\"text\"\n        class=\"searchVideo\"\n        name=\"search\"\n      ></input>\n    </div>\n  );\n}\n\nexport default function Search() {\n  return (\n    <div class=\"search\">\n      <Uploadvideo />\n      <Searchvideo />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}