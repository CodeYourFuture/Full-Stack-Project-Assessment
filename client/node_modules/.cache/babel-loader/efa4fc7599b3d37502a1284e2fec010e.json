{"ast":null,"code":"'use strict';\n\n// tar -x\nvar hlo = require('./high-level-opt.js');\nvar Unpack = require('./unpack.js');\nvar fs = require('fs');\nvar fsm = require('fs-minipass');\nvar path = require('path');\nvar stripSlash = require('./strip-trailing-slashes.js');\nmodule.exports = function (opt_, files, cb) {\n  if (typeof opt_ === 'function') {\n    cb = opt_, files = null, opt_ = {};\n  } else if (Array.isArray(opt_)) {\n    files = opt_, opt_ = {};\n  }\n  if (typeof files === 'function') {\n    cb = files, files = null;\n  }\n  if (!files) {\n    files = [];\n  } else {\n    files = Array.from(files);\n  }\n  var opt = hlo(opt_);\n  if (opt.sync && typeof cb === 'function') {\n    throw new TypeError('callback not supported for sync tar functions');\n  }\n  if (!opt.file && typeof cb === 'function') {\n    throw new TypeError('callback only supported with file option');\n  }\n  if (files.length) {\n    filesFilter(opt, files);\n  }\n  return opt.file && opt.sync ? extractFileSync(opt) : opt.file ? extractFile(opt, cb) : opt.sync ? extractSync(opt) : extract(opt);\n};\n\n// construct a filter that limits the file entries listed\n// include child entries if a dir is included\nvar filesFilter = function filesFilter(opt, files) {\n  var map = new Map(files.map(function (f) {\n    return [stripSlash(f), true];\n  }));\n  var filter = opt.filter;\n  var mapHas = function mapHas(file, r) {\n    var root = r || path.parse(file).root || '.';\n    var ret = file === root ? false : map.has(file) ? map.get(file) : mapHas(path.dirname(file), root);\n    map.set(file, ret);\n    return ret;\n  };\n  opt.filter = filter ? function (file, entry) {\n    return filter(file, entry) && mapHas(stripSlash(file));\n  } : function (file) {\n    return mapHas(stripSlash(file));\n  };\n};\nvar extractFileSync = function extractFileSync(opt) {\n  var u = new Unpack.Sync(opt);\n  var file = opt.file;\n  var stat = fs.statSync(file);\n  // This trades a zero-byte read() syscall for a stat\n  // However, it will usually result in less memory allocation\n  var readSize = opt.maxReadSize || 16 * 1024 * 1024;\n  var stream = new fsm.ReadStreamSync(file, {\n    readSize: readSize,\n    size: stat.size\n  });\n  stream.pipe(u);\n};\nvar extractFile = function extractFile(opt, cb) {\n  var u = new Unpack(opt);\n  var readSize = opt.maxReadSize || 16 * 1024 * 1024;\n  var file = opt.file;\n  var p = new Promise(function (resolve, reject) {\n    u.on('error', reject);\n    u.on('close', resolve);\n\n    // This trades a zero-byte read() syscall for a stat\n    // However, it will usually result in less memory allocation\n    fs.stat(file, function (er, stat) {\n      if (er) {\n        reject(er);\n      } else {\n        var stream = new fsm.ReadStream(file, {\n          readSize: readSize,\n          size: stat.size\n        });\n        stream.on('error', reject);\n        stream.pipe(u);\n      }\n    });\n  });\n  return cb ? p.then(cb, cb) : p;\n};\nvar extractSync = function extractSync(opt) {\n  return new Unpack.Sync(opt);\n};\nvar extract = function extract(opt) {\n  return new Unpack(opt);\n};","map":null,"metadata":{},"sourceType":"script"}