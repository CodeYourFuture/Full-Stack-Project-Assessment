{"ast":null,"code":"/*!\n * parseurl\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar url = require('url');\n\nvar parse = url.parse;\nvar Url = url.Url;\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = parseurl;\nmodule.exports.original = originalurl;\n/**\n * Parse the `req` url with memoization.\n *\n * @param {ServerRequest} req\n * @return {Object}\n * @public\n */\n\nfunction parseurl(req) {\n  var url = req.url;\n\n  if (url === undefined) {\n    // URL is undefined\n    return undefined;\n  }\n\n  var parsed = req._parsedUrl;\n\n  if (fresh(url, parsed)) {\n    // Return cached URL parse\n    return parsed;\n  } // Parse the URL\n\n\n  parsed = fastparse(url);\n  parsed._raw = url;\n  return req._parsedUrl = parsed;\n}\n\n;\n/**\n * Parse the `req` original url with fallback and memoization.\n *\n * @param {ServerRequest} req\n * @return {Object}\n * @public\n */\n\nfunction originalurl(req) {\n  var url = req.originalUrl;\n\n  if (typeof url !== 'string') {\n    // Fallback\n    return parseurl(req);\n  }\n\n  var parsed = req._parsedOriginalUrl;\n\n  if (fresh(url, parsed)) {\n    // Return cached URL parse\n    return parsed;\n  } // Parse the URL\n\n\n  parsed = fastparse(url);\n  parsed._raw = url;\n  return req._parsedOriginalUrl = parsed;\n}\n\n;\n/**\n * Parse the `str` url with fast-path short-cut.\n *\n * @param {string} str\n * @return {Object}\n * @private\n */\n\nfunction fastparse(str) {\n  if (typeof str !== 'string' || str.charCodeAt(0) !== 0x2f\n  /* / */\n  ) {\n    return parse(str);\n  }\n\n  var pathname = str;\n  var query = null;\n  var search = null; // This takes the regexp from https://github.com/joyent/node/pull/7878\n  // Which is /^(\\/[^?#\\s]*)(\\?[^#\\s]*)?$/\n  // And unrolls it into a for loop\n\n  for (var i = 1; i < str.length; i++) {\n    switch (str.charCodeAt(i)) {\n      case 0x3f:\n        /* ?  */\n        if (search === null) {\n          pathname = str.substring(0, i);\n          query = str.substring(i + 1);\n          search = str.substring(i);\n        }\n\n        break;\n\n      case 0x09:\n      /* \\t */\n\n      case 0x0a:\n      /* \\n */\n\n      case 0x0c:\n      /* \\f */\n\n      case 0x0d:\n      /* \\r */\n\n      case 0x20:\n      /*    */\n\n      case 0x23:\n      /* #  */\n\n      case 0xa0:\n      case 0xfeff:\n        return parse(str);\n    }\n  }\n\n  var url = Url !== undefined ? new Url() : {};\n  url.path = str;\n  url.href = str;\n  url.pathname = pathname;\n\n  if (search !== null) {\n    url.query = query;\n    url.search = search;\n  }\n\n  return url;\n}\n/**\n * Determine if parsed is still fresh for url.\n *\n * @param {string} url\n * @param {object} parsedUrl\n * @return {boolean}\n * @private\n */\n\n\nfunction fresh(url, parsedUrl) {\n  return typeof parsedUrl === 'object' && parsedUrl !== null && (Url === undefined || parsedUrl instanceof Url) && parsedUrl._raw === url;\n}","map":{"version":3,"sources":["/Users/admin/Desktop/Newsletter-Signup/Full-Stack-Project-Assessment/client/node_modules/parseurl/index.js"],"names":["url","require","parse","Url","module","exports","parseurl","original","originalurl","req","undefined","parsed","_parsedUrl","fresh","fastparse","_raw","originalUrl","_parsedOriginalUrl","str","charCodeAt","pathname","query","search","i","length","substring","path","href","parsedUrl"],"mappings":"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","sourcesContent":["/*!\n * parseurl\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar url = require('url')\nvar parse = url.parse\nvar Url = url.Url\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = parseurl\nmodule.exports.original = originalurl\n\n/**\n * Parse the `req` url with memoization.\n *\n * @param {ServerRequest} req\n * @return {Object}\n * @public\n */\n\nfunction parseurl (req) {\n  var url = req.url\n\n  if (url === undefined) {\n    // URL is undefined\n    return undefined\n  }\n\n  var parsed = req._parsedUrl\n\n  if (fresh(url, parsed)) {\n    // Return cached URL parse\n    return parsed\n  }\n\n  // Parse the URL\n  parsed = fastparse(url)\n  parsed._raw = url\n\n  return (req._parsedUrl = parsed)\n};\n\n/**\n * Parse the `req` original url with fallback and memoization.\n *\n * @param {ServerRequest} req\n * @return {Object}\n * @public\n */\n\nfunction originalurl (req) {\n  var url = req.originalUrl\n\n  if (typeof url !== 'string') {\n    // Fallback\n    return parseurl(req)\n  }\n\n  var parsed = req._parsedOriginalUrl\n\n  if (fresh(url, parsed)) {\n    // Return cached URL parse\n    return parsed\n  }\n\n  // Parse the URL\n  parsed = fastparse(url)\n  parsed._raw = url\n\n  return (req._parsedOriginalUrl = parsed)\n};\n\n/**\n * Parse the `str` url with fast-path short-cut.\n *\n * @param {string} str\n * @return {Object}\n * @private\n */\n\nfunction fastparse (str) {\n  if (typeof str !== 'string' || str.charCodeAt(0) !== 0x2f /* / */) {\n    return parse(str)\n  }\n\n  var pathname = str\n  var query = null\n  var search = null\n\n  // This takes the regexp from https://github.com/joyent/node/pull/7878\n  // Which is /^(\\/[^?#\\s]*)(\\?[^#\\s]*)?$/\n  // And unrolls it into a for loop\n  for (var i = 1; i < str.length; i++) {\n    switch (str.charCodeAt(i)) {\n      case 0x3f: /* ?  */\n        if (search === null) {\n          pathname = str.substring(0, i)\n          query = str.substring(i + 1)\n          search = str.substring(i)\n        }\n        break\n      case 0x09: /* \\t */\n      case 0x0a: /* \\n */\n      case 0x0c: /* \\f */\n      case 0x0d: /* \\r */\n      case 0x20: /*    */\n      case 0x23: /* #  */\n      case 0xa0:\n      case 0xfeff:\n        return parse(str)\n    }\n  }\n\n  var url = Url !== undefined\n    ? new Url()\n    : {}\n\n  url.path = str\n  url.href = str\n  url.pathname = pathname\n\n  if (search !== null) {\n    url.query = query\n    url.search = search\n  }\n\n  return url\n}\n\n/**\n * Determine if parsed is still fresh for url.\n *\n * @param {string} url\n * @param {object} parsedUrl\n * @return {boolean}\n * @private\n */\n\nfunction fresh (url, parsedUrl) {\n  return typeof parsedUrl === 'object' &&\n    parsedUrl !== null &&\n    (Url === undefined || parsedUrl instanceof Url) &&\n    parsedUrl._raw === url\n}\n"]},"metadata":{},"sourceType":"script"}