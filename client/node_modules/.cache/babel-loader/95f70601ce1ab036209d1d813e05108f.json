{"ast":null,"code":"// based on the aes implimentation in triple sec\n// https://github.com/keybase/triplesec\n// which is in turn based on the one from crypto-js\n// https://code.google.com/p/crypto-js/\n\nvar Buffer = require('safe-buffer').Buffer;\nfunction asUInt32Array(buf) {\n  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);\n  var len = buf.length / 4 | 0;\n  var out = new Array(len);\n  for (var i = 0; i < len; i++) {\n    out[i] = buf.readUInt32BE(i * 4);\n  }\n  return out;\n}\nfunction scrubVec(v) {\n  for (var i = 0; i < v.length; v++) {\n    v[i] = 0;\n  }\n}\nfunction cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {\n  var SUB_MIX0 = SUB_MIX[0];\n  var SUB_MIX1 = SUB_MIX[1];\n  var SUB_MIX2 = SUB_MIX[2];\n  var SUB_MIX3 = SUB_MIX[3];\n  var s0 = M[0] ^ keySchedule[0];\n  var s1 = M[1] ^ keySchedule[1];\n  var s2 = M[2] ^ keySchedule[2];\n  var s3 = M[3] ^ keySchedule[3];\n  var t0, t1, t2, t3;\n  var ksRow = 4;\n  for (var round = 1; round < nRounds; round++) {\n    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 0xff] ^ SUB_MIX2[s2 >>> 8 & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];\n    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 0xff] ^ SUB_MIX2[s3 >>> 8 & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];\n    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 0xff] ^ SUB_MIX2[s0 >>> 8 & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];\n    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 0xff] ^ SUB_MIX2[s1 >>> 8 & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];\n    s0 = t0;\n    s1 = t1;\n    s2 = t2;\n    s3 = t3;\n  }\n  t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n  t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n  t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n  t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n  t0 = t0 >>> 0;\n  t1 = t1 >>> 0;\n  t2 = t2 >>> 0;\n  t3 = t3 >>> 0;\n  return [t0, t1, t2, t3];\n}\n\n// AES constants\nvar RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\nvar G = function () {\n  // Compute double table\n  var d = new Array(256);\n  for (var j = 0; j < 256; j++) {\n    if (j < 128) {\n      d[j] = j << 1;\n    } else {\n      d[j] = j << 1 ^ 0x11b;\n    }\n  }\n  var SBOX = [];\n  var INV_SBOX = [];\n  var SUB_MIX = [[], [], [], []];\n  var INV_SUB_MIX = [[], [], [], []];\n\n  // Walk GF(2^8)\n  var x = 0;\n  var xi = 0;\n  for (var i = 0; i < 256; ++i) {\n    // Compute sbox\n    var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;\n    sx = sx >>> 8 ^ sx & 0xff ^ 0x63;\n    SBOX[x] = sx;\n    INV_SBOX[sx] = x;\n\n    // Compute multiplication\n    var x2 = d[x];\n    var x4 = d[x2];\n    var x8 = d[x4];\n\n    // Compute sub bytes, mix columns tables\n    var t = d[sx] * 0x101 ^ sx * 0x1010100;\n    SUB_MIX[0][x] = t << 24 | t >>> 8;\n    SUB_MIX[1][x] = t << 16 | t >>> 16;\n    SUB_MIX[2][x] = t << 8 | t >>> 24;\n    SUB_MIX[3][x] = t;\n\n    // Compute inv sub bytes, inv mix columns tables\n    t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n    INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;\n    INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;\n    INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;\n    INV_SUB_MIX[3][sx] = t;\n    if (x === 0) {\n      x = xi = 1;\n    } else {\n      x = x2 ^ d[d[d[x8 ^ x2]]];\n      xi ^= d[d[xi]];\n    }\n  }\n  return {\n    SBOX: SBOX,\n    INV_SBOX: INV_SBOX,\n    SUB_MIX: SUB_MIX,\n    INV_SUB_MIX: INV_SUB_MIX\n  };\n}();\nfunction AES(key) {\n  this._key = asUInt32Array(key);\n  this._reset();\n}\nAES.blockSize = 4 * 4;\nAES.keySize = 256 / 8;\nAES.prototype.blockSize = AES.blockSize;\nAES.prototype.keySize = AES.keySize;\nAES.prototype._reset = function () {\n  var keyWords = this._key;\n  var keySize = keyWords.length;\n  var nRounds = keySize + 6;\n  var ksRows = (nRounds + 1) * 4;\n  var keySchedule = [];\n  for (var k = 0; k < keySize; k++) {\n    keySchedule[k] = keyWords[k];\n  }\n  for (k = keySize; k < ksRows; k++) {\n    var t = keySchedule[k - 1];\n    if (k % keySize === 0) {\n      t = t << 8 | t >>> 24;\n      t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];\n      t ^= RCON[k / keySize | 0] << 24;\n    } else if (keySize > 6 && k % keySize === 4) {\n      t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];\n    }\n    keySchedule[k] = keySchedule[k - keySize] ^ t;\n  }\n  var invKeySchedule = [];\n  for (var ik = 0; ik < ksRows; ik++) {\n    var ksR = ksRows - ik;\n    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];\n    if (ik < 4 || ksR <= 4) {\n      invKeySchedule[ik] = tt;\n    } else {\n      invKeySchedule[ik] = G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[tt >>> 16 & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[tt >>> 8 & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]];\n    }\n  }\n  this._nRounds = nRounds;\n  this._keySchedule = keySchedule;\n  this._invKeySchedule = invKeySchedule;\n};\nAES.prototype.encryptBlockRaw = function (M) {\n  M = asUInt32Array(M);\n  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);\n};\nAES.prototype.encryptBlock = function (M) {\n  var out = this.encryptBlockRaw(M);\n  var buf = Buffer.allocUnsafe(16);\n  buf.writeUInt32BE(out[0], 0);\n  buf.writeUInt32BE(out[1], 4);\n  buf.writeUInt32BE(out[2], 8);\n  buf.writeUInt32BE(out[3], 12);\n  return buf;\n};\nAES.prototype.decryptBlock = function (M) {\n  M = asUInt32Array(M);\n\n  // swap\n  var m1 = M[1];\n  M[1] = M[3];\n  M[3] = m1;\n  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);\n  var buf = Buffer.allocUnsafe(16);\n  buf.writeUInt32BE(out[0], 0);\n  buf.writeUInt32BE(out[3], 4);\n  buf.writeUInt32BE(out[2], 8);\n  buf.writeUInt32BE(out[1], 12);\n  return buf;\n};\nAES.prototype.scrub = function () {\n  scrubVec(this._keySchedule);\n  scrubVec(this._invKeySchedule);\n  scrubVec(this._key);\n};\nmodule.exports.AES = AES;","map":{"version":3,"names":["Buffer","require","asUInt32Array","buf","isBuffer","from","len","length","out","Array","i","readUInt32BE","scrubVec","v","cryptBlock","M","keySchedule","SUB_MIX","SBOX","nRounds","SUB_MIX0","SUB_MIX1","SUB_MIX2","SUB_MIX3","s0","s1","s2","s3","t0","t1","t2","t3","ksRow","round","RCON","G","d","j","INV_SBOX","INV_SUB_MIX","x","xi","sx","x2","x4","x8","t","AES","key","_key","_reset","blockSize","keySize","prototype","keyWords","ksRows","k","invKeySchedule","ik","ksR","tt","_nRounds","_keySchedule","_invKeySchedule","encryptBlockRaw","encryptBlock","allocUnsafe","writeUInt32BE","decryptBlock","m1","scrub","module","exports"],"sources":["/Users/admin/Desktop/Newsletter-Signup/Full-Stack-Project-Assessment/client/node_modules/browserify-aes/aes.js"],"sourcesContent":["// based on the aes implimentation in triple sec\n// https://github.com/keybase/triplesec\n// which is in turn based on the one from crypto-js\n// https://code.google.com/p/crypto-js/\n\nvar Buffer = require('safe-buffer').Buffer\n\nfunction asUInt32Array (buf) {\n  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n\n  var len = (buf.length / 4) | 0\n  var out = new Array(len)\n\n  for (var i = 0; i < len; i++) {\n    out[i] = buf.readUInt32BE(i * 4)\n  }\n\n  return out\n}\n\nfunction scrubVec (v) {\n  for (var i = 0; i < v.length; v++) {\n    v[i] = 0\n  }\n}\n\nfunction cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {\n  var SUB_MIX0 = SUB_MIX[0]\n  var SUB_MIX1 = SUB_MIX[1]\n  var SUB_MIX2 = SUB_MIX[2]\n  var SUB_MIX3 = SUB_MIX[3]\n\n  var s0 = M[0] ^ keySchedule[0]\n  var s1 = M[1] ^ keySchedule[1]\n  var s2 = M[2] ^ keySchedule[2]\n  var s3 = M[3] ^ keySchedule[3]\n  var t0, t1, t2, t3\n  var ksRow = 4\n\n  for (var round = 1; round < nRounds; round++) {\n    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]\n    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]\n    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]\n    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]\n    s0 = t0\n    s1 = t1\n    s2 = t2\n    s3 = t3\n  }\n\n  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]\n  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]\n  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]\n  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]\n  t0 = t0 >>> 0\n  t1 = t1 >>> 0\n  t2 = t2 >>> 0\n  t3 = t3 >>> 0\n\n  return [t0, t1, t2, t3]\n}\n\n// AES constants\nvar RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]\nvar G = (function () {\n  // Compute double table\n  var d = new Array(256)\n  for (var j = 0; j < 256; j++) {\n    if (j < 128) {\n      d[j] = j << 1\n    } else {\n      d[j] = (j << 1) ^ 0x11b\n    }\n  }\n\n  var SBOX = []\n  var INV_SBOX = []\n  var SUB_MIX = [[], [], [], []]\n  var INV_SUB_MIX = [[], [], [], []]\n\n  // Walk GF(2^8)\n  var x = 0\n  var xi = 0\n  for (var i = 0; i < 256; ++i) {\n    // Compute sbox\n    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)\n    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63\n    SBOX[x] = sx\n    INV_SBOX[sx] = x\n\n    // Compute multiplication\n    var x2 = d[x]\n    var x4 = d[x2]\n    var x8 = d[x4]\n\n    // Compute sub bytes, mix columns tables\n    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)\n    SUB_MIX[0][x] = (t << 24) | (t >>> 8)\n    SUB_MIX[1][x] = (t << 16) | (t >>> 16)\n    SUB_MIX[2][x] = (t << 8) | (t >>> 24)\n    SUB_MIX[3][x] = t\n\n    // Compute inv sub bytes, inv mix columns tables\n    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)\n    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)\n    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)\n    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)\n    INV_SUB_MIX[3][sx] = t\n\n    if (x === 0) {\n      x = xi = 1\n    } else {\n      x = x2 ^ d[d[d[x8 ^ x2]]]\n      xi ^= d[d[xi]]\n    }\n  }\n\n  return {\n    SBOX: SBOX,\n    INV_SBOX: INV_SBOX,\n    SUB_MIX: SUB_MIX,\n    INV_SUB_MIX: INV_SUB_MIX\n  }\n})()\n\nfunction AES (key) {\n  this._key = asUInt32Array(key)\n  this._reset()\n}\n\nAES.blockSize = 4 * 4\nAES.keySize = 256 / 8\nAES.prototype.blockSize = AES.blockSize\nAES.prototype.keySize = AES.keySize\nAES.prototype._reset = function () {\n  var keyWords = this._key\n  var keySize = keyWords.length\n  var nRounds = keySize + 6\n  var ksRows = (nRounds + 1) * 4\n\n  var keySchedule = []\n  for (var k = 0; k < keySize; k++) {\n    keySchedule[k] = keyWords[k]\n  }\n\n  for (k = keySize; k < ksRows; k++) {\n    var t = keySchedule[k - 1]\n\n    if (k % keySize === 0) {\n      t = (t << 8) | (t >>> 24)\n      t =\n        (G.SBOX[t >>> 24] << 24) |\n        (G.SBOX[(t >>> 16) & 0xff] << 16) |\n        (G.SBOX[(t >>> 8) & 0xff] << 8) |\n        (G.SBOX[t & 0xff])\n\n      t ^= RCON[(k / keySize) | 0] << 24\n    } else if (keySize > 6 && k % keySize === 4) {\n      t =\n        (G.SBOX[t >>> 24] << 24) |\n        (G.SBOX[(t >>> 16) & 0xff] << 16) |\n        (G.SBOX[(t >>> 8) & 0xff] << 8) |\n        (G.SBOX[t & 0xff])\n    }\n\n    keySchedule[k] = keySchedule[k - keySize] ^ t\n  }\n\n  var invKeySchedule = []\n  for (var ik = 0; ik < ksRows; ik++) {\n    var ksR = ksRows - ik\n    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]\n\n    if (ik < 4 || ksR <= 4) {\n      invKeySchedule[ik] = tt\n    } else {\n      invKeySchedule[ik] =\n        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^\n        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^\n        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^\n        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]\n    }\n  }\n\n  this._nRounds = nRounds\n  this._keySchedule = keySchedule\n  this._invKeySchedule = invKeySchedule\n}\n\nAES.prototype.encryptBlockRaw = function (M) {\n  M = asUInt32Array(M)\n  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)\n}\n\nAES.prototype.encryptBlock = function (M) {\n  var out = this.encryptBlockRaw(M)\n  var buf = Buffer.allocUnsafe(16)\n  buf.writeUInt32BE(out[0], 0)\n  buf.writeUInt32BE(out[1], 4)\n  buf.writeUInt32BE(out[2], 8)\n  buf.writeUInt32BE(out[3], 12)\n  return buf\n}\n\nAES.prototype.decryptBlock = function (M) {\n  M = asUInt32Array(M)\n\n  // swap\n  var m1 = M[1]\n  M[1] = M[3]\n  M[3] = m1\n\n  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)\n  var buf = Buffer.allocUnsafe(16)\n  buf.writeUInt32BE(out[0], 0)\n  buf.writeUInt32BE(out[3], 4)\n  buf.writeUInt32BE(out[2], 8)\n  buf.writeUInt32BE(out[1], 12)\n  return buf\n}\n\nAES.prototype.scrub = function () {\n  scrubVec(this._keySchedule)\n  scrubVec(this._invKeySchedule)\n  scrubVec(this._key)\n}\n\nmodule.exports.AES = AES\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}