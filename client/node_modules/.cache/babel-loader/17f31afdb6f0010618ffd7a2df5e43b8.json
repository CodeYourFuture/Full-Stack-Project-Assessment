{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { CompoundComponentContext } from './useCompound';\n/**\n * Registers a child component with the parent component.\n *\n * @param id A unique key for the child component. If the `id` is `undefined`, the registration logic will not run (this can sometimes be the case during SSR).\n * @param itemMetadata Arbitrary metadata to pass to the parent component. This should be a stable reference (e.g. a memoized object), to avoid unnecessary re-registrations.\n * @param missingKeyGenerator A function that generates a unique id for the item.\n *   It is called with the set of the ids of all the items that have already been registered.\n *   Return `existingKeys.size` if you want to use the index of the new item as the id.\n *\n * @ignore - internal hook.\n */\n\nexport function useCompoundItem(id, itemMetadata) {\n  const context = React.useContext(CompoundComponentContext);\n\n  if (context === null) {\n    throw new Error('useCompoundItem must be used within a useCompoundParent');\n  }\n\n  const {\n    registerItem\n  } = context;\n  const [registeredId, setRegisteredId] = React.useState(typeof id === 'function' ? undefined : id);\n  useEnhancedEffect(() => {\n    const {\n      id: returnedId,\n      deregister\n    } = registerItem(id, itemMetadata);\n    setRegisteredId(returnedId);\n    return deregister;\n  }, [registerItem, itemMetadata, id]);\n  return {\n    id: registeredId,\n    index: registeredId !== undefined ? context.getItemIndex(registeredId) : -1,\n    totalItemCount: context.totalSubitemCount\n  };\n}","map":{"version":3,"sources":["/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@mui/base/utils/useCompoundItem.js"],"names":["React","unstable_useEnhancedEffect","useEnhancedEffect","CompoundComponentContext","useCompoundItem","id","itemMetadata","context","useContext","Error","registerItem","registeredId","setRegisteredId","useState","undefined","returnedId","deregister","index","getItemIndex","totalItemCount","totalSubitemCount"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,0BAA0B,IAAIC,iBAAvC,QAAgE,YAAhE;AACA,SAASC,wBAAT,QAAyC,eAAzC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,eAAT,CAAyBC,EAAzB,EAA6BC,YAA7B,EAA2C;AAChD,QAAMC,OAAO,GAAGP,KAAK,CAACQ,UAAN,CAAiBL,wBAAjB,CAAhB;;AACA,MAAII,OAAO,KAAK,IAAhB,EAAsB;AACpB,UAAM,IAAIE,KAAJ,CAAU,yDAAV,CAAN;AACD;;AACD,QAAM;AACJC,IAAAA;AADI,MAEFH,OAFJ;AAGA,QAAM,CAACI,YAAD,EAAeC,eAAf,IAAkCZ,KAAK,CAACa,QAAN,CAAe,OAAOR,EAAP,KAAc,UAAd,GAA2BS,SAA3B,GAAuCT,EAAtD,CAAxC;AACAH,EAAAA,iBAAiB,CAAC,MAAM;AACtB,UAAM;AACJG,MAAAA,EAAE,EAAEU,UADA;AAEJC,MAAAA;AAFI,QAGFN,YAAY,CAACL,EAAD,EAAKC,YAAL,CAHhB;AAIAM,IAAAA,eAAe,CAACG,UAAD,CAAf;AACA,WAAOC,UAAP;AACD,GAPgB,EAOd,CAACN,YAAD,EAAeJ,YAAf,EAA6BD,EAA7B,CAPc,CAAjB;AAQA,SAAO;AACLA,IAAAA,EAAE,EAAEM,YADC;AAELM,IAAAA,KAAK,EAAEN,YAAY,KAAKG,SAAjB,GAA6BP,OAAO,CAACW,YAAR,CAAqBP,YAArB,CAA7B,GAAkE,CAAC,CAFrE;AAGLQ,IAAAA,cAAc,EAAEZ,OAAO,CAACa;AAHnB,GAAP;AAKD","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { CompoundComponentContext } from './useCompound';\n\n/**\n * Registers a child component with the parent component.\n *\n * @param id A unique key for the child component. If the `id` is `undefined`, the registration logic will not run (this can sometimes be the case during SSR).\n * @param itemMetadata Arbitrary metadata to pass to the parent component. This should be a stable reference (e.g. a memoized object), to avoid unnecessary re-registrations.\n * @param missingKeyGenerator A function that generates a unique id for the item.\n *   It is called with the set of the ids of all the items that have already been registered.\n *   Return `existingKeys.size` if you want to use the index of the new item as the id.\n *\n * @ignore - internal hook.\n */\n\nexport function useCompoundItem(id, itemMetadata) {\n  const context = React.useContext(CompoundComponentContext);\n  if (context === null) {\n    throw new Error('useCompoundItem must be used within a useCompoundParent');\n  }\n  const {\n    registerItem\n  } = context;\n  const [registeredId, setRegisteredId] = React.useState(typeof id === 'function' ? undefined : id);\n  useEnhancedEffect(() => {\n    const {\n      id: returnedId,\n      deregister\n    } = registerItem(id, itemMetadata);\n    setRegisteredId(returnedId);\n    return deregister;\n  }, [registerItem, itemMetadata, id]);\n  return {\n    id: registeredId,\n    index: registeredId !== undefined ? context.getItemIndex(registeredId) : -1,\n    totalItemCount: context.totalSubitemCount\n  };\n}"]},"metadata":{},"sourceType":"module"}