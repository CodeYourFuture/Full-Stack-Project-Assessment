{"ast":null,"code":"import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n\n  return coords;\n}\n/**\r\n * Computes the `x` and `y` coordinates that will place the floating element\r\n * next to a reference element when it is given a certain positioning strategy.\r\n *\r\n * This export does not have any `platform` interface logic. You will need to\r\n * write one for the platform you are using Floating UI with.\r\n */\n\n\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = { ...middlewareData,\n      [name]: { ...middlewareData[name],\n        ...data\n      }\n    };\n\n    if (reset && resetCount <= 50) {\n      resetCount++;\n\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n\n      i = -1;\n      continue;\n    }\n  }\n\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n/**\r\n * Resolves with an object of overflow side offsets that determine how much the\r\n * element is overflowing a given clipping boundary on each side.\r\n * - positive = overflowing the boundary by that number of pixels\r\n * - negative = how many pixels left before it will overflow\r\n * - 0 = lies flush with the boundary\r\n * @see https://floating-ui.com/docs/detectOverflow\r\n */\n\n\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? { ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n/**\r\n * Provides data to position an inner element of the floating element so that it\r\n * appears centered to the reference element.\r\n * @see https://floating-ui.com/docs/arrow\r\n */\n\n\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements\n    } = state; // Since `element` is required, we don't Partial<> the type.\n\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n\n    if (element == null) {\n      return {};\n    }\n\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0; // DOM platform can return `window` as the `offsetParent`.\n\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n\n    const centerToReference = endDiff / 2 - startDiff / 2; // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding); // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max); // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. This stops `shift()` from taking action, but can\n    // be worked around by calling it again after the `arrow()` if desired.\n\n    const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? min$1 - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset + alignmentOffset\n      }\n    };\n  }\n\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n\n    return true;\n  });\n}\n/**\r\n * Optimizes the visibility of the floating element by choosing the placement\r\n * that has the most space available automatically, without needing to specify a\r\n * preferred placement. Alternative to `flip`.\r\n * @see https://floating-ui.com/docs/autoPlacement\r\n */\n\n\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'autoPlacement',\n    options,\n\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n\n      if (currentPlacement == null) {\n        return {};\n      }\n\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))); // Make `computeCoords` start from the right place.\n\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1]; // There are more placements to check.\n\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ? // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) : // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0, // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n/**\r\n * Optimizes the visibility of the floating element by flipping the `placement`\r\n * in order to keep it in view when the preferred placement(s) will overflow the\r\n * clipping boundary. Alternative to `autoPlacement`.\r\n * @see https://floating-ui.com/docs/flip\r\n */\n\n\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'flip',\n    options,\n\n    async fn(state) {\n      var _middlewareData$flip;\n\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }]; // One or more sides is overflowing.\n\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        } // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n\n\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement; // Otherwise fallback.\n\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n\n                if (placement) {\n                  resetPlacement = placement;\n                }\n\n                break;\n              }\n\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n\n      return {};\n    }\n\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\r\n * Provides data to hide the floating element in applicable situations, such as\r\n * when it is not in the same clipping context as the reference element.\r\n * @see https://floating-ui.com/docs/hide\r\n */\n\n\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'hide',\n    options,\n\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, { ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, { ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n\n        default:\n          {\n            return {};\n          }\n      }\n    }\n\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\n\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n\n    prevRect = rect;\n  }\n\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\r\n * Provides improved positioning for inline reference elements that can span\r\n * over multiple lines, such as hyperlinks or range selections.\r\n * @see https://floating-ui.com/docs/inline\r\n */\n\n\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'inline',\n    options,\n\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state; // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        } // There are 2 or more connected rects.\n\n\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n\n        return fallback;\n      }\n\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n}; // For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state); // eslint-disable-next-line prefer-const\n\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n/**\r\n * Modifies the placement by translating the floating element along the\r\n * specified axes.\r\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\r\n * object may be passed.\r\n * @see https://floating-ui.com/docs/offset\r\n */\n\n\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n\n  return {\n    name: 'offset',\n    options,\n\n    async fn(state) {\n      const {\n        x,\n        y\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n\n  };\n};\n/**\r\n * Optimizes the visibility of the floating element by shifting it in order to\r\n * keep it in view when it will overflow the clipping boundary.\r\n * @see https://floating-ui.com/docs/shift\r\n */\n\n\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'shift',\n    options,\n\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n\n      const limitedCoords = limiter.fn({ ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return { ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n\n  };\n};\n/**\r\n * Built-in `limiter` that will stop `shift()` at a certain point.\r\n */\n\n\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    options,\n\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n\n  };\n};\n/**\r\n * Provides data that allows you to change the size of the floating element —\r\n * for instance, prevent it from overflowing the clipping boundary or match the\r\n * width of the reference element.\r\n * @see https://floating-ui.com/docs/size\r\n */\n\n\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'size',\n    options,\n\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n\n      if (isYAxis) {\n        const maximumClippingWidth = width - overflow.left - overflow.right;\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n\n      await apply({ ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/@floating-ui/core/dist/floating-ui.core.mjs"],"names":["getSideAxis","getAlignmentAxis","getAxisLength","getSide","getAlignment","evaluate","getPaddingObject","rectToClientRect","min","clamp","placements","getAlignmentSides","getOppositeAlignmentPlacement","getOppositePlacement","getExpandedPlacements","getOppositeAxisPlacements","sides","max","getOppositeAxis","computeCoordsFromPlacement","_ref","placement","rtl","reference","floating","sideAxis","alignmentAxis","alignLength","side","isVertical","commonX","x","width","commonY","y","height","commonAlign","coords","computePosition","config","strategy","middleware","platform","validMiddleware","filter","Boolean","isRTL","rects","getElementRects","statefulPlacement","middlewareData","resetCount","i","length","name","fn","nextX","nextY","data","reset","initialPlacement","elements","detectOverflow","state","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","padding","paddingObject","altContext","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","rect","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","top","bottom","left","right","arrow","axis","arrowDimensions","getDimensions","isYAxis","minProp","maxProp","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","centerToReference","largestPossiblePadding","minPadding","maxPadding","min$1","center","offset","shouldAddOffset","alignmentOffset","centerOffset","getPlacementList","alignment","autoAlignment","allowedPlacements","allowedPlacementsSortedByAlignment","autoPlacement","_middlewareData$autoP","_middlewareData$autoP2","_placementsThatFitOnE","crossAxis","detectOverflowOptions","placements$1","undefined","overflow","currentIndex","index","currentPlacement","alignmentSides","currentOverflows","allOverflows","overflows","nextPlacement","placementsSortedByMostSpace","map","d","slice","reduce","acc","v","sort","a","b","placementsThatFitOnEachSide","every","resetPlacement","flip","_middlewareData$flip","mainAxis","checkMainAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","flipAlignment","isBasePlacement","push","overflowsData","_middlewareData$flip2","_overflowsData$filter","nextIndex","_overflowsData$map$so","getSideOffsets","isAnySideFullyClipped","some","hide","offsets","referenceHiddenOffsets","referenceHidden","escapedOffsets","escaped","getBoundingRect","minX","minY","maxX","maxY","getRectsByLine","sortedRects","groups","prevRect","inline","nativeClientRects","Array","from","getClientRects","clientRects","fallback","getBoundingClientRect","find","firstRect","lastRect","isTop","isLeftSide","maxRight","minLeft","measureRects","resetRects","convertValueToCoords","mainAxisMulti","includes","crossAxisMulti","rawValue","diffCoords","shift","limiter","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","limitShift","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse","_middlewareData$offse2","isOriginSide","size","apply","heightSide","widthSide","overflowAvailableHeight","overflowAvailableWidth","noShift","availableHeight","availableWidth","maximumClippingWidth","maximumClippingHeight","xMin","xMax","yMin","yMax","nextDimensions"],"mappings":"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","sourcesContent":["import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\r\nexport { rectToClientRect } from '@floating-ui/utils';\r\n\r\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\r\n  let {\r\n    reference,\r\n    floating\r\n  } = _ref;\r\n  const sideAxis = getSideAxis(placement);\r\n  const alignmentAxis = getAlignmentAxis(placement);\r\n  const alignLength = getAxisLength(alignmentAxis);\r\n  const side = getSide(placement);\r\n  const isVertical = sideAxis === 'y';\r\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\r\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\r\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\r\n  let coords;\r\n  switch (side) {\r\n    case 'top':\r\n      coords = {\r\n        x: commonX,\r\n        y: reference.y - floating.height\r\n      };\r\n      break;\r\n    case 'bottom':\r\n      coords = {\r\n        x: commonX,\r\n        y: reference.y + reference.height\r\n      };\r\n      break;\r\n    case 'right':\r\n      coords = {\r\n        x: reference.x + reference.width,\r\n        y: commonY\r\n      };\r\n      break;\r\n    case 'left':\r\n      coords = {\r\n        x: reference.x - floating.width,\r\n        y: commonY\r\n      };\r\n      break;\r\n    default:\r\n      coords = {\r\n        x: reference.x,\r\n        y: reference.y\r\n      };\r\n  }\r\n  switch (getAlignment(placement)) {\r\n    case 'start':\r\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\r\n      break;\r\n    case 'end':\r\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\r\n      break;\r\n  }\r\n  return coords;\r\n}\r\n\r\n/**\r\n * Computes the `x` and `y` coordinates that will place the floating element\r\n * next to a reference element when it is given a certain positioning strategy.\r\n *\r\n * This export does not have any `platform` interface logic. You will need to\r\n * write one for the platform you are using Floating UI with.\r\n */\r\nconst computePosition = async (reference, floating, config) => {\r\n  const {\r\n    placement = 'bottom',\r\n    strategy = 'absolute',\r\n    middleware = [],\r\n    platform\r\n  } = config;\r\n  const validMiddleware = middleware.filter(Boolean);\r\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\r\n  let rects = await platform.getElementRects({\r\n    reference,\r\n    floating,\r\n    strategy\r\n  });\r\n  let {\r\n    x,\r\n    y\r\n  } = computeCoordsFromPlacement(rects, placement, rtl);\r\n  let statefulPlacement = placement;\r\n  let middlewareData = {};\r\n  let resetCount = 0;\r\n  for (let i = 0; i < validMiddleware.length; i++) {\r\n    const {\r\n      name,\r\n      fn\r\n    } = validMiddleware[i];\r\n    const {\r\n      x: nextX,\r\n      y: nextY,\r\n      data,\r\n      reset\r\n    } = await fn({\r\n      x,\r\n      y,\r\n      initialPlacement: placement,\r\n      placement: statefulPlacement,\r\n      strategy,\r\n      middlewareData,\r\n      rects,\r\n      platform,\r\n      elements: {\r\n        reference,\r\n        floating\r\n      }\r\n    });\r\n    x = nextX != null ? nextX : x;\r\n    y = nextY != null ? nextY : y;\r\n    middlewareData = {\r\n      ...middlewareData,\r\n      [name]: {\r\n        ...middlewareData[name],\r\n        ...data\r\n      }\r\n    };\r\n    if (reset && resetCount <= 50) {\r\n      resetCount++;\r\n      if (typeof reset === 'object') {\r\n        if (reset.placement) {\r\n          statefulPlacement = reset.placement;\r\n        }\r\n        if (reset.rects) {\r\n          rects = reset.rects === true ? await platform.getElementRects({\r\n            reference,\r\n            floating,\r\n            strategy\r\n          }) : reset.rects;\r\n        }\r\n        ({\r\n          x,\r\n          y\r\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\r\n      }\r\n      i = -1;\r\n      continue;\r\n    }\r\n  }\r\n  return {\r\n    x,\r\n    y,\r\n    placement: statefulPlacement,\r\n    strategy,\r\n    middlewareData\r\n  };\r\n};\r\n\r\n/**\r\n * Resolves with an object of overflow side offsets that determine how much the\r\n * element is overflowing a given clipping boundary on each side.\r\n * - positive = overflowing the boundary by that number of pixels\r\n * - negative = how many pixels left before it will overflow\r\n * - 0 = lies flush with the boundary\r\n * @see https://floating-ui.com/docs/detectOverflow\r\n */\r\nasync function detectOverflow(state, options) {\r\n  var _await$platform$isEle;\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  const {\r\n    x,\r\n    y,\r\n    platform,\r\n    rects,\r\n    elements,\r\n    strategy\r\n  } = state;\r\n  const {\r\n    boundary = 'clippingAncestors',\r\n    rootBoundary = 'viewport',\r\n    elementContext = 'floating',\r\n    altBoundary = false,\r\n    padding = 0\r\n  } = evaluate(options, state);\r\n  const paddingObject = getPaddingObject(padding);\r\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\r\n  const element = elements[altBoundary ? altContext : elementContext];\r\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\r\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\r\n    boundary,\r\n    rootBoundary,\r\n    strategy\r\n  }));\r\n  const rect = elementContext === 'floating' ? {\r\n    ...rects.floating,\r\n    x,\r\n    y\r\n  } : rects.reference;\r\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\r\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\r\n    x: 1,\r\n    y: 1\r\n  } : {\r\n    x: 1,\r\n    y: 1\r\n  };\r\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\r\n    rect,\r\n    offsetParent,\r\n    strategy\r\n  }) : rect);\r\n  return {\r\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\r\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\r\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\r\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\r\n  };\r\n}\r\n\r\n/**\r\n * Provides data to position an inner element of the floating element so that it\r\n * appears centered to the reference element.\r\n * @see https://floating-ui.com/docs/arrow\r\n */\r\nconst arrow = options => ({\r\n  name: 'arrow',\r\n  options,\r\n  async fn(state) {\r\n    const {\r\n      x,\r\n      y,\r\n      placement,\r\n      rects,\r\n      platform,\r\n      elements\r\n    } = state;\r\n    // Since `element` is required, we don't Partial<> the type.\r\n    const {\r\n      element,\r\n      padding = 0\r\n    } = evaluate(options, state) || {};\r\n    if (element == null) {\r\n      return {};\r\n    }\r\n    const paddingObject = getPaddingObject(padding);\r\n    const coords = {\r\n      x,\r\n      y\r\n    };\r\n    const axis = getAlignmentAxis(placement);\r\n    const length = getAxisLength(axis);\r\n    const arrowDimensions = await platform.getDimensions(element);\r\n    const isYAxis = axis === 'y';\r\n    const minProp = isYAxis ? 'top' : 'left';\r\n    const maxProp = isYAxis ? 'bottom' : 'right';\r\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\r\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\r\n    const startDiff = coords[axis] - rects.reference[axis];\r\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\r\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\r\n\r\n    // DOM platform can return `window` as the `offsetParent`.\r\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\r\n      clientSize = elements.floating[clientProp] || rects.floating[length];\r\n    }\r\n    const centerToReference = endDiff / 2 - startDiff / 2;\r\n\r\n    // If the padding is large enough that it causes the arrow to no longer be\r\n    // centered, modify the padding so that it is centered.\r\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\r\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\r\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\r\n\r\n    // Make sure the arrow doesn't overflow the floating element if the center\r\n    // point is outside the floating element's bounds.\r\n    const min$1 = minPadding;\r\n    const max = clientSize - arrowDimensions[length] - maxPadding;\r\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\r\n    const offset = clamp(min$1, center, max);\r\n\r\n    // If the reference is small enough that the arrow's padding causes it to\r\n    // to point to nothing for an aligned placement, adjust the offset of the\r\n    // floating element itself. This stops `shift()` from taking action, but can\r\n    // be worked around by calling it again after the `arrow()` if desired.\r\n    const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\r\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? min$1 - center : max - center : 0;\r\n    return {\r\n      [axis]: coords[axis] - alignmentOffset,\r\n      data: {\r\n        [axis]: offset,\r\n        centerOffset: center - offset + alignmentOffset\r\n      }\r\n    };\r\n  }\r\n});\r\n\r\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\r\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\r\n  return allowedPlacementsSortedByAlignment.filter(placement => {\r\n    if (alignment) {\r\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\r\n    }\r\n    return true;\r\n  });\r\n}\r\n/**\r\n * Optimizes the visibility of the floating element by choosing the placement\r\n * that has the most space available automatically, without needing to specify a\r\n * preferred placement. Alternative to `flip`.\r\n * @see https://floating-ui.com/docs/autoPlacement\r\n */\r\nconst autoPlacement = function (options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  return {\r\n    name: 'autoPlacement',\r\n    options,\r\n    async fn(state) {\r\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\r\n      const {\r\n        rects,\r\n        middlewareData,\r\n        placement,\r\n        platform,\r\n        elements\r\n      } = state;\r\n      const {\r\n        crossAxis = false,\r\n        alignment,\r\n        allowedPlacements = placements,\r\n        autoAlignment = true,\r\n        ...detectOverflowOptions\r\n      } = evaluate(options, state);\r\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\r\n      const overflow = await detectOverflow(state, detectOverflowOptions);\r\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\r\n      const currentPlacement = placements$1[currentIndex];\r\n      if (currentPlacement == null) {\r\n        return {};\r\n      }\r\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\r\n\r\n      // Make `computeCoords` start from the right place.\r\n      if (placement !== currentPlacement) {\r\n        return {\r\n          reset: {\r\n            placement: placements$1[0]\r\n          }\r\n        };\r\n      }\r\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\r\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\r\n        placement: currentPlacement,\r\n        overflows: currentOverflows\r\n      }];\r\n      const nextPlacement = placements$1[currentIndex + 1];\r\n\r\n      // There are more placements to check.\r\n      if (nextPlacement) {\r\n        return {\r\n          data: {\r\n            index: currentIndex + 1,\r\n            overflows: allOverflows\r\n          },\r\n          reset: {\r\n            placement: nextPlacement\r\n          }\r\n        };\r\n      }\r\n      const placementsSortedByMostSpace = allOverflows.map(d => {\r\n        const alignment = getAlignment(d.placement);\r\n        return [d.placement, alignment && crossAxis ?\r\n        // Check along the mainAxis and main crossAxis side.\r\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\r\n        // Check only the mainAxis.\r\n        d.overflows[0], d.overflows];\r\n      }).sort((a, b) => a[1] - b[1]);\r\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\r\n      // Aligned placements should not check their opposite crossAxis\r\n      // side.\r\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\r\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\r\n      if (resetPlacement !== placement) {\r\n        return {\r\n          data: {\r\n            index: currentIndex + 1,\r\n            overflows: allOverflows\r\n          },\r\n          reset: {\r\n            placement: resetPlacement\r\n          }\r\n        };\r\n      }\r\n      return {};\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Optimizes the visibility of the floating element by flipping the `placement`\r\n * in order to keep it in view when the preferred placement(s) will overflow the\r\n * clipping boundary. Alternative to `autoPlacement`.\r\n * @see https://floating-ui.com/docs/flip\r\n */\r\nconst flip = function (options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  return {\r\n    name: 'flip',\r\n    options,\r\n    async fn(state) {\r\n      var _middlewareData$flip;\r\n      const {\r\n        placement,\r\n        middlewareData,\r\n        rects,\r\n        initialPlacement,\r\n        platform,\r\n        elements\r\n      } = state;\r\n      const {\r\n        mainAxis: checkMainAxis = true,\r\n        crossAxis: checkCrossAxis = true,\r\n        fallbackPlacements: specifiedFallbackPlacements,\r\n        fallbackStrategy = 'bestFit',\r\n        fallbackAxisSideDirection = 'none',\r\n        flipAlignment = true,\r\n        ...detectOverflowOptions\r\n      } = evaluate(options, state);\r\n      const side = getSide(placement);\r\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\r\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\r\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\r\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\r\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\r\n      }\r\n      const placements = [initialPlacement, ...fallbackPlacements];\r\n      const overflow = await detectOverflow(state, detectOverflowOptions);\r\n      const overflows = [];\r\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\r\n      if (checkMainAxis) {\r\n        overflows.push(overflow[side]);\r\n      }\r\n      if (checkCrossAxis) {\r\n        const sides = getAlignmentSides(placement, rects, rtl);\r\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\r\n      }\r\n      overflowsData = [...overflowsData, {\r\n        placement,\r\n        overflows\r\n      }];\r\n\r\n      // One or more sides is overflowing.\r\n      if (!overflows.every(side => side <= 0)) {\r\n        var _middlewareData$flip2, _overflowsData$filter;\r\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\r\n        const nextPlacement = placements[nextIndex];\r\n        if (nextPlacement) {\r\n          // Try next placement and re-run the lifecycle.\r\n          return {\r\n            data: {\r\n              index: nextIndex,\r\n              overflows: overflowsData\r\n            },\r\n            reset: {\r\n              placement: nextPlacement\r\n            }\r\n          };\r\n        }\r\n\r\n        // First, find the candidates that fit on the mainAxis side of overflow,\r\n        // then find the placement that fits the best on the main crossAxis side.\r\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\r\n\r\n        // Otherwise fallback.\r\n        if (!resetPlacement) {\r\n          switch (fallbackStrategy) {\r\n            case 'bestFit':\r\n              {\r\n                var _overflowsData$map$so;\r\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\r\n                if (placement) {\r\n                  resetPlacement = placement;\r\n                }\r\n                break;\r\n              }\r\n            case 'initialPlacement':\r\n              resetPlacement = initialPlacement;\r\n              break;\r\n          }\r\n        }\r\n        if (placement !== resetPlacement) {\r\n          return {\r\n            reset: {\r\n              placement: resetPlacement\r\n            }\r\n          };\r\n        }\r\n      }\r\n      return {};\r\n    }\r\n  };\r\n};\r\n\r\nfunction getSideOffsets(overflow, rect) {\r\n  return {\r\n    top: overflow.top - rect.height,\r\n    right: overflow.right - rect.width,\r\n    bottom: overflow.bottom - rect.height,\r\n    left: overflow.left - rect.width\r\n  };\r\n}\r\nfunction isAnySideFullyClipped(overflow) {\r\n  return sides.some(side => overflow[side] >= 0);\r\n}\r\n/**\r\n * Provides data to hide the floating element in applicable situations, such as\r\n * when it is not in the same clipping context as the reference element.\r\n * @see https://floating-ui.com/docs/hide\r\n */\r\nconst hide = function (options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  return {\r\n    name: 'hide',\r\n    options,\r\n    async fn(state) {\r\n      const {\r\n        rects\r\n      } = state;\r\n      const {\r\n        strategy = 'referenceHidden',\r\n        ...detectOverflowOptions\r\n      } = evaluate(options, state);\r\n      switch (strategy) {\r\n        case 'referenceHidden':\r\n          {\r\n            const overflow = await detectOverflow(state, {\r\n              ...detectOverflowOptions,\r\n              elementContext: 'reference'\r\n            });\r\n            const offsets = getSideOffsets(overflow, rects.reference);\r\n            return {\r\n              data: {\r\n                referenceHiddenOffsets: offsets,\r\n                referenceHidden: isAnySideFullyClipped(offsets)\r\n              }\r\n            };\r\n          }\r\n        case 'escaped':\r\n          {\r\n            const overflow = await detectOverflow(state, {\r\n              ...detectOverflowOptions,\r\n              altBoundary: true\r\n            });\r\n            const offsets = getSideOffsets(overflow, rects.floating);\r\n            return {\r\n              data: {\r\n                escapedOffsets: offsets,\r\n                escaped: isAnySideFullyClipped(offsets)\r\n              }\r\n            };\r\n          }\r\n        default:\r\n          {\r\n            return {};\r\n          }\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nfunction getBoundingRect(rects) {\r\n  const minX = min(...rects.map(rect => rect.left));\r\n  const minY = min(...rects.map(rect => rect.top));\r\n  const maxX = max(...rects.map(rect => rect.right));\r\n  const maxY = max(...rects.map(rect => rect.bottom));\r\n  return {\r\n    x: minX,\r\n    y: minY,\r\n    width: maxX - minX,\r\n    height: maxY - minY\r\n  };\r\n}\r\nfunction getRectsByLine(rects) {\r\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\r\n  const groups = [];\r\n  let prevRect = null;\r\n  for (let i = 0; i < sortedRects.length; i++) {\r\n    const rect = sortedRects[i];\r\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\r\n      groups.push([rect]);\r\n    } else {\r\n      groups[groups.length - 1].push(rect);\r\n    }\r\n    prevRect = rect;\r\n  }\r\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\r\n}\r\n/**\r\n * Provides improved positioning for inline reference elements that can span\r\n * over multiple lines, such as hyperlinks or range selections.\r\n * @see https://floating-ui.com/docs/inline\r\n */\r\nconst inline = function (options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  return {\r\n    name: 'inline',\r\n    options,\r\n    async fn(state) {\r\n      const {\r\n        placement,\r\n        elements,\r\n        rects,\r\n        platform,\r\n        strategy\r\n      } = state;\r\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\r\n      // ClientRect's bounds, despite the event listener being triggered. A\r\n      // padding of 2 seems to handle this issue.\r\n      const {\r\n        padding = 2,\r\n        x,\r\n        y\r\n      } = evaluate(options, state);\r\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\r\n      const clientRects = getRectsByLine(nativeClientRects);\r\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\r\n      const paddingObject = getPaddingObject(padding);\r\n      function getBoundingClientRect() {\r\n        // There are two rects and they are disjoined.\r\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\r\n          // Find the first rect in which the point is fully inside.\r\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\r\n        }\r\n\r\n        // There are 2 or more connected rects.\r\n        if (clientRects.length >= 2) {\r\n          if (getSideAxis(placement) === 'y') {\r\n            const firstRect = clientRects[0];\r\n            const lastRect = clientRects[clientRects.length - 1];\r\n            const isTop = getSide(placement) === 'top';\r\n            const top = firstRect.top;\r\n            const bottom = lastRect.bottom;\r\n            const left = isTop ? firstRect.left : lastRect.left;\r\n            const right = isTop ? firstRect.right : lastRect.right;\r\n            const width = right - left;\r\n            const height = bottom - top;\r\n            return {\r\n              top,\r\n              bottom,\r\n              left,\r\n              right,\r\n              width,\r\n              height,\r\n              x: left,\r\n              y: top\r\n            };\r\n          }\r\n          const isLeftSide = getSide(placement) === 'left';\r\n          const maxRight = max(...clientRects.map(rect => rect.right));\r\n          const minLeft = min(...clientRects.map(rect => rect.left));\r\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\r\n          const top = measureRects[0].top;\r\n          const bottom = measureRects[measureRects.length - 1].bottom;\r\n          const left = minLeft;\r\n          const right = maxRight;\r\n          const width = right - left;\r\n          const height = bottom - top;\r\n          return {\r\n            top,\r\n            bottom,\r\n            left,\r\n            right,\r\n            width,\r\n            height,\r\n            x: left,\r\n            y: top\r\n          };\r\n        }\r\n        return fallback;\r\n      }\r\n      const resetRects = await platform.getElementRects({\r\n        reference: {\r\n          getBoundingClientRect\r\n        },\r\n        floating: elements.floating,\r\n        strategy\r\n      });\r\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\r\n        return {\r\n          reset: {\r\n            rects: resetRects\r\n          }\r\n        };\r\n      }\r\n      return {};\r\n    }\r\n  };\r\n};\r\n\r\n// For type backwards-compatibility, the `OffsetOptions` type was also\r\n// Derivable.\r\nasync function convertValueToCoords(state, options) {\r\n  const {\r\n    placement,\r\n    platform,\r\n    elements\r\n  } = state;\r\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\r\n  const side = getSide(placement);\r\n  const alignment = getAlignment(placement);\r\n  const isVertical = getSideAxis(placement) === 'y';\r\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\r\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\r\n  const rawValue = evaluate(options, state);\r\n\r\n  // eslint-disable-next-line prefer-const\r\n  let {\r\n    mainAxis,\r\n    crossAxis,\r\n    alignmentAxis\r\n  } = typeof rawValue === 'number' ? {\r\n    mainAxis: rawValue,\r\n    crossAxis: 0,\r\n    alignmentAxis: null\r\n  } : {\r\n    mainAxis: 0,\r\n    crossAxis: 0,\r\n    alignmentAxis: null,\r\n    ...rawValue\r\n  };\r\n  if (alignment && typeof alignmentAxis === 'number') {\r\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\r\n  }\r\n  return isVertical ? {\r\n    x: crossAxis * crossAxisMulti,\r\n    y: mainAxis * mainAxisMulti\r\n  } : {\r\n    x: mainAxis * mainAxisMulti,\r\n    y: crossAxis * crossAxisMulti\r\n  };\r\n}\r\n\r\n/**\r\n * Modifies the placement by translating the floating element along the\r\n * specified axes.\r\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\r\n * object may be passed.\r\n * @see https://floating-ui.com/docs/offset\r\n */\r\nconst offset = function (options) {\r\n  if (options === void 0) {\r\n    options = 0;\r\n  }\r\n  return {\r\n    name: 'offset',\r\n    options,\r\n    async fn(state) {\r\n      const {\r\n        x,\r\n        y\r\n      } = state;\r\n      const diffCoords = await convertValueToCoords(state, options);\r\n      return {\r\n        x: x + diffCoords.x,\r\n        y: y + diffCoords.y,\r\n        data: diffCoords\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Optimizes the visibility of the floating element by shifting it in order to\r\n * keep it in view when it will overflow the clipping boundary.\r\n * @see https://floating-ui.com/docs/shift\r\n */\r\nconst shift = function (options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  return {\r\n    name: 'shift',\r\n    options,\r\n    async fn(state) {\r\n      const {\r\n        x,\r\n        y,\r\n        placement\r\n      } = state;\r\n      const {\r\n        mainAxis: checkMainAxis = true,\r\n        crossAxis: checkCrossAxis = false,\r\n        limiter = {\r\n          fn: _ref => {\r\n            let {\r\n              x,\r\n              y\r\n            } = _ref;\r\n            return {\r\n              x,\r\n              y\r\n            };\r\n          }\r\n        },\r\n        ...detectOverflowOptions\r\n      } = evaluate(options, state);\r\n      const coords = {\r\n        x,\r\n        y\r\n      };\r\n      const overflow = await detectOverflow(state, detectOverflowOptions);\r\n      const crossAxis = getSideAxis(getSide(placement));\r\n      const mainAxis = getOppositeAxis(crossAxis);\r\n      let mainAxisCoord = coords[mainAxis];\r\n      let crossAxisCoord = coords[crossAxis];\r\n      if (checkMainAxis) {\r\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\r\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\r\n        const min = mainAxisCoord + overflow[minSide];\r\n        const max = mainAxisCoord - overflow[maxSide];\r\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\r\n      }\r\n      if (checkCrossAxis) {\r\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\r\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\r\n        const min = crossAxisCoord + overflow[minSide];\r\n        const max = crossAxisCoord - overflow[maxSide];\r\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\r\n      }\r\n      const limitedCoords = limiter.fn({\r\n        ...state,\r\n        [mainAxis]: mainAxisCoord,\r\n        [crossAxis]: crossAxisCoord\r\n      });\r\n      return {\r\n        ...limitedCoords,\r\n        data: {\r\n          x: limitedCoords.x - x,\r\n          y: limitedCoords.y - y\r\n        }\r\n      };\r\n    }\r\n  };\r\n};\r\n/**\r\n * Built-in `limiter` that will stop `shift()` at a certain point.\r\n */\r\nconst limitShift = function (options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  return {\r\n    options,\r\n    fn(state) {\r\n      const {\r\n        x,\r\n        y,\r\n        placement,\r\n        rects,\r\n        middlewareData\r\n      } = state;\r\n      const {\r\n        offset = 0,\r\n        mainAxis: checkMainAxis = true,\r\n        crossAxis: checkCrossAxis = true\r\n      } = evaluate(options, state);\r\n      const coords = {\r\n        x,\r\n        y\r\n      };\r\n      const crossAxis = getSideAxis(placement);\r\n      const mainAxis = getOppositeAxis(crossAxis);\r\n      let mainAxisCoord = coords[mainAxis];\r\n      let crossAxisCoord = coords[crossAxis];\r\n      const rawOffset = evaluate(offset, state);\r\n      const computedOffset = typeof rawOffset === 'number' ? {\r\n        mainAxis: rawOffset,\r\n        crossAxis: 0\r\n      } : {\r\n        mainAxis: 0,\r\n        crossAxis: 0,\r\n        ...rawOffset\r\n      };\r\n      if (checkMainAxis) {\r\n        const len = mainAxis === 'y' ? 'height' : 'width';\r\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\r\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\r\n        if (mainAxisCoord < limitMin) {\r\n          mainAxisCoord = limitMin;\r\n        } else if (mainAxisCoord > limitMax) {\r\n          mainAxisCoord = limitMax;\r\n        }\r\n      }\r\n      if (checkCrossAxis) {\r\n        var _middlewareData$offse, _middlewareData$offse2;\r\n        const len = mainAxis === 'y' ? 'width' : 'height';\r\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\r\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\r\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\r\n        if (crossAxisCoord < limitMin) {\r\n          crossAxisCoord = limitMin;\r\n        } else if (crossAxisCoord > limitMax) {\r\n          crossAxisCoord = limitMax;\r\n        }\r\n      }\r\n      return {\r\n        [mainAxis]: mainAxisCoord,\r\n        [crossAxis]: crossAxisCoord\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Provides data that allows you to change the size of the floating element —\r\n * for instance, prevent it from overflowing the clipping boundary or match the\r\n * width of the reference element.\r\n * @see https://floating-ui.com/docs/size\r\n */\r\nconst size = function (options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  return {\r\n    name: 'size',\r\n    options,\r\n    async fn(state) {\r\n      const {\r\n        placement,\r\n        rects,\r\n        platform,\r\n        elements\r\n      } = state;\r\n      const {\r\n        apply = () => {},\r\n        ...detectOverflowOptions\r\n      } = evaluate(options, state);\r\n      const overflow = await detectOverflow(state, detectOverflowOptions);\r\n      const side = getSide(placement);\r\n      const alignment = getAlignment(placement);\r\n      const isYAxis = getSideAxis(placement) === 'y';\r\n      const {\r\n        width,\r\n        height\r\n      } = rects.floating;\r\n      let heightSide;\r\n      let widthSide;\r\n      if (side === 'top' || side === 'bottom') {\r\n        heightSide = side;\r\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\r\n      } else {\r\n        widthSide = side;\r\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\r\n      }\r\n      const overflowAvailableHeight = height - overflow[heightSide];\r\n      const overflowAvailableWidth = width - overflow[widthSide];\r\n      const noShift = !state.middlewareData.shift;\r\n      let availableHeight = overflowAvailableHeight;\r\n      let availableWidth = overflowAvailableWidth;\r\n      if (isYAxis) {\r\n        const maximumClippingWidth = width - overflow.left - overflow.right;\r\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\r\n      } else {\r\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\r\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\r\n      }\r\n      if (noShift && !alignment) {\r\n        const xMin = max(overflow.left, 0);\r\n        const xMax = max(overflow.right, 0);\r\n        const yMin = max(overflow.top, 0);\r\n        const yMax = max(overflow.bottom, 0);\r\n        if (isYAxis) {\r\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\r\n        } else {\r\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\r\n        }\r\n      }\r\n      await apply({\r\n        ...state,\r\n        availableWidth,\r\n        availableHeight\r\n      });\r\n      const nextDimensions = await platform.getDimensions(elements.floating);\r\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\r\n        return {\r\n          reset: {\r\n            rects: true\r\n          }\r\n        };\r\n      }\r\n      return {};\r\n    }\r\n  };\r\n};\r\n\r\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\r\n"]},"metadata":{},"sourceType":"module"}