{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@mui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\n/**\r\n * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.\r\n */\n\n/**\r\n * @deprecated Not used internally. Use `MediaQueryList` from lib.dom.d.ts instead.\r\n */\n\n/**\r\n * @deprecated Not used internally. Use `(event: MediaQueryListEvent) => void` instead.\r\n */\n\nfunction useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && matchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    let active = true;\n\n    if (!matchMedia) {\n      return undefined;\n    }\n\n    const queryList = matchMedia(query);\n\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch(); // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia]);\n  return match;\n} // eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814\n\n\nconst maybeReactUseSyncExternalStore = React['useSyncExternalStore' + ''];\n\nfunction useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\n  const getDefaultSnapshot = React.useCallback(() => defaultMatches, [defaultMatches]);\n  const getServerSnapshot = React.useMemo(() => {\n    if (noSsr && matchMedia) {\n      return () => matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia !== null) {\n      const {\n        matches\n      } = ssrMatchMedia(query);\n      return () => matches;\n    }\n\n    return getDefaultSnapshot;\n  }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia]);\n  const [getSnapshot, subscribe] = React.useMemo(() => {\n    if (matchMedia === null) {\n      return [getDefaultSnapshot, () => () => {}];\n    }\n\n    const mediaQueryList = matchMedia(query);\n    return [() => mediaQueryList.matches, notify => {\n      // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n      mediaQueryList.addListener(notify);\n      return () => {\n        mediaQueryList.removeListener(notify);\n      };\n    }];\n  }, [getDefaultSnapshot, matchMedia, query]);\n  const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n  return match;\n}\n\nexport default function useMediaQuery(queryInput) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const theme = useTheme(); // Wait for jsdom to support the match media feature.\n  // All the browsers MUI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    ssrMatchMedia = null,\n    noSsr = false\n  } = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: options,\n    theme\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // TODO: Drop `useMediaQueryOld` and use  `use-sync-external-store` shim in `useMediaQueryNew` once the package is stable\n\n  const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;\n  const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n\n  return match;\n}","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/@mui/material/useMediaQuery/useMediaQuery.js"],"names":["React","getThemeProps","useThemeWithoutDefault","useTheme","useEnhancedEffect","useMediaQueryOld","query","defaultMatches","matchMedia","ssrMatchMedia","noSsr","match","setMatch","useState","matches","active","undefined","queryList","updateMatch","addListener","removeListener","maybeReactUseSyncExternalStore","useMediaQueryNew","getDefaultSnapshot","useCallback","getServerSnapshot","useMemo","getSnapshot","subscribe","mediaQueryList","notify","useMediaQuery","queryInput","options","theme","supportMatchMedia","window","name","props","process","env","NODE_ENV","console","error","join","replace","useMediaQueryImplementation","useDebugValue"],"mappings":"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","sourcesContent":["'use client';\r\n\r\nimport * as React from 'react';\r\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@mui/system';\r\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\r\n\r\n/**\r\n * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.\r\n */\r\n\r\n/**\r\n * @deprecated Not used internally. Use `MediaQueryList` from lib.dom.d.ts instead.\r\n */\r\n\r\n/**\r\n * @deprecated Not used internally. Use `(event: MediaQueryListEvent) => void` instead.\r\n */\r\n\r\nfunction useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\r\n  const [match, setMatch] = React.useState(() => {\r\n    if (noSsr && matchMedia) {\r\n      return matchMedia(query).matches;\r\n    }\r\n    if (ssrMatchMedia) {\r\n      return ssrMatchMedia(query).matches;\r\n    }\r\n\r\n    // Once the component is mounted, we rely on the\r\n    // event listeners to return the correct matches value.\r\n    return defaultMatches;\r\n  });\r\n  useEnhancedEffect(() => {\r\n    let active = true;\r\n    if (!matchMedia) {\r\n      return undefined;\r\n    }\r\n    const queryList = matchMedia(query);\r\n    const updateMatch = () => {\r\n      // Workaround Safari wrong implementation of matchMedia\r\n      // TODO can we remove it?\r\n      // https://github.com/mui/material-ui/pull/17315#issuecomment-528286677\r\n      if (active) {\r\n        setMatch(queryList.matches);\r\n      }\r\n    };\r\n    updateMatch();\r\n    // TODO: Use `addEventListener` once support for Safari < 14 is dropped\r\n    queryList.addListener(updateMatch);\r\n    return () => {\r\n      active = false;\r\n      queryList.removeListener(updateMatch);\r\n    };\r\n  }, [query, matchMedia]);\r\n  return match;\r\n}\r\n\r\n// eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814\r\nconst maybeReactUseSyncExternalStore = React['useSyncExternalStore' + ''];\r\nfunction useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\r\n  const getDefaultSnapshot = React.useCallback(() => defaultMatches, [defaultMatches]);\r\n  const getServerSnapshot = React.useMemo(() => {\r\n    if (noSsr && matchMedia) {\r\n      return () => matchMedia(query).matches;\r\n    }\r\n    if (ssrMatchMedia !== null) {\r\n      const {\r\n        matches\r\n      } = ssrMatchMedia(query);\r\n      return () => matches;\r\n    }\r\n    return getDefaultSnapshot;\r\n  }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia]);\r\n  const [getSnapshot, subscribe] = React.useMemo(() => {\r\n    if (matchMedia === null) {\r\n      return [getDefaultSnapshot, () => () => {}];\r\n    }\r\n    const mediaQueryList = matchMedia(query);\r\n    return [() => mediaQueryList.matches, notify => {\r\n      // TODO: Use `addEventListener` once support for Safari < 14 is dropped\r\n      mediaQueryList.addListener(notify);\r\n      return () => {\r\n        mediaQueryList.removeListener(notify);\r\n      };\r\n    }];\r\n  }, [getDefaultSnapshot, matchMedia, query]);\r\n  const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\r\n  return match;\r\n}\r\nexport default function useMediaQuery(queryInput, options = {}) {\r\n  const theme = useTheme();\r\n  // Wait for jsdom to support the match media feature.\r\n  // All the browsers MUI support have this built-in.\r\n  // This defensive check is here for simplicity.\r\n  // Most of the time, the match media logic isn't central to people tests.\r\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\r\n  const {\r\n    defaultMatches = false,\r\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\r\n    ssrMatchMedia = null,\r\n    noSsr = false\r\n  } = getThemeProps({\r\n    name: 'MuiUseMediaQuery',\r\n    props: options,\r\n    theme\r\n  });\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (typeof queryInput === 'function' && theme === null) {\r\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\r\n    }\r\n  }\r\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\r\n  query = query.replace(/^@media( ?)/m, '');\r\n\r\n  // TODO: Drop `useMediaQueryOld` and use  `use-sync-external-store` shim in `useMediaQueryNew` once the package is stable\r\n  const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;\r\n  const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    React.useDebugValue({\r\n      query,\r\n      match\r\n    });\r\n  }\r\n  return match;\r\n}"]},"metadata":{},"sourceType":"module"}