{"ast":null,"code":"'use strict';\n\nexports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes');\nexports.createHash = exports.Hash = require('create-hash');\nexports.createHmac = exports.Hmac = require('create-hmac');\nvar algos = require('browserify-sign/algos');\nvar algoKeys = Object.keys(algos);\nvar hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys);\nexports.getHashes = function () {\n  return hashes;\n};\nvar p = require('pbkdf2');\nexports.pbkdf2 = p.pbkdf2;\nexports.pbkdf2Sync = p.pbkdf2Sync;\nvar aes = require('browserify-cipher');\nexports.Cipher = aes.Cipher;\nexports.createCipher = aes.createCipher;\nexports.Cipheriv = aes.Cipheriv;\nexports.createCipheriv = aes.createCipheriv;\nexports.Decipher = aes.Decipher;\nexports.createDecipher = aes.createDecipher;\nexports.Decipheriv = aes.Decipheriv;\nexports.createDecipheriv = aes.createDecipheriv;\nexports.getCiphers = aes.getCiphers;\nexports.listCiphers = aes.listCiphers;\nvar dh = require('diffie-hellman');\nexports.DiffieHellmanGroup = dh.DiffieHellmanGroup;\nexports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;\nexports.getDiffieHellman = dh.getDiffieHellman;\nexports.createDiffieHellman = dh.createDiffieHellman;\nexports.DiffieHellman = dh.DiffieHellman;\nvar sign = require('browserify-sign');\nexports.createSign = sign.createSign;\nexports.Sign = sign.Sign;\nexports.createVerify = sign.createVerify;\nexports.Verify = sign.Verify;\nexports.createECDH = require('create-ecdh');\nvar publicEncrypt = require('public-encrypt');\nexports.publicEncrypt = publicEncrypt.publicEncrypt;\nexports.privateEncrypt = publicEncrypt.privateEncrypt;\nexports.publicDecrypt = publicEncrypt.publicDecrypt;\nexports.privateDecrypt = publicEncrypt.privateDecrypt;\n\n// the least I can do is make error messages for the rest of the node.js/crypto api.\n// ;[\n//   'createCredentials'\n// ].forEach(function (name) {\n//   exports[name] = function () {\n//     throw new Error([\n//       'sorry, ' + name + ' is not implemented yet',\n//       'we accept pull requests',\n//       'https://github.com/crypto-browserify/crypto-browserify'\n//     ].join('\\n'))\n//   }\n// })\n\nvar rf = require('randomfill');\nexports.randomFill = rf.randomFill;\nexports.randomFillSync = rf.randomFillSync;\nexports.createCredentials = function () {\n  throw new Error(['sorry, createCredentials is not implemented yet', 'we accept pull requests', 'https://github.com/crypto-browserify/crypto-browserify'].join('\\n'));\n};\nexports.constants = {\n  'DH_CHECK_P_NOT_SAFE_PRIME': 2,\n  'DH_CHECK_P_NOT_PRIME': 1,\n  'DH_UNABLE_TO_CHECK_GENERATOR': 4,\n  'DH_NOT_SUITABLE_GENERATOR': 8,\n  'NPN_ENABLED': 1,\n  'ALPN_ENABLED': 1,\n  'RSA_PKCS1_PADDING': 1,\n  'RSA_SSLV23_PADDING': 2,\n  'RSA_NO_PADDING': 3,\n  'RSA_PKCS1_OAEP_PADDING': 4,\n  'RSA_X931_PADDING': 5,\n  'RSA_PKCS1_PSS_PADDING': 6,\n  'POINT_CONVERSION_COMPRESSED': 2,\n  'POINT_CONVERSION_UNCOMPRESSED': 4,\n  'POINT_CONVERSION_HYBRID': 6\n};","map":{"version":3,"names":["exports","randomBytes","rng","pseudoRandomBytes","prng","require","createHash","Hash","createHmac","Hmac","algos","algoKeys","Object","keys","hashes","concat","getHashes","p","pbkdf2","pbkdf2Sync","aes","Cipher","createCipher","Cipheriv","createCipheriv","Decipher","createDecipher","Decipheriv","createDecipheriv","getCiphers","listCiphers","dh","DiffieHellmanGroup","createDiffieHellmanGroup","getDiffieHellman","createDiffieHellman","DiffieHellman","sign","createSign","Sign","createVerify","Verify","createECDH","publicEncrypt","privateEncrypt","publicDecrypt","privateDecrypt","rf","randomFill","randomFillSync","createCredentials","Error","join","constants"],"sources":["/Users/admin/Desktop/Newsletter-Signup/Full-Stack-Project-Assessment/client/node_modules/crypto-browserify/index.js"],"sourcesContent":["'use strict'\n\nexports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')\nexports.createHash = exports.Hash = require('create-hash')\nexports.createHmac = exports.Hmac = require('create-hmac')\n\nvar algos = require('browserify-sign/algos')\nvar algoKeys = Object.keys(algos)\nvar hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)\nexports.getHashes = function () {\n  return hashes\n}\n\nvar p = require('pbkdf2')\nexports.pbkdf2 = p.pbkdf2\nexports.pbkdf2Sync = p.pbkdf2Sync\n\nvar aes = require('browserify-cipher')\n\nexports.Cipher = aes.Cipher\nexports.createCipher = aes.createCipher\nexports.Cipheriv = aes.Cipheriv\nexports.createCipheriv = aes.createCipheriv\nexports.Decipher = aes.Decipher\nexports.createDecipher = aes.createDecipher\nexports.Decipheriv = aes.Decipheriv\nexports.createDecipheriv = aes.createDecipheriv\nexports.getCiphers = aes.getCiphers\nexports.listCiphers = aes.listCiphers\n\nvar dh = require('diffie-hellman')\n\nexports.DiffieHellmanGroup = dh.DiffieHellmanGroup\nexports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup\nexports.getDiffieHellman = dh.getDiffieHellman\nexports.createDiffieHellman = dh.createDiffieHellman\nexports.DiffieHellman = dh.DiffieHellman\n\nvar sign = require('browserify-sign')\n\nexports.createSign = sign.createSign\nexports.Sign = sign.Sign\nexports.createVerify = sign.createVerify\nexports.Verify = sign.Verify\n\nexports.createECDH = require('create-ecdh')\n\nvar publicEncrypt = require('public-encrypt')\n\nexports.publicEncrypt = publicEncrypt.publicEncrypt\nexports.privateEncrypt = publicEncrypt.privateEncrypt\nexports.publicDecrypt = publicEncrypt.publicDecrypt\nexports.privateDecrypt = publicEncrypt.privateDecrypt\n\n// the least I can do is make error messages for the rest of the node.js/crypto api.\n// ;[\n//   'createCredentials'\n// ].forEach(function (name) {\n//   exports[name] = function () {\n//     throw new Error([\n//       'sorry, ' + name + ' is not implemented yet',\n//       'we accept pull requests',\n//       'https://github.com/crypto-browserify/crypto-browserify'\n//     ].join('\\n'))\n//   }\n// })\n\nvar rf = require('randomfill')\n\nexports.randomFill = rf.randomFill\nexports.randomFillSync = rf.randomFillSync\n\nexports.createCredentials = function () {\n  throw new Error([\n    'sorry, createCredentials is not implemented yet',\n    'we accept pull requests',\n    'https://github.com/crypto-browserify/crypto-browserify'\n  ].join('\\n'))\n}\n\nexports.constants = {\n  'DH_CHECK_P_NOT_SAFE_PRIME': 2,\n  'DH_CHECK_P_NOT_PRIME': 1,\n  'DH_UNABLE_TO_CHECK_GENERATOR': 4,\n  'DH_NOT_SUITABLE_GENERATOR': 8,\n  'NPN_ENABLED': 1,\n  'ALPN_ENABLED': 1,\n  'RSA_PKCS1_PADDING': 1,\n  'RSA_SSLV23_PADDING': 2,\n  'RSA_NO_PADDING': 3,\n  'RSA_PKCS1_OAEP_PADDING': 4,\n  'RSA_X931_PADDING': 5,\n  'RSA_PKCS1_PSS_PADDING': 6,\n  'POINT_CONVERSION_COMPRESSED': 2,\n  'POINT_CONVERSION_UNCOMPRESSED': 4,\n  'POINT_CONVERSION_HYBRID': 6\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}