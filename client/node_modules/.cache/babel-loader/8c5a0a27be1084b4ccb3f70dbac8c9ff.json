{"ast":null,"code":"var _jsxFileName = \"/home/baki/Desktop/codeyourfuture/Full-Stack-Project-Assessment/client/src/components/VideoList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport YouTubeVideo from './YoutubeVideo';\nimport AddVideo from './AddVideo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseUrl = 'http://127.0.0.1:5000';\nconst videosEndpoint = `${baseUrl}/videos`;\n\nconst VideoList = () => {\n  _s();\n\n  const [videos, setVideos] = useState([]);\n  const [order, setOrder] = useState('desc'); // Default to descending\n\n  useEffect(() => {\n    // Fetch data from the API\n    fetch(videosEndpoint) // Use the correct endpoint\n    .then(response => response.json()).then(data => setVideos(data)).catch(error => console.error('Error fetching data:', error));\n  }, [order]);\n\n  const toggleOrder = () => {\n    // Toggle the order between 'asc' and 'desc'\n    const newOrder = order === 'asc' ? 'desc' : 'asc';\n    setOrder(newOrder);\n  };\n\n  const handleUpVote = videoId => {\n    const updatedVideos = videos.map(video => video.id === videoId ? { ...video,\n      votes: video.votes + 1\n    } : video);\n    setVideos(updatedVideos);\n  };\n\n  const handleDownVote = videoId => {\n    const updatedVideos = videos.map(video => {\n      if (video.id === videoId) {\n        // Ensure that the vote count doesn't go below zero\n        const newVotes = Math.max(0, video.votes - 1);\n        return { ...video,\n          votes: newVotes\n        };\n      }\n\n      return video;\n    });\n    setVideos(updatedVideos);\n  };\n\n  const handleAddVideo = newVideo => {\n    // Add the new video to the list with the current timestamp locally\n    const updatedVideosLocally = [...videos, { ...newVideo,\n      uploadDate: new Date()\n    }];\n    setVideos(updatedVideosLocally); // POST request to the API to add the new video\n\n    fetch(videosEndpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newVideo)\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to add video');\n      }\n\n      return response.json();\n    }).then(data => {\n      // Handle the response, which may include the new video ID\n      console.log('New video ID:', data.id);\n    }).catch(error => {\n      console.error('Error posting data:', error); // Handle the error, e.g., display an error message to the user\n    });\n  }; // Order the videos by the number of upvotes (descending order)\n\n\n  const orderedVideos = [...videos].sort((a, b) => {\n    if (order === 'asc') {\n      return a.votes - b.votes;\n    } else {\n      return b.votes - a.votes;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"videos\",\n    children: [/*#__PURE__*/_jsxDEV(AddVideo, {\n      onAddVideo: handleAddVideo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Most popular Videos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleOrder,\n      children: [\"Order by \", order === 'asc' ? 'Ascending' : 'Descending']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), orderedVideos.map(video => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: video.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Uploaded on: \", new Date(video.uploadDate).toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(YouTubeVideo, {\n        videoId: video.youtubeVideoId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Votes: \", video.votes]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleUpVote(video.id),\n        children: \"Up Vote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDownVote(video.id),\n        children: \"Down Vote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)]\n    }, video.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(VideoList, \"+p/KuNkGCI9yLnAxDIm8Ui+Amas=\");\n\n_c = VideoList;\nexport default VideoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoList\");","map":{"version":3,"sources":["/home/baki/Desktop/codeyourfuture/Full-Stack-Project-Assessment/client/src/components/VideoList.jsx"],"names":["React","useState","useEffect","YouTubeVideo","AddVideo","baseUrl","videosEndpoint","VideoList","videos","setVideos","order","setOrder","fetch","then","response","json","data","catch","error","console","toggleOrder","newOrder","handleUpVote","videoId","updatedVideos","map","video","id","votes","handleDownVote","newVotes","Math","max","handleAddVideo","newVideo","updatedVideosLocally","uploadDate","Date","method","headers","body","JSON","stringify","ok","Error","log","orderedVideos","sort","a","b","title","toLocaleString","youtubeVideoId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport YouTubeVideo from './YoutubeVideo';\nimport AddVideo from './AddVideo';\n\nconst baseUrl = 'http://127.0.0.1:5000';\nconst videosEndpoint = `${baseUrl}/videos`;\n\nconst VideoList = () => {\n  const [videos, setVideos] = useState([]);\n  const [order, setOrder] = useState('desc'); // Default to descending\n\n  useEffect(() => {\n    // Fetch data from the API\n    fetch(videosEndpoint) // Use the correct endpoint\n      .then((response) => response.json())\n      .then((data) => setVideos(data))\n      .catch((error) => console.error('Error fetching data:', error));\n  }, [order]);\n\n  const toggleOrder = () => {\n    // Toggle the order between 'asc' and 'desc'\n    const newOrder = order === 'asc' ? 'desc' : 'asc';\n    setOrder(newOrder);\n  };\n\n  const handleUpVote = (videoId) => {\n    const updatedVideos = videos.map((video) =>\n      video.id === videoId ? { ...video, votes: video.votes + 1 } : video\n    );\n    setVideos(updatedVideos);\n  };\n\n  const handleDownVote = (videoId) => {\n    const updatedVideos = videos.map((video) => {\n      if (video.id === videoId) {\n        // Ensure that the vote count doesn't go below zero\n        const newVotes = Math.max(0, video.votes - 1);\n        return { ...video, votes: newVotes };\n      }\n      return video;\n    });\n    setVideos(updatedVideos);\n  };\n\n  const handleAddVideo = (newVideo) => {\n    // Add the new video to the list with the current timestamp locally\n    const updatedVideosLocally = [...videos, { ...newVideo, uploadDate: new Date() }];\n    setVideos(updatedVideosLocally);\n\n    // POST request to the API to add the new video\n    fetch(videosEndpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(newVideo),\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Failed to add video');\n        }\n        return response.json();\n      })\n      .then((data) => {\n        // Handle the response, which may include the new video ID\n        console.log('New video ID:', data.id);\n      })\n      .catch((error) => {\n        console.error('Error posting data:', error);\n        // Handle the error, e.g., display an error message to the user\n      });\n  };\n\n  // Order the videos by the number of upvotes (descending order)\n  const orderedVideos = [...videos].sort((a, b) => {\n    if (order === 'asc') {\n      return a.votes - b.votes;\n    } else {\n      return b.votes - a.votes;\n    }\n  });\n\n  return (\n    <div className=\"videos\">\n      <AddVideo onAddVideo={handleAddVideo} />\n\n      <h2>Most popular Videos</h2>\n      <button onClick={toggleOrder}>\n        Order by {order === 'asc' ? 'Ascending' : 'Descending'}\n      </button>\n      {orderedVideos.map((video) => (\n        <div key={video.id}>\n          <h3>{video.title}</h3>\n          <p>Uploaded on: {new Date(video.uploadDate).toLocaleString()}</p>\n          {/* Replace YouTubeVideo component with your implementation */}\n          <YouTubeVideo videoId={video.youtubeVideoId} />\n          <p>Votes: {video.votes}</p>\n          <button onClick={() => handleUpVote(video.id)}>Up Vote</button>\n          <button onClick={() => handleDownVote(video.id)}>Down Vote</button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default VideoList;\n"]},"metadata":{},"sourceType":"module"}