{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { DEFAULT_MODE_STORAGE_KEY, DEFAULT_COLOR_SCHEME_STORAGE_KEY } from './getInitColorSchemeScript';\nexport function getSystemMode(mode) {\n  if (typeof window !== 'undefined' && mode === 'system') {\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n\n    if (mql.matches) {\n      return 'dark';\n    }\n\n    return 'light';\n  }\n\n  return undefined;\n}\n\nfunction processState(state, callback) {\n  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {\n    return callback('light');\n  }\n\n  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {\n    return callback('dark');\n  }\n\n  return undefined;\n}\n\nexport function getColorScheme(state) {\n  return processState(state, mode => {\n    if (mode === 'light') {\n      return state.lightColorScheme;\n    }\n\n    if (mode === 'dark') {\n      return state.darkColorScheme;\n    }\n\n    return undefined;\n  });\n}\n\nfunction initializeValue(key, defaultValue) {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n\n  let value;\n\n  try {\n    value = localStorage.getItem(key) || undefined;\n\n    if (!value) {\n      // the first time that user enters the site.\n      localStorage.setItem(key, defaultValue);\n    }\n  } catch (e) {// Unsupported\n  }\n\n  return value || defaultValue;\n}\n\nexport default function useCurrentColorScheme(options) {\n  const {\n    defaultMode = 'light',\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    supportedColorSchemes = [],\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    storageWindow = typeof window === 'undefined' ? undefined : window\n  } = options;\n  const joinedColorSchemes = supportedColorSchemes.join(',');\n  const [state, setState] = React.useState(() => {\n    const initialMode = initializeValue(modeStorageKey, defaultMode);\n    const lightColorScheme = initializeValue(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);\n    const darkColorScheme = initializeValue(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);\n    return {\n      mode: initialMode,\n      systemMode: getSystemMode(initialMode),\n      lightColorScheme,\n      darkColorScheme\n    };\n  });\n  const colorScheme = getColorScheme(state);\n  const setMode = React.useCallback(mode => {\n    setState(currentState => {\n      if (mode === currentState.mode) {\n        // do nothing if mode does not change\n        return currentState;\n      }\n\n      const newMode = !mode ? defaultMode : mode;\n\n      try {\n        localStorage.setItem(modeStorageKey, newMode);\n      } catch (e) {// Unsupported\n      }\n\n      return _extends({}, currentState, {\n        mode: newMode,\n        systemMode: getSystemMode(newMode)\n      });\n    });\n  }, [modeStorageKey, defaultMode]);\n  const setColorScheme = React.useCallback(value => {\n    if (!value) {\n      setState(currentState => {\n        try {\n          localStorage.setItem(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);\n          localStorage.setItem(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);\n        } catch (e) {// Unsupported\n        }\n\n        return _extends({}, currentState, {\n          lightColorScheme: defaultLightColorScheme,\n          darkColorScheme: defaultDarkColorScheme\n        });\n      });\n    } else if (typeof value === 'string') {\n      if (value && !joinedColorSchemes.includes(value)) {\n        console.error(`\\`${value}\\` does not exist in \\`theme.colorSchemes\\`.`);\n      } else {\n        setState(currentState => {\n          const newState = _extends({}, currentState);\n\n          processState(currentState, mode => {\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);\n            } catch (e) {// Unsupported\n            }\n\n            if (mode === 'light') {\n              newState.lightColorScheme = value;\n            }\n\n            if (mode === 'dark') {\n              newState.darkColorScheme = value;\n            }\n          });\n          return newState;\n        });\n      }\n    } else {\n      setState(currentState => {\n        const newState = _extends({}, currentState);\n\n        const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;\n        const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;\n\n        if (newLightColorScheme) {\n          if (!joinedColorSchemes.includes(newLightColorScheme)) {\n            console.error(`\\`${newLightColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.lightColorScheme = newLightColorScheme;\n\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-light`, newLightColorScheme);\n            } catch (error) {// Unsupported\n            }\n          }\n        }\n\n        if (newDarkColorScheme) {\n          if (!joinedColorSchemes.includes(newDarkColorScheme)) {\n            console.error(`\\`${newDarkColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.darkColorScheme = newDarkColorScheme;\n\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-dark`, newDarkColorScheme);\n            } catch (error) {// Unsupported\n            }\n          }\n        }\n\n        return newState;\n      });\n    }\n  }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);\n  const handleMediaQuery = React.useCallback(e => {\n    if (state.mode === 'system') {\n      setState(currentState => _extends({}, currentState, {\n        systemMode: e != null && e.matches ? 'dark' : 'light'\n      }));\n    }\n  }, [state.mode]); // Ref hack to avoid adding handleMediaQuery as a dep\n\n  const mediaListener = React.useRef(handleMediaQuery);\n  mediaListener.current = handleMediaQuery;\n  React.useEffect(() => {\n    const handler = function () {\n      return mediaListener.current(...arguments);\n    }; // Always listen to System preference\n\n\n    const media = window.matchMedia('(prefers-color-scheme: dark)'); // Intentionally use deprecated listener methods to support iOS & old browsers\n\n    media.addListener(handler);\n    handler(media);\n    return () => media.removeListener(handler);\n  }, []); // Handle when localStorage has changed\n\n  React.useEffect(() => {\n    const handleStorage = event => {\n      const value = event.newValue;\n\n      if (typeof event.key === 'string' && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {\n        // If the key is deleted, value will be null then reset color scheme to the default one.\n        if (event.key.endsWith('light')) {\n          setColorScheme({\n            light: value\n          });\n        }\n\n        if (event.key.endsWith('dark')) {\n          setColorScheme({\n            dark: value\n          });\n        }\n      }\n\n      if (event.key === modeStorageKey && (!value || ['light', 'dark', 'system'].includes(value))) {\n        setMode(value || defaultMode);\n      }\n    };\n\n    if (storageWindow) {\n      // For syncing color-scheme changes between iframes\n      storageWindow.addEventListener('storage', handleStorage);\n      return () => storageWindow.removeEventListener('storage', handleStorage);\n    }\n\n    return undefined;\n  }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow]);\n  return _extends({}, state, {\n    colorScheme,\n    setMode,\n    setColorScheme\n  });\n}","map":{"version":3,"sources":["/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@mui/system/esm/cssVars/useCurrentColorScheme.js"],"names":["_extends","React","DEFAULT_MODE_STORAGE_KEY","DEFAULT_COLOR_SCHEME_STORAGE_KEY","getSystemMode","mode","window","mql","matchMedia","matches","undefined","processState","state","callback","systemMode","getColorScheme","lightColorScheme","darkColorScheme","initializeValue","key","defaultValue","value","localStorage","getItem","setItem","e","useCurrentColorScheme","options","defaultMode","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","modeStorageKey","colorSchemeStorageKey","storageWindow","joinedColorSchemes","join","setState","useState","initialMode","colorScheme","setMode","useCallback","currentState","newMode","setColorScheme","includes","console","error","newState","newLightColorScheme","light","newDarkColorScheme","dark","handleMediaQuery","mediaListener","useRef","current","useEffect","handler","media","addListener","removeListener","handleStorage","event","newValue","startsWith","match","endsWith","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { DEFAULT_MODE_STORAGE_KEY, DEFAULT_COLOR_SCHEME_STORAGE_KEY } from './getInitColorSchemeScript';\nexport function getSystemMode(mode) {\n  if (typeof window !== 'undefined' && mode === 'system') {\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      return 'dark';\n    }\n    return 'light';\n  }\n  return undefined;\n}\nfunction processState(state, callback) {\n  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {\n    return callback('light');\n  }\n  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {\n    return callback('dark');\n  }\n  return undefined;\n}\nexport function getColorScheme(state) {\n  return processState(state, mode => {\n    if (mode === 'light') {\n      return state.lightColorScheme;\n    }\n    if (mode === 'dark') {\n      return state.darkColorScheme;\n    }\n    return undefined;\n  });\n}\nfunction initializeValue(key, defaultValue) {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n  let value;\n  try {\n    value = localStorage.getItem(key) || undefined;\n    if (!value) {\n      // the first time that user enters the site.\n      localStorage.setItem(key, defaultValue);\n    }\n  } catch (e) {\n    // Unsupported\n  }\n  return value || defaultValue;\n}\nexport default function useCurrentColorScheme(options) {\n  const {\n    defaultMode = 'light',\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    supportedColorSchemes = [],\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    storageWindow = typeof window === 'undefined' ? undefined : window\n  } = options;\n  const joinedColorSchemes = supportedColorSchemes.join(',');\n  const [state, setState] = React.useState(() => {\n    const initialMode = initializeValue(modeStorageKey, defaultMode);\n    const lightColorScheme = initializeValue(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);\n    const darkColorScheme = initializeValue(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);\n    return {\n      mode: initialMode,\n      systemMode: getSystemMode(initialMode),\n      lightColorScheme,\n      darkColorScheme\n    };\n  });\n  const colorScheme = getColorScheme(state);\n  const setMode = React.useCallback(mode => {\n    setState(currentState => {\n      if (mode === currentState.mode) {\n        // do nothing if mode does not change\n        return currentState;\n      }\n      const newMode = !mode ? defaultMode : mode;\n      try {\n        localStorage.setItem(modeStorageKey, newMode);\n      } catch (e) {\n        // Unsupported\n      }\n      return _extends({}, currentState, {\n        mode: newMode,\n        systemMode: getSystemMode(newMode)\n      });\n    });\n  }, [modeStorageKey, defaultMode]);\n  const setColorScheme = React.useCallback(value => {\n    if (!value) {\n      setState(currentState => {\n        try {\n          localStorage.setItem(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);\n          localStorage.setItem(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);\n        } catch (e) {\n          // Unsupported\n        }\n        return _extends({}, currentState, {\n          lightColorScheme: defaultLightColorScheme,\n          darkColorScheme: defaultDarkColorScheme\n        });\n      });\n    } else if (typeof value === 'string') {\n      if (value && !joinedColorSchemes.includes(value)) {\n        console.error(`\\`${value}\\` does not exist in \\`theme.colorSchemes\\`.`);\n      } else {\n        setState(currentState => {\n          const newState = _extends({}, currentState);\n          processState(currentState, mode => {\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);\n            } catch (e) {\n              // Unsupported\n            }\n            if (mode === 'light') {\n              newState.lightColorScheme = value;\n            }\n            if (mode === 'dark') {\n              newState.darkColorScheme = value;\n            }\n          });\n          return newState;\n        });\n      }\n    } else {\n      setState(currentState => {\n        const newState = _extends({}, currentState);\n        const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;\n        const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;\n        if (newLightColorScheme) {\n          if (!joinedColorSchemes.includes(newLightColorScheme)) {\n            console.error(`\\`${newLightColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.lightColorScheme = newLightColorScheme;\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-light`, newLightColorScheme);\n            } catch (error) {\n              // Unsupported\n            }\n          }\n        }\n        if (newDarkColorScheme) {\n          if (!joinedColorSchemes.includes(newDarkColorScheme)) {\n            console.error(`\\`${newDarkColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.darkColorScheme = newDarkColorScheme;\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-dark`, newDarkColorScheme);\n            } catch (error) {\n              // Unsupported\n            }\n          }\n        }\n        return newState;\n      });\n    }\n  }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);\n  const handleMediaQuery = React.useCallback(e => {\n    if (state.mode === 'system') {\n      setState(currentState => _extends({}, currentState, {\n        systemMode: e != null && e.matches ? 'dark' : 'light'\n      }));\n    }\n  }, [state.mode]);\n\n  // Ref hack to avoid adding handleMediaQuery as a dep\n  const mediaListener = React.useRef(handleMediaQuery);\n  mediaListener.current = handleMediaQuery;\n  React.useEffect(() => {\n    const handler = (...args) => mediaListener.current(...args);\n\n    // Always listen to System preference\n    const media = window.matchMedia('(prefers-color-scheme: dark)');\n\n    // Intentionally use deprecated listener methods to support iOS & old browsers\n    media.addListener(handler);\n    handler(media);\n    return () => media.removeListener(handler);\n  }, []);\n\n  // Handle when localStorage has changed\n  React.useEffect(() => {\n    const handleStorage = event => {\n      const value = event.newValue;\n      if (typeof event.key === 'string' && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {\n        // If the key is deleted, value will be null then reset color scheme to the default one.\n        if (event.key.endsWith('light')) {\n          setColorScheme({\n            light: value\n          });\n        }\n        if (event.key.endsWith('dark')) {\n          setColorScheme({\n            dark: value\n          });\n        }\n      }\n      if (event.key === modeStorageKey && (!value || ['light', 'dark', 'system'].includes(value))) {\n        setMode(value || defaultMode);\n      }\n    };\n    if (storageWindow) {\n      // For syncing color-scheme changes between iframes\n      storageWindow.addEventListener('storage', handleStorage);\n      return () => storageWindow.removeEventListener('storage', handleStorage);\n    }\n    return undefined;\n  }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow]);\n  return _extends({}, state, {\n    colorScheme,\n    setMode,\n    setColorScheme\n  });\n}"]},"metadata":{},"sourceType":"module"}