{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport TransitionGroupContext from './TransitionGroupContext';\nimport { getChildMapping, getInitialChildMapping, getNextChildMapping } from './utils/ChildMapping';\n\nvar values = Object.values || function (obj) {\n  return Object.keys(obj).map(function (k) {\n    return obj[k];\n  });\n};\n\nvar defaultProps = {\n  component: 'div',\n  childFactory: function childFactory(child) {\n    return child;\n  }\n};\n/**\r\n * The `<TransitionGroup>` component manages a set of transition components\r\n * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition\r\n * components, `<TransitionGroup>` is a state machine for managing the mounting\r\n * and unmounting of components over time.\r\n *\r\n * Consider the example below. As items are removed or added to the TodoList the\r\n * `in` prop is toggled automatically by the `<TransitionGroup>`.\r\n *\r\n * Note that `<TransitionGroup>`  does not define any animation behavior!\r\n * Exactly _how_ a list item animates is up to the individual transition\r\n * component. This means you can mix and match animations across different list\r\n * items.\r\n */\n\nvar TransitionGroup = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(TransitionGroup, _React$Component);\n\n  function TransitionGroup(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n\n    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear\n\n\n    _this.state = {\n      contextValue: {\n        isMounting: true\n      },\n      handleExited: handleExited,\n      firstRender: true\n    };\n    return _this;\n  }\n\n  var _proto = TransitionGroup.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.mounted = true;\n    this.setState({\n      contextValue: {\n        isMounting: false\n      }\n    });\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.mounted = false;\n  };\n\n  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {\n    var prevChildMapping = _ref.children,\n        handleExited = _ref.handleExited,\n        firstRender = _ref.firstRender;\n    return {\n      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),\n      firstRender: false\n    };\n  } // node is `undefined` when user provided `nodeRef` prop\n  ;\n\n  _proto.handleExited = function handleExited(child, node) {\n    var currentChildMapping = getChildMapping(this.props.children);\n    if (child.key in currentChildMapping) return;\n\n    if (child.props.onExited) {\n      child.props.onExited(node);\n    }\n\n    if (this.mounted) {\n      this.setState(function (state) {\n        var children = _extends({}, state.children);\n\n        delete children[child.key];\n        return {\n          children: children\n        };\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        Component = _this$props.component,\n        childFactory = _this$props.childFactory,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"component\", \"childFactory\"]);\n\n    var contextValue = this.state.contextValue;\n    var children = values(this.state.children).map(childFactory);\n    delete props.appear;\n    delete props.enter;\n    delete props.exit;\n\n    if (Component === null) {\n      return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\n        value: contextValue\n      }, children);\n    }\n\n    return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\n      value: contextValue\n    }, /*#__PURE__*/React.createElement(Component, props, children));\n  };\n\n  return TransitionGroup;\n}(React.Component);\n\nTransitionGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\r\n   * `<TransitionGroup>` renders a `<div>` by default. You can change this\r\n   * behavior by providing a `component` prop.\r\n   * If you use React v16+ and would like to avoid a wrapping `<div>` element\r\n   * you can pass in `component={null}`. This is useful if the wrapping div\r\n   * borks your css styles.\r\n   */\n  component: PropTypes.any,\n\n  /**\r\n   * A set of `<Transition>` components, that are toggled `in` and out as they\r\n   * leave. the `<TransitionGroup>` will inject specific transition props, so\r\n   * remember to spread them through if you are wrapping the `<Transition>` as\r\n   * with our `<Fade>` example.\r\n   *\r\n   * While this component is meant for multiple `Transition` or `CSSTransition`\r\n   * children, sometimes you may want to have a single transition child with\r\n   * content that you want to be transitioned out and in when you change it\r\n   * (e.g. routes, images etc.) In that case you can change the `key` prop of\r\n   * the transition child as you change its content, this will cause\r\n   * `TransitionGroup` to transition the child out and back in.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * A convenience prop that enables or disables appear animations\r\n   * for all children. Note that specifying this will override any defaults set\r\n   * on individual children Transitions.\r\n   */\n  appear: PropTypes.bool,\n\n  /**\r\n   * A convenience prop that enables or disables enter animations\r\n   * for all children. Note that specifying this will override any defaults set\r\n   * on individual children Transitions.\r\n   */\n  enter: PropTypes.bool,\n\n  /**\r\n   * A convenience prop that enables or disables exit animations\r\n   * for all children. Note that specifying this will override any defaults set\r\n   * on individual children Transitions.\r\n   */\n  exit: PropTypes.bool,\n\n  /**\r\n   * You may need to apply reactive updates to a child as it is exiting.\r\n   * This is generally done by using `cloneElement` however in the case of an exiting\r\n   * child the element has already been removed and not accessible to the consumer.\r\n   *\r\n   * If you do need to update a child as it leaves you can provide a `childFactory`\r\n   * to wrap every child, even the ones that are leaving.\r\n   *\r\n   * @type Function(child: ReactElement) -> ReactElement\r\n   */\n  childFactory: PropTypes.func\n} : {};\nTransitionGroup.defaultProps = defaultProps;\nexport default TransitionGroup;","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/react-transition-group/esm/TransitionGroup.js"],"names":["_objectWithoutPropertiesLoose","_extends","_assertThisInitialized","_inheritsLoose","PropTypes","React","TransitionGroupContext","getChildMapping","getInitialChildMapping","getNextChildMapping","values","Object","obj","keys","map","k","defaultProps","component","childFactory","child","TransitionGroup","_React$Component","props","context","_this","call","handleExited","bind","state","contextValue","isMounting","firstRender","_proto","prototype","componentDidMount","mounted","setState","componentWillUnmount","getDerivedStateFromProps","nextProps","_ref","prevChildMapping","children","node","currentChildMapping","key","onExited","render","_this$props","Component","appear","enter","exit","createElement","Provider","value","propTypes","process","env","NODE_ENV","any","bool","func"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\r\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport TransitionGroupContext from './TransitionGroupContext';\r\nimport { getChildMapping, getInitialChildMapping, getNextChildMapping } from './utils/ChildMapping';\r\n\r\nvar values = Object.values || function (obj) {\r\n  return Object.keys(obj).map(function (k) {\r\n    return obj[k];\r\n  });\r\n};\r\n\r\nvar defaultProps = {\r\n  component: 'div',\r\n  childFactory: function childFactory(child) {\r\n    return child;\r\n  }\r\n};\r\n/**\r\n * The `<TransitionGroup>` component manages a set of transition components\r\n * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition\r\n * components, `<TransitionGroup>` is a state machine for managing the mounting\r\n * and unmounting of components over time.\r\n *\r\n * Consider the example below. As items are removed or added to the TodoList the\r\n * `in` prop is toggled automatically by the `<TransitionGroup>`.\r\n *\r\n * Note that `<TransitionGroup>`  does not define any animation behavior!\r\n * Exactly _how_ a list item animates is up to the individual transition\r\n * component. This means you can mix and match animations across different list\r\n * items.\r\n */\r\n\r\nvar TransitionGroup = /*#__PURE__*/function (_React$Component) {\r\n  _inheritsLoose(TransitionGroup, _React$Component);\r\n\r\n  function TransitionGroup(props, context) {\r\n    var _this;\r\n\r\n    _this = _React$Component.call(this, props, context) || this;\r\n\r\n    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear\r\n\r\n\r\n    _this.state = {\r\n      contextValue: {\r\n        isMounting: true\r\n      },\r\n      handleExited: handleExited,\r\n      firstRender: true\r\n    };\r\n    return _this;\r\n  }\r\n\r\n  var _proto = TransitionGroup.prototype;\r\n\r\n  _proto.componentDidMount = function componentDidMount() {\r\n    this.mounted = true;\r\n    this.setState({\r\n      contextValue: {\r\n        isMounting: false\r\n      }\r\n    });\r\n  };\r\n\r\n  _proto.componentWillUnmount = function componentWillUnmount() {\r\n    this.mounted = false;\r\n  };\r\n\r\n  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {\r\n    var prevChildMapping = _ref.children,\r\n        handleExited = _ref.handleExited,\r\n        firstRender = _ref.firstRender;\r\n    return {\r\n      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),\r\n      firstRender: false\r\n    };\r\n  } // node is `undefined` when user provided `nodeRef` prop\r\n  ;\r\n\r\n  _proto.handleExited = function handleExited(child, node) {\r\n    var currentChildMapping = getChildMapping(this.props.children);\r\n    if (child.key in currentChildMapping) return;\r\n\r\n    if (child.props.onExited) {\r\n      child.props.onExited(node);\r\n    }\r\n\r\n    if (this.mounted) {\r\n      this.setState(function (state) {\r\n        var children = _extends({}, state.children);\r\n\r\n        delete children[child.key];\r\n        return {\r\n          children: children\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  _proto.render = function render() {\r\n    var _this$props = this.props,\r\n        Component = _this$props.component,\r\n        childFactory = _this$props.childFactory,\r\n        props = _objectWithoutPropertiesLoose(_this$props, [\"component\", \"childFactory\"]);\r\n\r\n    var contextValue = this.state.contextValue;\r\n    var children = values(this.state.children).map(childFactory);\r\n    delete props.appear;\r\n    delete props.enter;\r\n    delete props.exit;\r\n\r\n    if (Component === null) {\r\n      return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\r\n        value: contextValue\r\n      }, children);\r\n    }\r\n\r\n    return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\r\n      value: contextValue\r\n    }, /*#__PURE__*/React.createElement(Component, props, children));\r\n  };\r\n\r\n  return TransitionGroup;\r\n}(React.Component);\r\n\r\nTransitionGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\r\n  /**\r\n   * `<TransitionGroup>` renders a `<div>` by default. You can change this\r\n   * behavior by providing a `component` prop.\r\n   * If you use React v16+ and would like to avoid a wrapping `<div>` element\r\n   * you can pass in `component={null}`. This is useful if the wrapping div\r\n   * borks your css styles.\r\n   */\r\n  component: PropTypes.any,\r\n\r\n  /**\r\n   * A set of `<Transition>` components, that are toggled `in` and out as they\r\n   * leave. the `<TransitionGroup>` will inject specific transition props, so\r\n   * remember to spread them through if you are wrapping the `<Transition>` as\r\n   * with our `<Fade>` example.\r\n   *\r\n   * While this component is meant for multiple `Transition` or `CSSTransition`\r\n   * children, sometimes you may want to have a single transition child with\r\n   * content that you want to be transitioned out and in when you change it\r\n   * (e.g. routes, images etc.) In that case you can change the `key` prop of\r\n   * the transition child as you change its content, this will cause\r\n   * `TransitionGroup` to transition the child out and back in.\r\n   */\r\n  children: PropTypes.node,\r\n\r\n  /**\r\n   * A convenience prop that enables or disables appear animations\r\n   * for all children. Note that specifying this will override any defaults set\r\n   * on individual children Transitions.\r\n   */\r\n  appear: PropTypes.bool,\r\n\r\n  /**\r\n   * A convenience prop that enables or disables enter animations\r\n   * for all children. Note that specifying this will override any defaults set\r\n   * on individual children Transitions.\r\n   */\r\n  enter: PropTypes.bool,\r\n\r\n  /**\r\n   * A convenience prop that enables or disables exit animations\r\n   * for all children. Note that specifying this will override any defaults set\r\n   * on individual children Transitions.\r\n   */\r\n  exit: PropTypes.bool,\r\n\r\n  /**\r\n   * You may need to apply reactive updates to a child as it is exiting.\r\n   * This is generally done by using `cloneElement` however in the case of an exiting\r\n   * child the element has already been removed and not accessible to the consumer.\r\n   *\r\n   * If you do need to update a child as it leaves you can provide a `childFactory`\r\n   * to wrap every child, even the ones that are leaving.\r\n   *\r\n   * @type Function(child: ReactElement) -> ReactElement\r\n   */\r\n  childFactory: PropTypes.func\r\n} : {};\r\nTransitionGroup.defaultProps = defaultProps;\r\nexport default TransitionGroup;"]},"metadata":{},"sourceType":"module"}