{"ast":null,"code":"import { useMemo } from 'react';\n\nconst toFnRef = ref => !ref || typeof ref === 'function' ? ref : value => {\n  ref.current = value;\n};\n\nexport function mergeRefs(refA, refB) {\n  const a = toFnRef(refA);\n  const b = toFnRef(refB);\n  return value => {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\n\nfunction useMergedRefs(refA, refB) {\n  return useMemo(() => mergeRefs(refA, refB), [refA, refB]);\n}\n\nexport default useMergedRefs;","map":{"version":3,"sources":["/home/coder/CYF/react-learn/Full-Stack-Project-Assessment/client/node_modules/@restart/hooks/esm/useMergedRefs.js"],"names":["useMemo","toFnRef","ref","value","current","mergeRefs","refA","refB","a","b","useMergedRefs"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;;AACA,MAAMC,OAAO,GAAGC,GAAG,IAAI,CAACA,GAAD,IAAQ,OAAOA,GAAP,KAAe,UAAvB,GAAoCA,GAApC,GAA0CC,KAAK,IAAI;AACxED,EAAAA,GAAG,CAACE,OAAJ,GAAcD,KAAd;AACD,CAFD;;AAGA,OAAO,SAASE,SAAT,CAAmBC,IAAnB,EAAyBC,IAAzB,EAA+B;AACpC,QAAMC,CAAC,GAAGP,OAAO,CAACK,IAAD,CAAjB;AACA,QAAMG,CAAC,GAAGR,OAAO,CAACM,IAAD,CAAjB;AACA,SAAOJ,KAAK,IAAI;AACd,QAAIK,CAAJ,EAAOA,CAAC,CAACL,KAAD,CAAD;AACP,QAAIM,CAAJ,EAAOA,CAAC,CAACN,KAAD,CAAD;AACR,GAHD;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASO,aAAT,CAAuBJ,IAAvB,EAA6BC,IAA7B,EAAmC;AACjC,SAAOP,OAAO,CAAC,MAAMK,SAAS,CAACC,IAAD,EAAOC,IAAP,CAAhB,EAA8B,CAACD,IAAD,EAAOC,IAAP,CAA9B,CAAd;AACD;;AACD,eAAeG,aAAf","sourcesContent":["import { useMemo } from 'react';\nconst toFnRef = ref => !ref || typeof ref === 'function' ? ref : value => {\n  ref.current = value;\n};\nexport function mergeRefs(refA, refB) {\n  const a = toFnRef(refA);\n  const b = toFnRef(refB);\n  return value => {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\nfunction useMergedRefs(refA, refB) {\n  return useMemo(() => mergeRefs(refA, refB), [refA, refB]);\n}\nexport default useMergedRefs;"]},"metadata":{},"sourceType":"module"}