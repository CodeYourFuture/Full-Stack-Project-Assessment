{"ast":null,"code":"import _objectWithoutProperties from \"/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _toConsumableArray from \"/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _excluded = [\"crossAxis\", \"alignment\", \"allowedPlacements\", \"autoAlignment\"],\n    _excluded2 = [\"mainAxis\", \"crossAxis\", \"fallbackPlacements\", \"fallbackStrategy\", \"fallbackAxisSideDirection\", \"flipAlignment\"],\n    _excluded3 = [\"strategy\"],\n    _excluded4 = [\"mainAxis\", \"crossAxis\", \"limiter\"],\n    _excluded5 = [\"apply\"];\nimport _regeneratorRuntime from \"/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@babel/runtime/regenerator/index.js\";\nimport { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  var reference = _ref.reference,\n      floating = _ref.floating;\n  var sideAxis = getSideAxis(placement);\n  var alignmentAxis = getAlignmentAxis(placement);\n  var alignLength = getAxisLength(alignmentAxis);\n  var side = getSide(placement);\n  var isVertical = sideAxis === 'y';\n  var commonX = reference.x + reference.width / 2 - floating.width / 2;\n  var commonY = reference.y + reference.height / 2 - floating.height / 2;\n  var commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  var coords;\n\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n\n  return coords;\n}\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\n\n\nvar computePosition = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(reference, floating, config) {\n    var _config$placement, placement, _config$strategy, strategy, _config$middleware, middleware, platform, validMiddleware, rtl, rects, _computeCoordsFromPla, x, y, statefulPlacement, middlewareData, resetCount, i, _validMiddleware$i, name, fn, _yield$fn, nextX, nextY, data, reset, _computeCoordsFromPla2;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _config$placement = config.placement, placement = _config$placement === void 0 ? 'bottom' : _config$placement, _config$strategy = config.strategy, strategy = _config$strategy === void 0 ? 'absolute' : _config$strategy, _config$middleware = config.middleware, middleware = _config$middleware === void 0 ? [] : _config$middleware, platform = config.platform;\n            validMiddleware = middleware.filter(Boolean);\n            _context.next = 4;\n            return platform.isRTL == null ? void 0 : platform.isRTL(floating);\n\n          case 4:\n            rtl = _context.sent;\n            _context.next = 7;\n            return platform.getElementRects({\n              reference: reference,\n              floating: floating,\n              strategy: strategy\n            });\n\n          case 7:\n            rects = _context.sent;\n            _computeCoordsFromPla = computeCoordsFromPlacement(rects, placement, rtl), x = _computeCoordsFromPla.x, y = _computeCoordsFromPla.y;\n            statefulPlacement = placement;\n            middlewareData = {};\n            resetCount = 0;\n            i = 0;\n\n          case 13:\n            if (!(i < validMiddleware.length)) {\n              _context.next = 46;\n              break;\n            }\n\n            _validMiddleware$i = validMiddleware[i], name = _validMiddleware$i.name, fn = _validMiddleware$i.fn;\n            _context.next = 17;\n            return fn({\n              x: x,\n              y: y,\n              initialPlacement: placement,\n              placement: statefulPlacement,\n              strategy: strategy,\n              middlewareData: middlewareData,\n              rects: rects,\n              platform: platform,\n              elements: {\n                reference: reference,\n                floating: floating\n              }\n            });\n\n          case 17:\n            _yield$fn = _context.sent;\n            nextX = _yield$fn.x;\n            nextY = _yield$fn.y;\n            data = _yield$fn.data;\n            reset = _yield$fn.reset;\n            x = nextX != null ? nextX : x;\n            y = nextY != null ? nextY : y;\n            middlewareData = _objectSpread(_objectSpread({}, middlewareData), {}, _defineProperty({}, name, _objectSpread(_objectSpread({}, middlewareData[name]), data)));\n\n            if (!(reset && resetCount <= 50)) {\n              _context.next = 43;\n              break;\n            }\n\n            resetCount++;\n\n            if (!(typeof reset === 'object')) {\n              _context.next = 41;\n              break;\n            }\n\n            if (reset.placement) {\n              statefulPlacement = reset.placement;\n            }\n\n            if (!reset.rects) {\n              _context.next = 38;\n              break;\n            }\n\n            if (!(reset.rects === true)) {\n              _context.next = 36;\n              break;\n            }\n\n            _context.next = 33;\n            return platform.getElementRects({\n              reference: reference,\n              floating: floating,\n              strategy: strategy\n            });\n\n          case 33:\n            _context.t0 = _context.sent;\n            _context.next = 37;\n            break;\n\n          case 36:\n            _context.t0 = reset.rects;\n\n          case 37:\n            rects = _context.t0;\n\n          case 38:\n            _computeCoordsFromPla2 = computeCoordsFromPlacement(rects, statefulPlacement, rtl);\n            x = _computeCoordsFromPla2.x;\n            y = _computeCoordsFromPla2.y;\n\n          case 41:\n            i = -1;\n            return _context.abrupt(\"continue\", 43);\n\n          case 43:\n            i++;\n            _context.next = 13;\n            break;\n\n          case 46:\n            return _context.abrupt(\"return\", {\n              x: x,\n              y: y,\n              placement: statefulPlacement,\n              strategy: strategy,\n              middlewareData: middlewareData\n            });\n\n          case 47:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function computePosition(_x, _x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\n\n\nfunction detectOverflow(_x4, _x5) {\n  return _detectOverflow.apply(this, arguments);\n}\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\n\n\nfunction _detectOverflow() {\n  _detectOverflow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(state, options) {\n    var _await$platform$isEle, x, y, platform, rects, elements, strategy, _evaluate8, _evaluate8$boundary, boundary, _evaluate8$rootBounda, rootBoundary, _evaluate8$elementCon, elementContext, _evaluate8$altBoundar, altBoundary, _evaluate8$padding, padding, paddingObject, altContext, element, clippingClientRect, rect, offsetParent, offsetScale, elementClientRect;\n\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            if (options === void 0) {\n              options = {};\n            }\n\n            x = state.x, y = state.y, platform = state.platform, rects = state.rects, elements = state.elements, strategy = state.strategy;\n            _evaluate8 = evaluate(options, state), _evaluate8$boundary = _evaluate8.boundary, boundary = _evaluate8$boundary === void 0 ? 'clippingAncestors' : _evaluate8$boundary, _evaluate8$rootBounda = _evaluate8.rootBoundary, rootBoundary = _evaluate8$rootBounda === void 0 ? 'viewport' : _evaluate8$rootBounda, _evaluate8$elementCon = _evaluate8.elementContext, elementContext = _evaluate8$elementCon === void 0 ? 'floating' : _evaluate8$elementCon, _evaluate8$altBoundar = _evaluate8.altBoundary, altBoundary = _evaluate8$altBoundar === void 0 ? false : _evaluate8$altBoundar, _evaluate8$padding = _evaluate8.padding, padding = _evaluate8$padding === void 0 ? 0 : _evaluate8$padding;\n            paddingObject = getPaddingObject(padding);\n            altContext = elementContext === 'floating' ? 'reference' : 'floating';\n            element = elements[altBoundary ? altContext : elementContext];\n            _context10.t0 = rectToClientRect;\n            _context10.t1 = platform;\n            _context10.next = 10;\n            return platform.isElement == null ? void 0 : platform.isElement(element);\n\n          case 10:\n            _context10.t2 = _await$platform$isEle = _context10.sent;\n\n            if (!(_context10.t2 != null)) {\n              _context10.next = 15;\n              break;\n            }\n\n            _context10.t3 = _await$platform$isEle;\n            _context10.next = 16;\n            break;\n\n          case 15:\n            _context10.t3 = true;\n\n          case 16:\n            if (!_context10.t3) {\n              _context10.next = 20;\n              break;\n            }\n\n            _context10.t4 = element;\n            _context10.next = 26;\n            break;\n\n          case 20:\n            _context10.t5 = element.contextElement;\n\n            if (_context10.t5) {\n              _context10.next = 25;\n              break;\n            }\n\n            _context10.next = 24;\n            return platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating);\n\n          case 24:\n            _context10.t5 = _context10.sent;\n\n          case 25:\n            _context10.t4 = _context10.t5;\n\n          case 26:\n            _context10.t6 = _context10.t4;\n            _context10.t7 = boundary;\n            _context10.t8 = rootBoundary;\n            _context10.t9 = strategy;\n            _context10.t10 = {\n              element: _context10.t6,\n              boundary: _context10.t7,\n              rootBoundary: _context10.t8,\n              strategy: _context10.t9\n            };\n            _context10.next = 33;\n            return _context10.t1.getClippingRect.call(_context10.t1, _context10.t10);\n\n          case 33:\n            _context10.t11 = _context10.sent;\n            clippingClientRect = (0, _context10.t0)(_context10.t11);\n            rect = elementContext === 'floating' ? _objectSpread(_objectSpread({}, rects.floating), {}, {\n              x: x,\n              y: y\n            }) : rects.reference;\n            _context10.next = 38;\n            return platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating);\n\n          case 38:\n            offsetParent = _context10.sent;\n            _context10.next = 41;\n            return platform.isElement == null ? void 0 : platform.isElement(offsetParent);\n\n          case 41:\n            if (!_context10.sent) {\n              _context10.next = 50;\n              break;\n            }\n\n            _context10.next = 44;\n            return platform.getScale == null ? void 0 : platform.getScale(offsetParent);\n\n          case 44:\n            _context10.t13 = _context10.sent;\n\n            if (_context10.t13) {\n              _context10.next = 47;\n              break;\n            }\n\n            _context10.t13 = {\n              x: 1,\n              y: 1\n            };\n\n          case 47:\n            _context10.t12 = _context10.t13;\n            _context10.next = 51;\n            break;\n\n          case 50:\n            _context10.t12 = {\n              x: 1,\n              y: 1\n            };\n\n          case 51:\n            offsetScale = _context10.t12;\n            _context10.t14 = rectToClientRect;\n\n            if (!platform.convertOffsetParentRelativeRectToViewportRelativeRect) {\n              _context10.next = 59;\n              break;\n            }\n\n            _context10.next = 56;\n            return platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n              rect: rect,\n              offsetParent: offsetParent,\n              strategy: strategy\n            });\n\n          case 56:\n            _context10.t15 = _context10.sent;\n            _context10.next = 60;\n            break;\n\n          case 59:\n            _context10.t15 = rect;\n\n          case 60:\n            _context10.t16 = _context10.t15;\n            elementClientRect = (0, _context10.t14)(_context10.t16);\n            return _context10.abrupt(\"return\", {\n              top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n              bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n              left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n              right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n            });\n\n          case 63:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  }));\n  return _detectOverflow.apply(this, arguments);\n}\n\nvar arrow = function arrow(options) {\n  return {\n    name: 'arrow',\n    options: options,\n    fn: function fn(state) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _data, _ref4;\n\n        var x, y, placement, rects, platform, elements, _ref3, element, _ref3$padding, padding, paddingObject, coords, axis, length, arrowDimensions, isYAxis, minProp, maxProp, clientProp, endDiff, startDiff, arrowOffsetParent, clientSize, centerToReference, largestPossiblePadding, minPadding, maxPadding, min$1, max, center, offset, shouldAddOffset, alignmentOffset;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                x = state.x, y = state.y, placement = state.placement, rects = state.rects, platform = state.platform, elements = state.elements; // Since `element` is required, we don't Partial<> the type.\n\n                _ref3 = evaluate(options, state) || {}, element = _ref3.element, _ref3$padding = _ref3.padding, padding = _ref3$padding === void 0 ? 0 : _ref3$padding;\n\n                if (!(element == null)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", {});\n\n              case 4:\n                paddingObject = getPaddingObject(padding);\n                coords = {\n                  x: x,\n                  y: y\n                };\n                axis = getAlignmentAxis(placement);\n                length = getAxisLength(axis);\n                _context2.next = 10;\n                return platform.getDimensions(element);\n\n              case 10:\n                arrowDimensions = _context2.sent;\n                isYAxis = axis === 'y';\n                minProp = isYAxis ? 'top' : 'left';\n                maxProp = isYAxis ? 'bottom' : 'right';\n                clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n                endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n                startDiff = coords[axis] - rects.reference[axis];\n                _context2.next = 19;\n                return platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element);\n\n              case 19:\n                arrowOffsetParent = _context2.sent;\n                clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0; // DOM platform can return `window` as the `offsetParent`.\n\n                _context2.t0 = !clientSize;\n\n                if (_context2.t0) {\n                  _context2.next = 26;\n                  break;\n                }\n\n                _context2.next = 25;\n                return platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent);\n\n              case 25:\n                _context2.t0 = !_context2.sent;\n\n              case 26:\n                if (!_context2.t0) {\n                  _context2.next = 28;\n                  break;\n                }\n\n                clientSize = elements.floating[clientProp] || rects.floating[length];\n\n              case 28:\n                centerToReference = endDiff / 2 - startDiff / 2; // If the padding is large enough that it causes the arrow to no longer be\n                // centered, modify the padding so that it is centered.\n\n                largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n                minPadding = min(paddingObject[minProp], largestPossiblePadding);\n                maxPadding = min(paddingObject[maxProp], largestPossiblePadding); // Make sure the arrow doesn't overflow the floating element if the center\n                // point is outside the floating element's bounds.\n\n                min$1 = minPadding;\n                max = clientSize - arrowDimensions[length] - maxPadding;\n                center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n                offset = clamp(min$1, center, max); // If the reference is small enough that the arrow's padding causes it to\n                // to point to nothing for an aligned placement, adjust the offset of the\n                // floating element itself. This stops `shift()` from taking action, but can\n                // be worked around by calling it again after the `arrow()` if desired.\n\n                shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n                alignmentOffset = shouldAddOffset ? center < min$1 ? min$1 - center : max - center : 0;\n                return _context2.abrupt(\"return\", (_ref4 = {}, _defineProperty(_ref4, axis, coords[axis] - alignmentOffset), _defineProperty(_ref4, \"data\", (_data = {}, _defineProperty(_data, axis, offset), _defineProperty(_data, \"centerOffset\", center - offset + alignmentOffset), _data)), _ref4));\n\n              case 39:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    }\n  };\n};\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  var allowedPlacementsSortedByAlignment = alignment ? [].concat(_toConsumableArray(allowedPlacements.filter(function (placement) {\n    return getAlignment(placement) === alignment;\n  })), _toConsumableArray(allowedPlacements.filter(function (placement) {\n    return getAlignment(placement) !== alignment;\n  }))) : allowedPlacements.filter(function (placement) {\n    return getSide(placement) === placement;\n  });\n  return allowedPlacementsSortedByAlignment.filter(function (placement) {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\n\n\nvar autoPlacement = function autoPlacement(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'autoPlacement',\n    options: options,\n    fn: function fn(state) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE, rects, middlewareData, placement, platform, elements, _evaluate, _evaluate$crossAxis, crossAxis, alignment, _evaluate$allowedPlac, allowedPlacements, _evaluate$autoAlignme, autoAlignment, detectOverflowOptions, placements$1, overflow, currentIndex, currentPlacement, alignmentSides, currentOverflows, allOverflows, nextPlacement, placementsSortedByMostSpace, placementsThatFitOnEachSide, resetPlacement;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                rects = state.rects, middlewareData = state.middlewareData, placement = state.placement, platform = state.platform, elements = state.elements;\n                _evaluate = evaluate(options, state), _evaluate$crossAxis = _evaluate.crossAxis, crossAxis = _evaluate$crossAxis === void 0 ? false : _evaluate$crossAxis, alignment = _evaluate.alignment, _evaluate$allowedPlac = _evaluate.allowedPlacements, allowedPlacements = _evaluate$allowedPlac === void 0 ? placements : _evaluate$allowedPlac, _evaluate$autoAlignme = _evaluate.autoAlignment, autoAlignment = _evaluate$autoAlignme === void 0 ? true : _evaluate$autoAlignme, detectOverflowOptions = _objectWithoutProperties(_evaluate, _excluded);\n                placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n                _context3.next = 5;\n                return detectOverflow(state, detectOverflowOptions);\n\n              case 5:\n                overflow = _context3.sent;\n                currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n                currentPlacement = placements$1[currentIndex];\n\n                if (!(currentPlacement == null)) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {});\n\n              case 10:\n                _context3.t0 = getAlignmentSides;\n                _context3.t1 = currentPlacement;\n                _context3.t2 = rects;\n                _context3.next = 15;\n                return platform.isRTL == null ? void 0 : platform.isRTL(elements.floating);\n\n              case 15:\n                _context3.t3 = _context3.sent;\n                alignmentSides = (0, _context3.t0)(_context3.t1, _context3.t2, _context3.t3);\n\n                if (!(placement !== currentPlacement)) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  reset: {\n                    placement: placements$1[0]\n                  }\n                });\n\n              case 19:\n                currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n                allOverflows = [].concat(_toConsumableArray(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), [{\n                  placement: currentPlacement,\n                  overflows: currentOverflows\n                }]);\n                nextPlacement = placements$1[currentIndex + 1]; // There are more placements to check.\n\n                if (!nextPlacement) {\n                  _context3.next = 24;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  data: {\n                    index: currentIndex + 1,\n                    overflows: allOverflows\n                  },\n                  reset: {\n                    placement: nextPlacement\n                  }\n                });\n\n              case 24:\n                placementsSortedByMostSpace = allOverflows.map(function (d) {\n                  var alignment = getAlignment(d.placement);\n                  return [d.placement, alignment && crossAxis ? // Check along the mainAxis and main crossAxis side.\n                  d.overflows.slice(0, 2).reduce(function (acc, v) {\n                    return acc + v;\n                  }, 0) : // Check only the mainAxis.\n                  d.overflows[0], d.overflows];\n                }).sort(function (a, b) {\n                  return a[1] - b[1];\n                });\n                placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(function (d) {\n                  return d[2].slice(0, // Aligned placements should not check their opposite crossAxis\n                  // side.\n                  getAlignment(d[0]) ? 2 : 3).every(function (v) {\n                    return v <= 0;\n                  });\n                });\n                resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n\n                if (!(resetPlacement !== placement)) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  data: {\n                    index: currentIndex + 1,\n                    overflows: allOverflows\n                  },\n                  reset: {\n                    placement: resetPlacement\n                  }\n                });\n\n              case 29:\n                return _context3.abrupt(\"return\", {});\n\n              case 30:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    }\n  };\n};\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\n\n\nvar flip = function flip(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'flip',\n    options: options,\n    fn: function fn(state) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _middlewareData$flip, placement, middlewareData, rects, initialPlacement, platform, elements, _evaluate2, _evaluate2$mainAxis, checkMainAxis, _evaluate2$crossAxis, checkCrossAxis, specifiedFallbackPlacements, _evaluate2$fallbackSt, fallbackStrategy, _evaluate2$fallbackAx, fallbackAxisSideDirection, _evaluate2$flipAlignm, flipAlignment, detectOverflowOptions, side, isBasePlacement, rtl, fallbackPlacements, placements, overflow, overflows, overflowsData, _sides, _middlewareData$flip2, _overflowsData$filter, nextIndex, nextPlacement, resetPlacement, _overflowsData$map$so, _placement;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                placement = state.placement, middlewareData = state.middlewareData, rects = state.rects, initialPlacement = state.initialPlacement, platform = state.platform, elements = state.elements;\n                _evaluate2 = evaluate(options, state), _evaluate2$mainAxis = _evaluate2.mainAxis, checkMainAxis = _evaluate2$mainAxis === void 0 ? true : _evaluate2$mainAxis, _evaluate2$crossAxis = _evaluate2.crossAxis, checkCrossAxis = _evaluate2$crossAxis === void 0 ? true : _evaluate2$crossAxis, specifiedFallbackPlacements = _evaluate2.fallbackPlacements, _evaluate2$fallbackSt = _evaluate2.fallbackStrategy, fallbackStrategy = _evaluate2$fallbackSt === void 0 ? 'bestFit' : _evaluate2$fallbackSt, _evaluate2$fallbackAx = _evaluate2.fallbackAxisSideDirection, fallbackAxisSideDirection = _evaluate2$fallbackAx === void 0 ? 'none' : _evaluate2$fallbackAx, _evaluate2$flipAlignm = _evaluate2.flipAlignment, flipAlignment = _evaluate2$flipAlignm === void 0 ? true : _evaluate2$flipAlignm, detectOverflowOptions = _objectWithoutProperties(_evaluate2, _excluded2);\n                side = getSide(placement);\n                isBasePlacement = getSide(initialPlacement) === initialPlacement;\n                _context4.next = 6;\n                return platform.isRTL == null ? void 0 : platform.isRTL(elements.floating);\n\n              case 6:\n                rtl = _context4.sent;\n                fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n\n                if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n                  fallbackPlacements.push.apply(fallbackPlacements, _toConsumableArray(getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl)));\n                }\n\n                placements = [initialPlacement].concat(_toConsumableArray(fallbackPlacements));\n                _context4.next = 12;\n                return detectOverflow(state, detectOverflowOptions);\n\n              case 12:\n                overflow = _context4.sent;\n                overflows = [];\n                overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n\n                if (checkMainAxis) {\n                  overflows.push(overflow[side]);\n                }\n\n                if (checkCrossAxis) {\n                  _sides = getAlignmentSides(placement, rects, rtl);\n                  overflows.push(overflow[_sides[0]], overflow[_sides[1]]);\n                }\n\n                overflowsData = [].concat(_toConsumableArray(overflowsData), [{\n                  placement: placement,\n                  overflows: overflows\n                }]); // One or more sides is overflowing.\n\n                if (overflows.every(function (side) {\n                  return side <= 0;\n                })) {\n                  _context4.next = 35;\n                  break;\n                }\n\n                nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n                nextPlacement = placements[nextIndex];\n\n                if (!nextPlacement) {\n                  _context4.next = 23;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", {\n                  data: {\n                    index: nextIndex,\n                    overflows: overflowsData\n                  },\n                  reset: {\n                    placement: nextPlacement\n                  }\n                });\n\n              case 23:\n                // First, find the candidates that fit on the mainAxis side of overflow,\n                // then find the placement that fits the best on the main crossAxis side.\n                resetPlacement = (_overflowsData$filter = overflowsData.filter(function (d) {\n                  return d.overflows[0] <= 0;\n                }).sort(function (a, b) {\n                  return a.overflows[1] - b.overflows[1];\n                })[0]) == null ? void 0 : _overflowsData$filter.placement; // Otherwise fallback.\n\n                if (resetPlacement) {\n                  _context4.next = 33;\n                  break;\n                }\n\n                _context4.t0 = fallbackStrategy;\n                _context4.next = _context4.t0 === 'bestFit' ? 28 : _context4.t0 === 'initialPlacement' ? 31 : 33;\n                break;\n\n              case 28:\n                _placement = (_overflowsData$map$so = overflowsData.map(function (d) {\n                  return [d.placement, d.overflows.filter(function (overflow) {\n                    return overflow > 0;\n                  }).reduce(function (acc, overflow) {\n                    return acc + overflow;\n                  }, 0)];\n                }).sort(function (a, b) {\n                  return a[1] - b[1];\n                })[0]) == null ? void 0 : _overflowsData$map$so[0];\n\n                if (_placement) {\n                  resetPlacement = _placement;\n                }\n\n                return _context4.abrupt(\"break\", 33);\n\n              case 31:\n                resetPlacement = initialPlacement;\n                return _context4.abrupt(\"break\", 33);\n\n              case 33:\n                if (!(placement !== resetPlacement)) {\n                  _context4.next = 35;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", {\n                  reset: {\n                    placement: resetPlacement\n                  }\n                });\n\n              case 35:\n                return _context4.abrupt(\"return\", {});\n\n              case 36:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(function (side) {\n    return overflow[side] >= 0;\n  });\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\n\n\nvar hide = function hide(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'hide',\n    options: options,\n    fn: function fn(state) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var rects, _evaluate3, _evaluate3$strategy, strategy, detectOverflowOptions, overflow, offsets, _overflow, _offsets;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                rects = state.rects;\n                _evaluate3 = evaluate(options, state), _evaluate3$strategy = _evaluate3.strategy, strategy = _evaluate3$strategy === void 0 ? 'referenceHidden' : _evaluate3$strategy, detectOverflowOptions = _objectWithoutProperties(_evaluate3, _excluded3);\n                _context5.t0 = strategy;\n                _context5.next = _context5.t0 === 'referenceHidden' ? 5 : _context5.t0 === 'escaped' ? 10 : 15;\n                break;\n\n              case 5:\n                _context5.next = 7;\n                return detectOverflow(state, _objectSpread(_objectSpread({}, detectOverflowOptions), {}, {\n                  elementContext: 'reference'\n                }));\n\n              case 7:\n                overflow = _context5.sent;\n                offsets = getSideOffsets(overflow, rects.reference);\n                return _context5.abrupt(\"return\", {\n                  data: {\n                    referenceHiddenOffsets: offsets,\n                    referenceHidden: isAnySideFullyClipped(offsets)\n                  }\n                });\n\n              case 10:\n                _context5.next = 12;\n                return detectOverflow(state, _objectSpread(_objectSpread({}, detectOverflowOptions), {}, {\n                  altBoundary: true\n                }));\n\n              case 12:\n                _overflow = _context5.sent;\n                _offsets = getSideOffsets(_overflow, rects.floating);\n                return _context5.abrupt(\"return\", {\n                  data: {\n                    escapedOffsets: _offsets,\n                    escaped: isAnySideFullyClipped(_offsets)\n                  }\n                });\n\n              case 15:\n                return _context5.abrupt(\"return\", {});\n\n              case 16:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }))();\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  var minX = min.apply(void 0, _toConsumableArray(rects.map(function (rect) {\n    return rect.left;\n  })));\n  var minY = min.apply(void 0, _toConsumableArray(rects.map(function (rect) {\n    return rect.top;\n  })));\n  var maxX = max.apply(void 0, _toConsumableArray(rects.map(function (rect) {\n    return rect.right;\n  })));\n  var maxY = max.apply(void 0, _toConsumableArray(rects.map(function (rect) {\n    return rect.bottom;\n  })));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\n\nfunction getRectsByLine(rects) {\n  var sortedRects = rects.slice().sort(function (a, b) {\n    return a.y - b.y;\n  });\n  var groups = [];\n  var prevRect = null;\n\n  for (var i = 0; i < sortedRects.length; i++) {\n    var rect = sortedRects[i];\n\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n\n    prevRect = rect;\n  }\n\n  return groups.map(function (rect) {\n    return rectToClientRect(getBoundingRect(rect));\n  });\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\n\n\nvar inline = function inline(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'inline',\n    options: options,\n    fn: function fn(state) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var placement, elements, rects, platform, strategy, _evaluate4, _evaluate4$padding, padding, x, y, nativeClientRects, clientRects, fallback, paddingObject, getBoundingClientRect, resetRects;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                getBoundingClientRect = function _getBoundingClientRec() {\n                  // There are two rects and they are disjoined.\n                  if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n                    // Find the first rect in which the point is fully inside.\n                    return clientRects.find(function (rect) {\n                      return x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom;\n                    }) || fallback;\n                  } // There are 2 or more connected rects.\n\n\n                  if (clientRects.length >= 2) {\n                    if (getSideAxis(placement) === 'y') {\n                      var firstRect = clientRects[0];\n                      var lastRect = clientRects[clientRects.length - 1];\n                      var isTop = getSide(placement) === 'top';\n                      var _top = firstRect.top;\n                      var _bottom = lastRect.bottom;\n\n                      var _left = isTop ? firstRect.left : lastRect.left;\n\n                      var _right = isTop ? firstRect.right : lastRect.right;\n\n                      var _width = _right - _left;\n\n                      var _height = _bottom - _top;\n\n                      return {\n                        top: _top,\n                        bottom: _bottom,\n                        left: _left,\n                        right: _right,\n                        width: _width,\n                        height: _height,\n                        x: _left,\n                        y: _top\n                      };\n                    }\n\n                    var isLeftSide = getSide(placement) === 'left';\n                    var maxRight = max.apply(void 0, _toConsumableArray(clientRects.map(function (rect) {\n                      return rect.right;\n                    })));\n                    var minLeft = min.apply(void 0, _toConsumableArray(clientRects.map(function (rect) {\n                      return rect.left;\n                    })));\n                    var measureRects = clientRects.filter(function (rect) {\n                      return isLeftSide ? rect.left === minLeft : rect.right === maxRight;\n                    });\n                    var top = measureRects[0].top;\n                    var bottom = measureRects[measureRects.length - 1].bottom;\n                    var left = minLeft;\n                    var right = maxRight;\n                    var width = right - left;\n                    var height = bottom - top;\n                    return {\n                      top: top,\n                      bottom: bottom,\n                      left: left,\n                      right: right,\n                      width: width,\n                      height: height,\n                      x: left,\n                      y: top\n                    };\n                  }\n\n                  return fallback;\n                };\n\n                placement = state.placement, elements = state.elements, rects = state.rects, platform = state.platform, strategy = state.strategy; // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n                // ClientRect's bounds, despite the event listener being triggered. A\n                // padding of 2 seems to handle this issue.\n\n                _evaluate4 = evaluate(options, state), _evaluate4$padding = _evaluate4.padding, padding = _evaluate4$padding === void 0 ? 2 : _evaluate4$padding, x = _evaluate4.x, y = _evaluate4.y;\n                _context6.t0 = Array;\n                _context6.next = 6;\n                return platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference);\n\n              case 6:\n                _context6.t1 = _context6.sent;\n\n                if (_context6.t1) {\n                  _context6.next = 9;\n                  break;\n                }\n\n                _context6.t1 = [];\n\n              case 9:\n                _context6.t2 = _context6.t1;\n                nativeClientRects = _context6.t0.from.call(_context6.t0, _context6.t2);\n                clientRects = getRectsByLine(nativeClientRects);\n                fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n                paddingObject = getPaddingObject(padding);\n                _context6.next = 16;\n                return platform.getElementRects({\n                  reference: {\n                    getBoundingClientRect: getBoundingClientRect\n                  },\n                  floating: elements.floating,\n                  strategy: strategy\n                });\n\n              case 16:\n                resetRects = _context6.sent;\n\n                if (!(rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height)) {\n                  _context6.next = 19;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", {\n                  reset: {\n                    rects: resetRects\n                  }\n                });\n\n              case 19:\n                return _context6.abrupt(\"return\", {});\n\n              case 20:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }))();\n    }\n  };\n}; // For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\n\nfunction convertValueToCoords(_x6, _x7) {\n  return _convertValueToCoords.apply(this, arguments);\n}\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\n\n\nfunction _convertValueToCoords() {\n  _convertValueToCoords = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(state, options) {\n    var placement, platform, elements, rtl, side, alignment, isVertical, mainAxisMulti, crossAxisMulti, rawValue, _ref6, mainAxis, crossAxis, alignmentAxis;\n\n    return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            placement = state.placement, platform = state.platform, elements = state.elements;\n            _context11.next = 3;\n            return platform.isRTL == null ? void 0 : platform.isRTL(elements.floating);\n\n          case 3:\n            rtl = _context11.sent;\n            side = getSide(placement);\n            alignment = getAlignment(placement);\n            isVertical = getSideAxis(placement) === 'y';\n            mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n            crossAxisMulti = rtl && isVertical ? -1 : 1;\n            rawValue = evaluate(options, state); // eslint-disable-next-line prefer-const\n\n            _ref6 = typeof rawValue === 'number' ? {\n              mainAxis: rawValue,\n              crossAxis: 0,\n              alignmentAxis: null\n            } : _objectSpread({\n              mainAxis: 0,\n              crossAxis: 0,\n              alignmentAxis: null\n            }, rawValue), mainAxis = _ref6.mainAxis, crossAxis = _ref6.crossAxis, alignmentAxis = _ref6.alignmentAxis;\n\n            if (alignment && typeof alignmentAxis === 'number') {\n              crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n            }\n\n            return _context11.abrupt(\"return\", isVertical ? {\n              x: crossAxis * crossAxisMulti,\n              y: mainAxis * mainAxisMulti\n            } : {\n              x: mainAxis * mainAxisMulti,\n              y: crossAxis * crossAxisMulti\n            });\n\n          case 13:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  }));\n  return _convertValueToCoords.apply(this, arguments);\n}\n\nvar offset = function offset(options) {\n  if (options === void 0) {\n    options = 0;\n  }\n\n  return {\n    name: 'offset',\n    options: options,\n    fn: function fn(state) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var x, y, diffCoords;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                x = state.x, y = state.y;\n                _context7.next = 3;\n                return convertValueToCoords(state, options);\n\n              case 3:\n                diffCoords = _context7.sent;\n                return _context7.abrupt(\"return\", {\n                  x: x + diffCoords.x,\n                  y: y + diffCoords.y,\n                  data: diffCoords\n                });\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }))();\n    }\n  };\n};\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\n\n\nvar shift = function shift(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'shift',\n    options: options,\n    fn: function fn(state) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var _objectSpread3;\n\n        var x, y, placement, _evaluate5, _evaluate5$mainAxis, checkMainAxis, _evaluate5$crossAxis, checkCrossAxis, _evaluate5$limiter, limiter, detectOverflowOptions, coords, overflow, crossAxis, mainAxis, mainAxisCoord, crossAxisCoord, minSide, maxSide, _min, _max, _minSide, _maxSide, _min2, _max2, limitedCoords;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                x = state.x, y = state.y, placement = state.placement;\n                _evaluate5 = evaluate(options, state), _evaluate5$mainAxis = _evaluate5.mainAxis, checkMainAxis = _evaluate5$mainAxis === void 0 ? true : _evaluate5$mainAxis, _evaluate5$crossAxis = _evaluate5.crossAxis, checkCrossAxis = _evaluate5$crossAxis === void 0 ? false : _evaluate5$crossAxis, _evaluate5$limiter = _evaluate5.limiter, limiter = _evaluate5$limiter === void 0 ? {\n                  fn: function fn(_ref) {\n                    var x = _ref.x,\n                        y = _ref.y;\n                    return {\n                      x: x,\n                      y: y\n                    };\n                  }\n                } : _evaluate5$limiter, detectOverflowOptions = _objectWithoutProperties(_evaluate5, _excluded4);\n                coords = {\n                  x: x,\n                  y: y\n                };\n                _context8.next = 5;\n                return detectOverflow(state, detectOverflowOptions);\n\n              case 5:\n                overflow = _context8.sent;\n                crossAxis = getSideAxis(getSide(placement));\n                mainAxis = getOppositeAxis(crossAxis);\n                mainAxisCoord = coords[mainAxis];\n                crossAxisCoord = coords[crossAxis];\n\n                if (checkMainAxis) {\n                  minSide = mainAxis === 'y' ? 'top' : 'left';\n                  maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n                  _min = mainAxisCoord + overflow[minSide];\n                  _max = mainAxisCoord - overflow[maxSide];\n                  mainAxisCoord = clamp(_min, mainAxisCoord, _max);\n                }\n\n                if (checkCrossAxis) {\n                  _minSide = crossAxis === 'y' ? 'top' : 'left';\n                  _maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n                  _min2 = crossAxisCoord + overflow[_minSide];\n                  _max2 = crossAxisCoord - overflow[_maxSide];\n                  crossAxisCoord = clamp(_min2, crossAxisCoord, _max2);\n                }\n\n                limitedCoords = limiter.fn(_objectSpread(_objectSpread({}, state), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, mainAxis, mainAxisCoord), _defineProperty(_objectSpread3, crossAxis, crossAxisCoord), _objectSpread3)));\n                return _context8.abrupt(\"return\", _objectSpread(_objectSpread({}, limitedCoords), {}, {\n                  data: {\n                    x: limitedCoords.x - x,\n                    y: limitedCoords.y - y\n                  }\n                }));\n\n              case 14:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }))();\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\n\n\nvar limitShift = function limitShift(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    options: options,\n    fn: function fn(state) {\n      var _ref5;\n\n      var x = state.x,\n          y = state.y,\n          placement = state.placement,\n          rects = state.rects,\n          middlewareData = state.middlewareData;\n\n      var _evaluate6 = evaluate(options, state),\n          _evaluate6$offset = _evaluate6.offset,\n          offset = _evaluate6$offset === void 0 ? 0 : _evaluate6$offset,\n          _evaluate6$mainAxis = _evaluate6.mainAxis,\n          checkMainAxis = _evaluate6$mainAxis === void 0 ? true : _evaluate6$mainAxis,\n          _evaluate6$crossAxis = _evaluate6.crossAxis,\n          checkCrossAxis = _evaluate6$crossAxis === void 0 ? true : _evaluate6$crossAxis;\n\n      var coords = {\n        x: x,\n        y: y\n      };\n      var crossAxis = getSideAxis(placement);\n      var mainAxis = getOppositeAxis(crossAxis);\n      var mainAxisCoord = coords[mainAxis];\n      var crossAxisCoord = coords[crossAxis];\n      var rawOffset = evaluate(offset, state);\n      var computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : _objectSpread({\n        mainAxis: 0,\n        crossAxis: 0\n      }, rawOffset);\n\n      if (checkMainAxis) {\n        var len = mainAxis === 'y' ? 'height' : 'width';\n        var limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        var limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n\n        var _len = mainAxis === 'y' ? 'width' : 'height';\n\n        var isOriginSide = ['top', 'left'].includes(getSide(placement));\n\n        var _limitMin = rects.reference[crossAxis] - rects.floating[_len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n\n        var _limitMax = rects.reference[crossAxis] + rects.reference[_len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n\n        if (crossAxisCoord < _limitMin) {\n          crossAxisCoord = _limitMin;\n        } else if (crossAxisCoord > _limitMax) {\n          crossAxisCoord = _limitMax;\n        }\n      }\n\n      return _ref5 = {}, _defineProperty(_ref5, mainAxis, mainAxisCoord), _defineProperty(_ref5, crossAxis, crossAxisCoord), _ref5;\n    }\n  };\n};\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\n\n\nvar size = function size(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'size',\n    options: options,\n    fn: function fn(state) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var placement, rects, platform, elements, _evaluate7, _evaluate7$apply, apply, detectOverflowOptions, overflow, side, alignment, isYAxis, _rects$floating, width, height, heightSide, widthSide, overflowAvailableHeight, overflowAvailableWidth, noShift, availableHeight, availableWidth, maximumClippingWidth, maximumClippingHeight, xMin, xMax, yMin, yMax, nextDimensions;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                placement = state.placement, rects = state.rects, platform = state.platform, elements = state.elements;\n                _evaluate7 = evaluate(options, state), _evaluate7$apply = _evaluate7.apply, apply = _evaluate7$apply === void 0 ? function () {} : _evaluate7$apply, detectOverflowOptions = _objectWithoutProperties(_evaluate7, _excluded5);\n                _context9.next = 4;\n                return detectOverflow(state, detectOverflowOptions);\n\n              case 4:\n                overflow = _context9.sent;\n                side = getSide(placement);\n                alignment = getAlignment(placement);\n                isYAxis = getSideAxis(placement) === 'y';\n                _rects$floating = rects.floating, width = _rects$floating.width, height = _rects$floating.height;\n\n                if (!(side === 'top' || side === 'bottom')) {\n                  _context9.next = 28;\n                  break;\n                }\n\n                heightSide = side;\n                _context9.t0 = alignment;\n                _context9.next = 14;\n                return platform.isRTL == null ? void 0 : platform.isRTL(elements.floating);\n\n              case 14:\n                if (!_context9.sent) {\n                  _context9.next = 18;\n                  break;\n                }\n\n                _context9.t1 = 'start';\n                _context9.next = 19;\n                break;\n\n              case 18:\n                _context9.t1 = 'end';\n\n              case 19:\n                _context9.t2 = _context9.t1;\n\n                if (!(_context9.t0 === _context9.t2)) {\n                  _context9.next = 24;\n                  break;\n                }\n\n                _context9.t3 = 'left';\n                _context9.next = 25;\n                break;\n\n              case 24:\n                _context9.t3 = 'right';\n\n              case 25:\n                widthSide = _context9.t3;\n                _context9.next = 30;\n                break;\n\n              case 28:\n                widthSide = side;\n                heightSide = alignment === 'end' ? 'top' : 'bottom';\n\n              case 30:\n                overflowAvailableHeight = height - overflow[heightSide];\n                overflowAvailableWidth = width - overflow[widthSide];\n                noShift = !state.middlewareData.shift;\n                availableHeight = overflowAvailableHeight;\n                availableWidth = overflowAvailableWidth;\n\n                if (isYAxis) {\n                  maximumClippingWidth = width - overflow.left - overflow.right;\n                  availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n                } else {\n                  maximumClippingHeight = height - overflow.top - overflow.bottom;\n                  availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n                }\n\n                if (noShift && !alignment) {\n                  xMin = max(overflow.left, 0);\n                  xMax = max(overflow.right, 0);\n                  yMin = max(overflow.top, 0);\n                  yMax = max(overflow.bottom, 0);\n\n                  if (isYAxis) {\n                    availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n                  } else {\n                    availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n                  }\n                }\n\n                _context9.next = 39;\n                return apply(_objectSpread(_objectSpread({}, state), {}, {\n                  availableWidth: availableWidth,\n                  availableHeight: availableHeight\n                }));\n\n              case 39:\n                _context9.next = 41;\n                return platform.getDimensions(elements.floating);\n\n              case 41:\n                nextDimensions = _context9.sent;\n\n                if (!(width !== nextDimensions.width || height !== nextDimensions.height)) {\n                  _context9.next = 44;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\", {\n                  reset: {\n                    rects: true\n                  }\n                });\n\n              case 44:\n                return _context9.abrupt(\"return\", {});\n\n              case 45:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }))();\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };","map":{"version":3,"sources":["/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@floating-ui/core/dist/floating-ui.core.mjs"],"names":["getSideAxis","getAlignmentAxis","getAxisLength","getSide","getAlignment","evaluate","getPaddingObject","rectToClientRect","min","clamp","placements","getAlignmentSides","getOppositeAlignmentPlacement","getOppositePlacement","getExpandedPlacements","getOppositeAxisPlacements","sides","max","getOppositeAxis","computeCoordsFromPlacement","_ref","placement","rtl","reference","floating","sideAxis","alignmentAxis","alignLength","side","isVertical","commonX","x","width","commonY","y","height","commonAlign","coords","computePosition","config","strategy","middleware","platform","validMiddleware","filter","Boolean","isRTL","getElementRects","rects","statefulPlacement","middlewareData","resetCount","i","length","name","fn","initialPlacement","elements","nextX","nextY","data","reset","detectOverflow","state","options","boundary","rootBoundary","elementContext","altBoundary","padding","paddingObject","altContext","element","isElement","_await$platform$isEle","contextElement","getDocumentElement","getClippingRect","clippingClientRect","rect","getOffsetParent","offsetParent","getScale","offsetScale","convertOffsetParentRelativeRectToViewportRelativeRect","elementClientRect","top","bottom","left","right","arrow","axis","getDimensions","arrowDimensions","isYAxis","minProp","maxProp","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","centerToReference","largestPossiblePadding","minPadding","maxPadding","min$1","center","offset","shouldAddOffset","alignmentOffset","getPlacementList","alignment","autoAlignment","allowedPlacements","allowedPlacementsSortedByAlignment","autoPlacement","crossAxis","detectOverflowOptions","placements$1","undefined","overflow","currentIndex","_middlewareData$autoP","index","currentPlacement","alignmentSides","currentOverflows","allOverflows","_middlewareData$autoP2","overflows","nextPlacement","placementsSortedByMostSpace","map","d","slice","reduce","acc","v","sort","a","b","placementsThatFitOnEachSide","every","resetPlacement","_placementsThatFitOnE","flip","mainAxis","checkMainAxis","checkCrossAxis","specifiedFallbackPlacements","fallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","flipAlignment","isBasePlacement","push","overflowsData","_middlewareData$flip","nextIndex","_middlewareData$flip2","_overflowsData$filter","_overflowsData$map$so","getSideOffsets","isAnySideFullyClipped","some","hide","offsets","referenceHiddenOffsets","referenceHidden","escapedOffsets","escaped","getBoundingRect","minX","minY","maxX","maxY","getRectsByLine","sortedRects","groups","prevRect","inline","getBoundingClientRect","clientRects","find","fallback","firstRect","lastRect","isTop","isLeftSide","maxRight","minLeft","measureRects","Array","getClientRects","nativeClientRects","from","resetRects","convertValueToCoords","mainAxisMulti","includes","crossAxisMulti","rawValue","diffCoords","shift","limiter","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","limitShift","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse","_middlewareData$offse2","isOriginSide","size","apply","heightSide","widthSide","overflowAvailableHeight","overflowAvailableWidth","noShift","availableHeight","availableWidth","maximumClippingWidth","maximumClippingHeight","xMin","xMax","yMin","yMax","nextDimensions"],"mappings":"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","sourcesContent":["import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n      continue;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. This stops `shift()` from taking action, but can\n    // be worked around by calling it again after the `arrow()` if desired.\n    const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? min$1 - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset + alignmentOffset\n      }\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if (isYAxis) {\n        const maximumClippingWidth = width - overflow.left - overflow.right;\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\n"]},"metadata":{},"sourceType":"module"}