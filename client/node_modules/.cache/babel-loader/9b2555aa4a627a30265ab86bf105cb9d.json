{"ast":null,"code":"/**\n * negotiator\n * Copyright(c) 2012 Isaac Z. Schlueter\n * Copyright(c) 2014 Federico Romero\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = preferredMediaTypes;\nmodule.exports.preferredMediaTypes = preferredMediaTypes;\n/**\n * Module variables.\n * @private\n */\n\nvar simpleMediaTypeRegExp = /^\\s*([^\\s\\/;]+)\\/([^;\\s]+)\\s*(?:;(.*))?$/;\n/**\n * Parse the Accept header.\n * @private\n */\n\nfunction parseAccept(accept) {\n  var accepts = splitMediaTypes(accept);\n\n  for (var i = 0, j = 0; i < accepts.length; i++) {\n    var mediaType = parseMediaType(accepts[i].trim(), i);\n\n    if (mediaType) {\n      accepts[j++] = mediaType;\n    }\n  } // trim accepts\n\n\n  accepts.length = j;\n  return accepts;\n}\n/**\n * Parse a media type from the Accept header.\n * @private\n */\n\n\nfunction parseMediaType(str, i) {\n  var match = simpleMediaTypeRegExp.exec(str);\n  if (!match) return null;\n  var params = Object.create(null);\n  var q = 1;\n  var subtype = match[2];\n  var type = match[1];\n\n  if (match[3]) {\n    var kvps = splitParameters(match[3]).map(splitKeyValuePair);\n\n    for (var j = 0; j < kvps.length; j++) {\n      var pair = kvps[j];\n      var key = pair[0].toLowerCase();\n      var val = pair[1]; // get the value, unwrapping quotes\n\n      var value = val && val[0] === '\"' && val[val.length - 1] === '\"' ? val.substr(1, val.length - 2) : val;\n\n      if (key === 'q') {\n        q = parseFloat(value);\n        break;\n      } // store parameter\n\n\n      params[key] = value;\n    }\n  }\n\n  return {\n    type: type,\n    subtype: subtype,\n    params: params,\n    q: q,\n    i: i\n  };\n}\n/**\n * Get the priority of a media type.\n * @private\n */\n\n\nfunction getMediaTypePriority(type, accepted, index) {\n  var priority = {\n    o: -1,\n    q: 0,\n    s: 0\n  };\n\n  for (var i = 0; i < accepted.length; i++) {\n    var spec = specify(type, accepted[i], index);\n\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n      priority = spec;\n    }\n  }\n\n  return priority;\n}\n/**\n * Get the specificity of the media type.\n * @private\n */\n\n\nfunction specify(type, spec, index) {\n  var p = parseMediaType(type);\n  var s = 0;\n\n  if (!p) {\n    return null;\n  }\n\n  if (spec.type.toLowerCase() == p.type.toLowerCase()) {\n    s |= 4;\n  } else if (spec.type != '*') {\n    return null;\n  }\n\n  if (spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {\n    s |= 2;\n  } else if (spec.subtype != '*') {\n    return null;\n  }\n\n  var keys = Object.keys(spec.params);\n\n  if (keys.length > 0) {\n    if (keys.every(function (k) {\n      return spec.params[k] == '*' || (spec.params[k] || '').toLowerCase() == (p.params[k] || '').toLowerCase();\n    })) {\n      s |= 1;\n    } else {\n      return null;\n    }\n  }\n\n  return {\n    i: index,\n    o: spec.i,\n    q: spec.q,\n    s: s\n  };\n}\n/**\n * Get the preferred media types from an Accept header.\n * @public\n */\n\n\nfunction preferredMediaTypes(accept, provided) {\n  // RFC 2616 sec 14.2: no header = */*\n  var accepts = parseAccept(accept === undefined ? '*/*' : accept || '');\n\n  if (!provided) {\n    // sorted list of all types\n    return accepts.filter(isQuality).sort(compareSpecs).map(getFullType);\n  }\n\n  var priorities = provided.map(function getPriority(type, index) {\n    return getMediaTypePriority(type, accepts, index);\n  }); // sorted list of accepted types\n\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {\n    return provided[priorities.indexOf(priority)];\n  });\n}\n/**\n * Compare two specs.\n * @private\n */\n\n\nfunction compareSpecs(a, b) {\n  return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;\n}\n/**\n * Get full type string.\n * @private\n */\n\n\nfunction getFullType(spec) {\n  return spec.type + '/' + spec.subtype;\n}\n/**\n * Check if a spec has any quality.\n * @private\n */\n\n\nfunction isQuality(spec) {\n  return spec.q > 0;\n}\n/**\n * Count the number of quotes in a string.\n * @private\n */\n\n\nfunction quoteCount(string) {\n  var count = 0;\n  var index = 0;\n\n  while ((index = string.indexOf('\"', index)) !== -1) {\n    count++;\n    index++;\n  }\n\n  return count;\n}\n/**\n * Split a key value pair.\n * @private\n */\n\n\nfunction splitKeyValuePair(str) {\n  var index = str.indexOf('=');\n  var key;\n  var val;\n\n  if (index === -1) {\n    key = str;\n  } else {\n    key = str.substr(0, index);\n    val = str.substr(index + 1);\n  }\n\n  return [key, val];\n}\n/**\n * Split an Accept header into media types.\n * @private\n */\n\n\nfunction splitMediaTypes(accept) {\n  var accepts = accept.split(',');\n\n  for (var i = 1, j = 0; i < accepts.length; i++) {\n    if (quoteCount(accepts[j]) % 2 == 0) {\n      accepts[++j] = accepts[i];\n    } else {\n      accepts[j] += ',' + accepts[i];\n    }\n  } // trim accepts\n\n\n  accepts.length = j + 1;\n  return accepts;\n}\n/**\n * Split a string of parameters.\n * @private\n */\n\n\nfunction splitParameters(str) {\n  var parameters = str.split(';');\n\n  for (var i = 1, j = 0; i < parameters.length; i++) {\n    if (quoteCount(parameters[j]) % 2 == 0) {\n      parameters[++j] = parameters[i];\n    } else {\n      parameters[j] += ';' + parameters[i];\n    }\n  } // trim parameters\n\n\n  parameters.length = j + 1;\n\n  for (var i = 0; i < parameters.length; i++) {\n    parameters[i] = parameters[i].trim();\n  }\n\n  return parameters;\n}","map":{"version":3,"sources":["/Users/admin/Desktop/Newsletter-Signup/Full-Stack-Project-Assessment/client/node_modules/negotiator/lib/mediaType.js"],"names":["module","exports","preferredMediaTypes","simpleMediaTypeRegExp","parseAccept","accept","accepts","splitMediaTypes","i","j","length","mediaType","parseMediaType","trim","str","match","exec","params","Object","create","q","subtype","type","kvps","splitParameters","map","splitKeyValuePair","pair","key","toLowerCase","val","value","substr","parseFloat","getMediaTypePriority","accepted","index","priority","o","s","spec","specify","p","keys","every","k","provided","undefined","filter","isQuality","sort","compareSpecs","getFullType","priorities","getPriority","getType","indexOf","a","b","quoteCount","string","count","split","parameters"],"mappings":"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","sourcesContent":["/**\n * negotiator\n * Copyright(c) 2012 Isaac Z. Schlueter\n * Copyright(c) 2014 Federico Romero\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = preferredMediaTypes;\nmodule.exports.preferredMediaTypes = preferredMediaTypes;\n\n/**\n * Module variables.\n * @private\n */\n\nvar simpleMediaTypeRegExp = /^\\s*([^\\s\\/;]+)\\/([^;\\s]+)\\s*(?:;(.*))?$/;\n\n/**\n * Parse the Accept header.\n * @private\n */\n\nfunction parseAccept(accept) {\n  var accepts = splitMediaTypes(accept);\n\n  for (var i = 0, j = 0; i < accepts.length; i++) {\n    var mediaType = parseMediaType(accepts[i].trim(), i);\n\n    if (mediaType) {\n      accepts[j++] = mediaType;\n    }\n  }\n\n  // trim accepts\n  accepts.length = j;\n\n  return accepts;\n}\n\n/**\n * Parse a media type from the Accept header.\n * @private\n */\n\nfunction parseMediaType(str, i) {\n  var match = simpleMediaTypeRegExp.exec(str);\n  if (!match) return null;\n\n  var params = Object.create(null);\n  var q = 1;\n  var subtype = match[2];\n  var type = match[1];\n\n  if (match[3]) {\n    var kvps = splitParameters(match[3]).map(splitKeyValuePair);\n\n    for (var j = 0; j < kvps.length; j++) {\n      var pair = kvps[j];\n      var key = pair[0].toLowerCase();\n      var val = pair[1];\n\n      // get the value, unwrapping quotes\n      var value = val && val[0] === '\"' && val[val.length - 1] === '\"'\n        ? val.substr(1, val.length - 2)\n        : val;\n\n      if (key === 'q') {\n        q = parseFloat(value);\n        break;\n      }\n\n      // store parameter\n      params[key] = value;\n    }\n  }\n\n  return {\n    type: type,\n    subtype: subtype,\n    params: params,\n    q: q,\n    i: i\n  };\n}\n\n/**\n * Get the priority of a media type.\n * @private\n */\n\nfunction getMediaTypePriority(type, accepted, index) {\n  var priority = {o: -1, q: 0, s: 0};\n\n  for (var i = 0; i < accepted.length; i++) {\n    var spec = specify(type, accepted[i], index);\n\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n      priority = spec;\n    }\n  }\n\n  return priority;\n}\n\n/**\n * Get the specificity of the media type.\n * @private\n */\n\nfunction specify(type, spec, index) {\n  var p = parseMediaType(type);\n  var s = 0;\n\n  if (!p) {\n    return null;\n  }\n\n  if(spec.type.toLowerCase() == p.type.toLowerCase()) {\n    s |= 4\n  } else if(spec.type != '*') {\n    return null;\n  }\n\n  if(spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {\n    s |= 2\n  } else if(spec.subtype != '*') {\n    return null;\n  }\n\n  var keys = Object.keys(spec.params);\n  if (keys.length > 0) {\n    if (keys.every(function (k) {\n      return spec.params[k] == '*' || (spec.params[k] || '').toLowerCase() == (p.params[k] || '').toLowerCase();\n    })) {\n      s |= 1\n    } else {\n      return null\n    }\n  }\n\n  return {\n    i: index,\n    o: spec.i,\n    q: spec.q,\n    s: s,\n  }\n}\n\n/**\n * Get the preferred media types from an Accept header.\n * @public\n */\n\nfunction preferredMediaTypes(accept, provided) {\n  // RFC 2616 sec 14.2: no header = */*\n  var accepts = parseAccept(accept === undefined ? '*/*' : accept || '');\n\n  if (!provided) {\n    // sorted list of all types\n    return accepts\n      .filter(isQuality)\n      .sort(compareSpecs)\n      .map(getFullType);\n  }\n\n  var priorities = provided.map(function getPriority(type, index) {\n    return getMediaTypePriority(type, accepts, index);\n  });\n\n  // sorted list of accepted types\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {\n    return provided[priorities.indexOf(priority)];\n  });\n}\n\n/**\n * Compare two specs.\n * @private\n */\n\nfunction compareSpecs(a, b) {\n  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;\n}\n\n/**\n * Get full type string.\n * @private\n */\n\nfunction getFullType(spec) {\n  return spec.type + '/' + spec.subtype;\n}\n\n/**\n * Check if a spec has any quality.\n * @private\n */\n\nfunction isQuality(spec) {\n  return spec.q > 0;\n}\n\n/**\n * Count the number of quotes in a string.\n * @private\n */\n\nfunction quoteCount(string) {\n  var count = 0;\n  var index = 0;\n\n  while ((index = string.indexOf('\"', index)) !== -1) {\n    count++;\n    index++;\n  }\n\n  return count;\n}\n\n/**\n * Split a key value pair.\n * @private\n */\n\nfunction splitKeyValuePair(str) {\n  var index = str.indexOf('=');\n  var key;\n  var val;\n\n  if (index === -1) {\n    key = str;\n  } else {\n    key = str.substr(0, index);\n    val = str.substr(index + 1);\n  }\n\n  return [key, val];\n}\n\n/**\n * Split an Accept header into media types.\n * @private\n */\n\nfunction splitMediaTypes(accept) {\n  var accepts = accept.split(',');\n\n  for (var i = 1, j = 0; i < accepts.length; i++) {\n    if (quoteCount(accepts[j]) % 2 == 0) {\n      accepts[++j] = accepts[i];\n    } else {\n      accepts[j] += ',' + accepts[i];\n    }\n  }\n\n  // trim accepts\n  accepts.length = j + 1;\n\n  return accepts;\n}\n\n/**\n * Split a string of parameters.\n * @private\n */\n\nfunction splitParameters(str) {\n  var parameters = str.split(';');\n\n  for (var i = 1, j = 0; i < parameters.length; i++) {\n    if (quoteCount(parameters[j]) % 2 == 0) {\n      parameters[++j] = parameters[i];\n    } else {\n      parameters[j] += ';' + parameters[i];\n    }\n  }\n\n  // trim parameters\n  parameters.length = j + 1;\n\n  for (var i = 0; i < parameters.length; i++) {\n    parameters[i] = parameters[i].trim();\n  }\n\n  return parameters;\n}\n"]},"metadata":{},"sourceType":"script"}