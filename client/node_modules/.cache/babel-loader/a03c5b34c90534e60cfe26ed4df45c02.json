{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { DropdownContext } from '../useDropdown/DropdownContext';\nimport { DropdownActionTypes } from '../useDropdown/useDropdown.types';\nimport { useButton } from '../useButton/useButton';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Menu](https://mui.com/base-ui/react-menu/#hooks)\r\n *\r\n * API:\r\n *\r\n * - [useMenuButton API](https://mui.com/base-ui/react-menu/hooks-api/#use-menu-button)\r\n */\n\nexport function useMenuButton() {\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    disabled = false,\n    focusableWhenDisabled,\n    rootRef: externalRef\n  } = parameters;\n  const menuContext = React.useContext(DropdownContext);\n\n  if (menuContext === null) {\n    throw new Error('useMenuButton: no menu context available.');\n  }\n\n  const {\n    state,\n    dispatch,\n    registerTrigger,\n    popupId\n  } = menuContext;\n  const {\n    getRootProps: getButtonRootProps,\n    rootRef: buttonRootRef,\n    active\n  } = useButton({\n    disabled,\n    focusableWhenDisabled,\n    rootRef: externalRef\n  });\n  const handleRef = useForkRef(buttonRootRef, registerTrigger);\n\n  const createHandleClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n\n    (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    dispatch({\n      type: DropdownActionTypes.toggle,\n      event\n    });\n  };\n\n  const createHandleKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      dispatch({\n        type: DropdownActionTypes.open,\n        event\n      });\n    }\n  };\n\n  const getOwnRootProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      onClick: createHandleClick(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers)\n    };\n  };\n\n  const getRootProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const getCombinedProps = combineHooksSlotProps(getButtonRootProps, getOwnRootProps);\n    return _extends({}, getCombinedProps(otherHandlers), {\n      'aria-haspopup': 'menu',\n      'aria-expanded': state.open,\n      'aria-controls': popupId,\n      ref: handleRef\n    });\n  };\n\n  return {\n    active,\n    getRootProps,\n    open: state.open,\n    rootRef: handleRef\n  };\n}","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/@mui/base/useMenuButton/useMenuButton.js"],"names":["_extends","React","unstable_useForkRef","useForkRef","DropdownContext","DropdownActionTypes","useButton","combineHooksSlotProps","useMenuButton","parameters","disabled","focusableWhenDisabled","rootRef","externalRef","menuContext","useContext","Error","state","dispatch","registerTrigger","popupId","getRootProps","getButtonRootProps","buttonRootRef","active","handleRef","createHandleClick","otherHandlers","event","_otherHandlers$onClic","onClick","call","defaultMuiPrevented","type","toggle","createHandleKeyDown","_otherHandlers$onKeyD","onKeyDown","key","preventDefault","open","getOwnRootProps","getCombinedProps","ref"],"mappings":"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","sourcesContent":["'use client';\r\n\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport * as React from 'react';\r\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\r\nimport { DropdownContext } from '../useDropdown/DropdownContext';\r\nimport { DropdownActionTypes } from '../useDropdown/useDropdown.types';\r\nimport { useButton } from '../useButton/useButton';\r\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\r\n\r\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Menu](https://mui.com/base-ui/react-menu/#hooks)\r\n *\r\n * API:\r\n *\r\n * - [useMenuButton API](https://mui.com/base-ui/react-menu/hooks-api/#use-menu-button)\r\n */\r\nexport function useMenuButton(parameters = {}) {\r\n  const {\r\n    disabled = false,\r\n    focusableWhenDisabled,\r\n    rootRef: externalRef\r\n  } = parameters;\r\n  const menuContext = React.useContext(DropdownContext);\r\n  if (menuContext === null) {\r\n    throw new Error('useMenuButton: no menu context available.');\r\n  }\r\n  const {\r\n    state,\r\n    dispatch,\r\n    registerTrigger,\r\n    popupId\r\n  } = menuContext;\r\n  const {\r\n    getRootProps: getButtonRootProps,\r\n    rootRef: buttonRootRef,\r\n    active\r\n  } = useButton({\r\n    disabled,\r\n    focusableWhenDisabled,\r\n    rootRef: externalRef\r\n  });\r\n  const handleRef = useForkRef(buttonRootRef, registerTrigger);\r\n  const createHandleClick = otherHandlers => event => {\r\n    var _otherHandlers$onClic;\r\n    (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\r\n    if (event.defaultMuiPrevented) {\r\n      return;\r\n    }\r\n    dispatch({\r\n      type: DropdownActionTypes.toggle,\r\n      event\r\n    });\r\n  };\r\n  const createHandleKeyDown = otherHandlers => event => {\r\n    var _otherHandlers$onKeyD;\r\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);\r\n    if (event.defaultMuiPrevented) {\r\n      return;\r\n    }\r\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\r\n      event.preventDefault();\r\n      dispatch({\r\n        type: DropdownActionTypes.open,\r\n        event\r\n      });\r\n    }\r\n  };\r\n  const getOwnRootProps = (otherHandlers = {}) => ({\r\n    onClick: createHandleClick(otherHandlers),\r\n    onKeyDown: createHandleKeyDown(otherHandlers)\r\n  });\r\n  const getRootProps = (otherHandlers = {}) => {\r\n    const getCombinedProps = combineHooksSlotProps(getButtonRootProps, getOwnRootProps);\r\n    return _extends({}, getCombinedProps(otherHandlers), {\r\n      'aria-haspopup': 'menu',\r\n      'aria-expanded': state.open,\r\n      'aria-controls': popupId,\r\n      ref: handleRef\r\n    });\r\n  };\r\n  return {\r\n    active,\r\n    getRootProps,\r\n    open: state.open,\r\n    rootRef: handleRef\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}