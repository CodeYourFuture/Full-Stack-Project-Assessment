{"ast":null,"code":"'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\nimport transitionalDefaults from './transitional.js';\nimport toFormData from '../helpers/toFormData.js';\nimport toURLEncodedForm from '../helpers/toURLEncodedForm.js';\nimport platform from '../platform/index.js';\nimport formDataToJSON from '../helpers/formDataToJSON.js';\nconst DEFAULT_CONTENT_TYPE = {\n  'Content-Type': undefined\n};\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */\n\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nconst defaults = {\n  transitional: transitionalDefaults,\n  adapter: ['xhr', 'http'],\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || '';\n    const hasJSONContentType = contentType.indexOf('application/json') > -1;\n    const isObjectPayload = utils.isObject(data);\n\n    if (isObjectPayload && utils.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n\n    const isFormData = utils.isFormData(data);\n\n    if (isFormData) {\n      if (!hasJSONContentType) {\n        return data;\n      }\n\n      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;\n    }\n\n    if (utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n      return data;\n    }\n\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n\n    if (utils.isURLSearchParams(data)) {\n      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);\n      return data.toString();\n    }\n\n    let isFileList;\n\n    if (isObjectPayload) {\n      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n\n      if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {\n        const _FormData = this.env && this.env.FormData;\n\n        return toFormData(isFileList ? {\n          'files[]': data\n        } : data, _FormData && new _FormData(), this.formSerializer);\n      }\n    }\n\n    if (isObjectPayload || hasJSONContentType) {\n      headers.setContentType('application/json', false);\n      return stringifySafely(data);\n    }\n\n    return data;\n  }],\n  transformResponse: [function transformResponse(data) {\n    const transitional = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    const JSONRequested = this.responseType === 'json';\n\n    if (data && utils.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {\n      const silentJSONParsing = transitional && transitional.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n  maxContentLength: -1,\n  maxBodyLength: -1,\n  env: {\n    FormData: platform.classes.FormData,\n    Blob: platform.classes.Blob\n  },\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  }\n};\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\nexport default defaults;","map":{"version":3,"sources":["/Users/roozbehshokri/Documents/GitHub/Full-Stack-Project-Assessment/client/node_modules/axios/lib/defaults/index.js"],"names":["utils","AxiosError","transitionalDefaults","toFormData","toURLEncodedForm","platform","formDataToJSON","DEFAULT_CONTENT_TYPE","undefined","stringifySafely","rawValue","parser","encoder","isString","JSON","parse","trim","e","name","stringify","defaults","transitional","adapter","transformRequest","data","headers","contentType","getContentType","hasJSONContentType","indexOf","isObjectPayload","isObject","isHTMLForm","FormData","isFormData","isArrayBuffer","isBuffer","isStream","isFile","isBlob","isArrayBufferView","buffer","isURLSearchParams","setContentType","toString","isFileList","formSerializer","_FormData","env","transformResponse","forcedJSONParsing","JSONRequested","responseType","silentJSONParsing","strictJSONParsing","from","ERR_BAD_RESPONSE","response","timeout","xsrfCookieName","xsrfHeaderName","maxContentLength","maxBodyLength","classes","Blob","validateStatus","status","common","forEach","forEachMethodNoData","method","forEachMethodWithData","merge"],"mappings":"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","sourcesContent":["'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\nimport transitionalDefaults from './transitional.js';\nimport toFormData from '../helpers/toFormData.js';\nimport toURLEncodedForm from '../helpers/toURLEncodedForm.js';\nimport platform from '../platform/index.js';\nimport formDataToJSON from '../helpers/formDataToJSON.js';\n\nconst DEFAULT_CONTENT_TYPE = {\n  'Content-Type': undefined\n};\n\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nconst defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: ['xhr', 'http'],\n\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || '';\n    const hasJSONContentType = contentType.indexOf('application/json') > -1;\n    const isObjectPayload = utils.isObject(data);\n\n    if (isObjectPayload && utils.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n\n    const isFormData = utils.isFormData(data);\n\n    if (isFormData) {\n      if (!hasJSONContentType) {\n        return data;\n      }\n      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;\n    }\n\n    if (utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);\n      return data.toString();\n    }\n\n    let isFileList;\n\n    if (isObjectPayload) {\n      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n\n      if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {\n        const _FormData = this.env && this.env.FormData;\n\n        return toFormData(\n          isFileList ? {'files[]': data} : data,\n          _FormData && new _FormData(),\n          this.formSerializer\n        );\n      }\n    }\n\n    if (isObjectPayload || hasJSONContentType ) {\n      headers.setContentType('application/json', false);\n      return stringifySafely(data);\n    }\n\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    const transitional = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    const JSONRequested = this.responseType === 'json';\n\n    if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {\n      const silentJSONParsing = transitional && transitional.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  env: {\n    FormData: platform.classes.FormData,\n    Blob: platform.classes.Blob\n  },\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nexport default defaults;\n"]},"metadata":{},"sourceType":"module"}