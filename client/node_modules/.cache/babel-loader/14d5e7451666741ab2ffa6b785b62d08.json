{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng; // Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","map":{"version":3,"sources":["/home/baki/Desktop/codeyourfuture/Full-Stack-Project-Assessment/client/node_modules/uuid/dist/commonjs-browser/rng.js"],"names":["Object","defineProperty","exports","value","default","rng","getRandomValues","rnds8","Uint8Array","crypto","bind","Error"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,GAAlB,C,CACA;AACA;AACA;;AACA,IAAIC,eAAJ;AACA,MAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAe,EAAf,CAAd;;AAEA,SAASH,GAAT,GAAe;AACb;AACA,MAAI,CAACC,eAAL,EAAsB;AACpB;AACAA,IAAAA,eAAe,GAAG,OAAOG,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACH,eAAxC,IAA2DG,MAAM,CAACH,eAAP,CAAuBI,IAAvB,CAA4BD,MAA5B,CAA7E;;AAEA,QAAI,CAACH,eAAL,EAAsB;AACpB,YAAM,IAAIK,KAAJ,CAAU,0GAAV,CAAN;AACD;AACF;;AAED,SAAOL,eAAe,CAACC,KAAD,CAAtB;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}"]},"metadata":{},"sourceType":"script"}