{"ast":null,"code":"var _jsxFileName = \"/home/baki/Desktop/codeyourfuture/Full-Stack-Project-Assessment/client/src/components/VideoList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport YouTubeVideo from './YoutubeVideo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst VideoList = () => {\n  _s();\n\n  const [videos, setVideos] = useState([]);\n  useEffect(() => {\n    // Fetch the list of videos from your API\n    fetch('http://127.0.0.1:5000/').then(response => response.json()).then(data => setVideos(data)).catch(error => console.error('Error fetching videos:', error));\n  }, []);\n\n  const handleUpVote = videoId => {\n    // Send a PUT request to update the votes for the video in your API\n    fetch(`http://127.0.0.1:5000/${videoId}/upvote`, {\n      method: 'PUT'\n    }).then(() => {\n      // Update the local state after the vote is recorded in the API\n      const updatedVideos = videos.map(video => video.id === videoId ? { ...video,\n        votes: video.votes + 1\n      } : video);\n      setVideos(updatedVideos);\n    }).catch(error => console.error('Error upvoting video:', error));\n  };\n\n  const handleDownVote = videoId => {\n    // Send a PUT request to update the votes for the video in your API\n    fetch(`http://127.0.0.1:5000/${videoId}/downvote`, {\n      method: 'PUT'\n    }).then(() => {\n      // Update the local state after the vote is recorded in the API\n      const updatedVideos = videos.map(video => video.id === videoId ? { ...video,\n        votes: video.votes - 1\n      } : video);\n      setVideos(updatedVideos);\n    }).catch(error => console.error('Error downvoting video:', error));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"List of Videos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), videos.map(video => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: video.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Uploaded on: \", new Date(video.uploadDate).toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(YouTubeVideo, {\n        videoId: video.youtubeVideoId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Votes: \", video.votes]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleUpVote(video.id),\n        children: \"Up Vote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDownVote(video.id),\n        children: \"Down Vote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, video.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(VideoList, \"39g9r2hk3cJXA16k+db4Z3Rqykw=\");\n\n_c = VideoList;\nexport default VideoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoList\");","map":{"version":3,"sources":["/home/baki/Desktop/codeyourfuture/Full-Stack-Project-Assessment/client/src/components/VideoList.jsx"],"names":["React","useState","useEffect","YouTubeVideo","VideoList","videos","setVideos","fetch","then","response","json","data","catch","error","console","handleUpVote","videoId","method","updatedVideos","map","video","id","votes","handleDownVote","title","Date","uploadDate","toLocaleString","youtubeVideoId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport YouTubeVideo from './YoutubeVideo';\n\nconst VideoList = () => {\n  const [videos, setVideos] = useState([]);\n\n  useEffect(() => {\n    // Fetch the list of videos from your API\n    fetch('http://127.0.0.1:5000/')\n      .then((response) => response.json())\n      .then((data) => setVideos(data))\n      .catch((error) => console.error('Error fetching videos:', error));\n  }, []);\n\n  const handleUpVote = (videoId) => {\n    // Send a PUT request to update the votes for the video in your API\n    fetch(`http://127.0.0.1:5000/${videoId}/upvote`, {\n      method: 'PUT',\n    })\n      .then(() => {\n        // Update the local state after the vote is recorded in the API\n        const updatedVideos = videos.map((video) =>\n          video.id === videoId ? { ...video, votes: video.votes + 1 } : video\n        );\n        setVideos(updatedVideos);\n      })\n      .catch((error) => console.error('Error upvoting video:', error));\n  };\n\n  const handleDownVote = (videoId) => {\n    // Send a PUT request to update the votes for the video in your API\n    fetch(`http://127.0.0.1:5000/${videoId}/downvote`, {\n      method: 'PUT',\n    })\n      .then(() => {\n        // Update the local state after the vote is recorded in the API\n        const updatedVideos = videos.map((video) =>\n          video.id === videoId ? { ...video, votes: video.votes - 1 } : video\n        );\n        setVideos(updatedVideos);\n      })\n      .catch((error) => console.error('Error downvoting video:', error));\n  };\n\n  return (\n    <div>\n      <h2>List of Videos</h2>\n      {videos.map((video) => (\n        <div key={video.id}>\n          <h3>{video.title}</h3>\n          <p>Uploaded on: {new Date(video.uploadDate).toLocaleString()}</p>\n          <YouTubeVideo videoId={video.youtubeVideoId} />\n          <p>Votes: {video.votes}</p>\n          <button onClick={() => handleUpVote(video.id)}>Up Vote</button>\n          <button onClick={() => handleDownVote(video.id)}>Down Vote</button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default VideoList;\n"]},"metadata":{},"sourceType":"module"}