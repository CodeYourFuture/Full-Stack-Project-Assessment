{"ast":null,"code":"var _jsxFileName = \"/home/baki/Desktop/codeyourfuture/Full-Stack-Project-Assessment/client/src/components/AddVideo.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddVideo = _ref => {\n  _s();\n\n  let {\n    onAddVideo\n  } = _ref;\n  const [title, setTitle] = useState('');\n  const [url, setUrl] = useState('');\n\n  const handleAddVideo = () => {\n    if (title.trim() === '' || !isValidYouTubeUrl(url)) {\n      alert('Please enter a valid title and a valid YouTube URL.');\n      return;\n    } // Validate if the URL is a YouTube video URL and extract the video ID\n\n\n    const videoId = getYouTubeVideoIdFromUrl(url); // Generate a unique ID using the counter\n\n    const newVideo = {\n      id: Date.now(),\n      // Use the current timestamp as the ID (not recommended for production)\n      title,\n      youtubeVideoId: videoId,\n      // Extracted video ID\n      votes: 0,\n      uploadDate: new Date()\n    }; // Call the parent component's function to add the video\n\n    onAddVideo(newVideo); // Reset the input fields\n\n    setTitle('');\n    setUrl('');\n  }; // Function to check if a string is a valid YouTube URL\n\n\n  const isValidYouTubeUrl = url => {\n    // Add your validation logic here\n    // For a simple example, you can check if the URL includes 'youtube.com'\n    return url.includes('youtube.com');\n  }; // Function to extract the video ID from a YouTube URL (similar to previous examples)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add a New Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Title:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: title,\n        onChange: e => setTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"YouTube URL:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: url,\n        onChange: e => setUrl(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddVideo,\n      children: \"Add Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddVideo, \"72MpAzgDUQlEdTFufuGkfu+ySnY=\");\n\n_c = AddVideo;\nexport default AddVideo;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddVideo\");","map":{"version":3,"sources":["/home/baki/Desktop/codeyourfuture/Full-Stack-Project-Assessment/client/src/components/AddVideo.jsx"],"names":["React","useState","AddVideo","onAddVideo","title","setTitle","url","setUrl","handleAddVideo","trim","isValidYouTubeUrl","alert","videoId","getYouTubeVideoIdFromUrl","newVideo","id","Date","now","youtubeVideoId","votes","uploadDate","includes","e","target","value"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,QAAQ,GAAG,QAAoB;AAAA;;AAAA,MAAnB;AAAEC,IAAAA;AAAF,GAAmB;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACK,GAAD,EAAMC,MAAN,IAAgBN,QAAQ,CAAC,EAAD,CAA9B;;AAEA,QAAMO,cAAc,GAAG,MAAM;AAC3B,QAAIJ,KAAK,CAACK,IAAN,OAAiB,EAAjB,IAAuB,CAACC,iBAAiB,CAACJ,GAAD,CAA7C,EAAoD;AAClDK,MAAAA,KAAK,CAAC,qDAAD,CAAL;AACA;AACD,KAJ0B,CAM3B;;;AACA,UAAMC,OAAO,GAAGC,wBAAwB,CAACP,GAAD,CAAxC,CAP2B,CAS3B;;AACA,UAAMQ,QAAQ,GAAG;AACfC,MAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EADW;AACC;AAChBb,MAAAA,KAFe;AAGfc,MAAAA,cAAc,EAAEN,OAHD;AAGU;AACzBO,MAAAA,KAAK,EAAE,CAJQ;AAKfC,MAAAA,UAAU,EAAE,IAAIJ,IAAJ;AALG,KAAjB,CAV2B,CAkB3B;;AACAb,IAAAA,UAAU,CAACW,QAAD,CAAV,CAnB2B,CAqB3B;;AACAT,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,IAAAA,MAAM,CAAC,EAAD,CAAN;AACD,GAxBD,CAJmC,CA8BnC;;;AACA,QAAMG,iBAAiB,GAAIJ,GAAD,IAAS;AACjC;AACA;AACA,WAAOA,GAAG,CAACe,QAAJ,CAAa,aAAb,CAAP;AACD,GAJD,CA/BmC,CAqCnC;;;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,wCAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAEjB,KAA1B;AAAiC,QAAA,QAAQ,EAAGkB,CAAD,IAAOjB,QAAQ,CAACiB,CAAC,CAACC,MAAF,CAASC,KAAV;AAA1D;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAME;AAAA,8CAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAElB,GAA1B;AAA+B,QAAA,QAAQ,EAAGgB,CAAD,IAAOf,MAAM,CAACe,CAAC,CAACC,MAAF,CAASC,KAAV;AAAtD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,eAUE;AAAQ,MAAA,OAAO,EAAEhB,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CArDD;;GAAMN,Q;;KAAAA,Q;AAuDN,eAAeA,QAAf","sourcesContent":["\nimport React, { useState } from 'react';\n\nconst AddVideo = ({ onAddVideo }) => {\n  const [title, setTitle] = useState('');\n  const [url, setUrl] = useState('');\n\n  const handleAddVideo = () => {\n    if (title.trim() === '' || !isValidYouTubeUrl(url)) {\n      alert('Please enter a valid title and a valid YouTube URL.');\n      return;\n    }\n\n    // Validate if the URL is a YouTube video URL and extract the video ID\n    const videoId = getYouTubeVideoIdFromUrl(url);\n\n    // Generate a unique ID using the counter\n    const newVideo = {\n      id: Date.now(), // Use the current timestamp as the ID (not recommended for production)\n      title,\n      youtubeVideoId: videoId, // Extracted video ID\n      votes: 0,\n      uploadDate: new Date(),\n    };\n\n    // Call the parent component's function to add the video\n    onAddVideo(newVideo);\n\n    // Reset the input fields\n    setTitle('');\n    setUrl('');\n  };\n\n  // Function to check if a string is a valid YouTube URL\n  const isValidYouTubeUrl = (url) => {\n    // Add your validation logic here\n    // For a simple example, you can check if the URL includes 'youtube.com'\n    return url.includes('youtube.com');\n  };\n\n  // Function to extract the video ID from a YouTube URL (similar to previous examples)\n\n  return (\n    <div>\n      <h2>Add a New Video</h2>\n      <label>\n        Title:\n        <input type=\"text\" value={title} onChange={(e) => setTitle(e.target.value)} />\n      </label>\n      <label>\n        YouTube URL:\n        <input type=\"text\" value={url} onChange={(e) => setUrl(e.target.value)} />\n      </label>\n      <button onClick={handleAddVideo}>Add Video</button>\n    </div>\n  );\n};\n\nexport default AddVideo;\n"]},"metadata":{},"sourceType":"module"}