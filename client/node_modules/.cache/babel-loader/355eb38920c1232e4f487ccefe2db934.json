{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { elementAcceptingRef, exactProp, unstable_ownerDocument as ownerDocument, unstable_useForkRef as useForkRef, unstable_useEventCallback as useEventCallback } from '@mui/utils'; // TODO: return `EventHandlerName extends `on${infer EventName}` ? Lowercase<EventName> : never` once generatePropTypes runs with TS 4.1\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction mapEventPropToEvent(eventProp) {\n  return eventProp.substring(2).toLowerCase();\n}\n\nfunction clickedRootScrollbar(event, doc) {\n  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;\n}\n/**\r\n * Listen for click events that occur somewhere in the document, outside of the element itself.\r\n * For instance, if you need to hide a menu when people click anywhere else on your page.\r\n *\r\n * Demos:\r\n *\r\n * - [Click-Away Listener](https://mui.com/base-ui/react-click-away-listener/)\r\n *\r\n * API:\r\n *\r\n * - [ClickAwayListener API](https://mui.com/base-ui/react-click-away-listener/components-api/#click-away-listener)\r\n */\n\n\nfunction ClickAwayListener(props) {\n  const {\n    children,\n    disableReactTree = false,\n    mouseEvent = 'onClick',\n    onClickAway,\n    touchEvent = 'onTouchEnd'\n  } = props;\n  const movedRef = React.useRef(false);\n  const nodeRef = React.useRef(null);\n  const activatedRef = React.useRef(false);\n  const syntheticEventRef = React.useRef(false);\n  React.useEffect(() => {\n    // Ensure that this component is not \"activated\" synchronously.\n    // https://github.com/facebook/react/issues/20074\n    setTimeout(() => {\n      activatedRef.current = true;\n    }, 0);\n    return () => {\n      activatedRef.current = false;\n    };\n  }, []);\n  const handleRef = useForkRef( // @ts-expect-error TODO upstream fix\n  children.ref, nodeRef); // The handler doesn't take event.defaultPrevented into account:\n  //\n  // event.preventDefault() is meant to stop default behaviors like\n  // clicking a checkbox to check it, hitting a button to submit a form,\n  // and hitting left arrow to move the cursor in a text input etc.\n  // Only special HTML elements have these default behaviors.\n\n  const handleClickAway = useEventCallback(event => {\n    // Given developers can stop the propagation of the synthetic event,\n    // we can only be confident with a positive value.\n    const insideReactTree = syntheticEventRef.current;\n    syntheticEventRef.current = false;\n    const doc = ownerDocument(nodeRef.current); // 1. IE11 support, which trigger the handleClickAway even after the unbind\n    // 2. The child might render null.\n    // 3. Behave like a blur listener.\n\n    if (!activatedRef.current || !nodeRef.current || 'clientX' in event && clickedRootScrollbar(event, doc)) {\n      return;\n    } // Do not act if user performed touchmove\n\n\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    let insideDOM; // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js\n\n    if (event.composedPath) {\n      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;\n    } else {\n      insideDOM = !doc.documentElement.contains( // @ts-expect-error returns `false` as intended when not dispatched from a Node\n      event.target) || nodeRef.current.contains( // @ts-expect-error returns `false` as intended when not dispatched from a Node\n      event.target);\n    }\n\n    if (!insideDOM && (disableReactTree || !insideReactTree)) {\n      onClickAway(event);\n    }\n  }); // Keep track of mouse/touch events that bubbled up through the portal.\n\n  const createHandleSynthetic = handlerName => event => {\n    syntheticEventRef.current = true;\n    const childrenPropsHandler = children.props[handlerName];\n\n    if (childrenPropsHandler) {\n      childrenPropsHandler(event);\n    }\n  };\n\n  const childrenProps = {\n    ref: handleRef\n  };\n\n  if (touchEvent !== false) {\n    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);\n  }\n\n  React.useEffect(() => {\n    if (touchEvent !== false) {\n      const mappedTouchEvent = mapEventPropToEvent(touchEvent);\n      const doc = ownerDocument(nodeRef.current);\n\n      const handleTouchMove = () => {\n        movedRef.current = true;\n      };\n\n      doc.addEventListener(mappedTouchEvent, handleClickAway);\n      doc.addEventListener('touchmove', handleTouchMove);\n      return () => {\n        doc.removeEventListener(mappedTouchEvent, handleClickAway);\n        doc.removeEventListener('touchmove', handleTouchMove);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, touchEvent]);\n\n  if (mouseEvent !== false) {\n    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);\n  }\n\n  React.useEffect(() => {\n    if (mouseEvent !== false) {\n      const mappedMouseEvent = mapEventPropToEvent(mouseEvent);\n      const doc = ownerDocument(nodeRef.current);\n      doc.addEventListener(mappedMouseEvent, handleClickAway);\n      return () => {\n        doc.removeEventListener(mappedMouseEvent, handleClickAway);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, mouseEvent]);\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: /*#__PURE__*/React.cloneElement(children, childrenProps)\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The wrapped element.\r\n   */\n  children: elementAcceptingRef.isRequired,\n\n  /**\r\n   * If `true`, the React tree is ignored and only the DOM tree is considered.\r\n   * This prop changes how portaled elements are handled.\r\n   * @default false\r\n   */\n  disableReactTree: PropTypes.bool,\n\n  /**\r\n   * The mouse event to listen to. You can disable the listener by providing `false`.\r\n   * @default 'onClick'\r\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', 'onPointerDown', 'onPointerUp', false]),\n\n  /**\r\n   * Callback fired when a \"click away\" event is detected.\r\n   */\n  onClickAway: PropTypes.func.isRequired,\n\n  /**\r\n   * The touch event to listen to. You can disable the listener by providing `false`.\r\n   * @default 'onTouchEnd'\r\n   */\n  touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);\n}\n\nexport { ClickAwayListener };","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/@mui/base/ClickAwayListener/ClickAwayListener.js"],"names":["React","PropTypes","elementAcceptingRef","exactProp","unstable_ownerDocument","ownerDocument","unstable_useForkRef","useForkRef","unstable_useEventCallback","useEventCallback","jsx","_jsx","mapEventPropToEvent","eventProp","substring","toLowerCase","clickedRootScrollbar","event","doc","documentElement","clientWidth","clientX","clientHeight","clientY","ClickAwayListener","props","children","disableReactTree","mouseEvent","onClickAway","touchEvent","movedRef","useRef","nodeRef","activatedRef","syntheticEventRef","useEffect","setTimeout","current","handleRef","ref","handleClickAway","insideReactTree","insideDOM","composedPath","indexOf","contains","target","createHandleSynthetic","handlerName","childrenPropsHandler","childrenProps","mappedTouchEvent","handleTouchMove","addEventListener","removeEventListener","undefined","mappedMouseEvent","Fragment","cloneElement","process","env","NODE_ENV","propTypes","isRequired","bool","oneOf","func"],"mappings":"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","sourcesContent":["'use client';\r\n\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { elementAcceptingRef, exactProp, unstable_ownerDocument as ownerDocument, unstable_useForkRef as useForkRef, unstable_useEventCallback as useEventCallback } from '@mui/utils';\r\n\r\n// TODO: return `EventHandlerName extends `on${infer EventName}` ? Lowercase<EventName> : never` once generatePropTypes runs with TS 4.1\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nfunction mapEventPropToEvent(eventProp) {\r\n  return eventProp.substring(2).toLowerCase();\r\n}\r\nfunction clickedRootScrollbar(event, doc) {\r\n  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;\r\n}\r\n/**\r\n * Listen for click events that occur somewhere in the document, outside of the element itself.\r\n * For instance, if you need to hide a menu when people click anywhere else on your page.\r\n *\r\n * Demos:\r\n *\r\n * - [Click-Away Listener](https://mui.com/base-ui/react-click-away-listener/)\r\n *\r\n * API:\r\n *\r\n * - [ClickAwayListener API](https://mui.com/base-ui/react-click-away-listener/components-api/#click-away-listener)\r\n */\r\nfunction ClickAwayListener(props) {\r\n  const {\r\n    children,\r\n    disableReactTree = false,\r\n    mouseEvent = 'onClick',\r\n    onClickAway,\r\n    touchEvent = 'onTouchEnd'\r\n  } = props;\r\n  const movedRef = React.useRef(false);\r\n  const nodeRef = React.useRef(null);\r\n  const activatedRef = React.useRef(false);\r\n  const syntheticEventRef = React.useRef(false);\r\n  React.useEffect(() => {\r\n    // Ensure that this component is not \"activated\" synchronously.\r\n    // https://github.com/facebook/react/issues/20074\r\n    setTimeout(() => {\r\n      activatedRef.current = true;\r\n    }, 0);\r\n    return () => {\r\n      activatedRef.current = false;\r\n    };\r\n  }, []);\r\n  const handleRef = useForkRef(\r\n  // @ts-expect-error TODO upstream fix\r\n  children.ref, nodeRef);\r\n\r\n  // The handler doesn't take event.defaultPrevented into account:\r\n  //\r\n  // event.preventDefault() is meant to stop default behaviors like\r\n  // clicking a checkbox to check it, hitting a button to submit a form,\r\n  // and hitting left arrow to move the cursor in a text input etc.\r\n  // Only special HTML elements have these default behaviors.\r\n  const handleClickAway = useEventCallback(event => {\r\n    // Given developers can stop the propagation of the synthetic event,\r\n    // we can only be confident with a positive value.\r\n    const insideReactTree = syntheticEventRef.current;\r\n    syntheticEventRef.current = false;\r\n    const doc = ownerDocument(nodeRef.current);\r\n\r\n    // 1. IE11 support, which trigger the handleClickAway even after the unbind\r\n    // 2. The child might render null.\r\n    // 3. Behave like a blur listener.\r\n    if (!activatedRef.current || !nodeRef.current || 'clientX' in event && clickedRootScrollbar(event, doc)) {\r\n      return;\r\n    }\r\n\r\n    // Do not act if user performed touchmove\r\n    if (movedRef.current) {\r\n      movedRef.current = false;\r\n      return;\r\n    }\r\n    let insideDOM;\r\n\r\n    // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js\r\n    if (event.composedPath) {\r\n      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;\r\n    } else {\r\n      insideDOM = !doc.documentElement.contains(\r\n      // @ts-expect-error returns `false` as intended when not dispatched from a Node\r\n      event.target) || nodeRef.current.contains(\r\n      // @ts-expect-error returns `false` as intended when not dispatched from a Node\r\n      event.target);\r\n    }\r\n    if (!insideDOM && (disableReactTree || !insideReactTree)) {\r\n      onClickAway(event);\r\n    }\r\n  });\r\n\r\n  // Keep track of mouse/touch events that bubbled up through the portal.\r\n  const createHandleSynthetic = handlerName => event => {\r\n    syntheticEventRef.current = true;\r\n    const childrenPropsHandler = children.props[handlerName];\r\n    if (childrenPropsHandler) {\r\n      childrenPropsHandler(event);\r\n    }\r\n  };\r\n  const childrenProps = {\r\n    ref: handleRef\r\n  };\r\n  if (touchEvent !== false) {\r\n    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);\r\n  }\r\n  React.useEffect(() => {\r\n    if (touchEvent !== false) {\r\n      const mappedTouchEvent = mapEventPropToEvent(touchEvent);\r\n      const doc = ownerDocument(nodeRef.current);\r\n      const handleTouchMove = () => {\r\n        movedRef.current = true;\r\n      };\r\n      doc.addEventListener(mappedTouchEvent, handleClickAway);\r\n      doc.addEventListener('touchmove', handleTouchMove);\r\n      return () => {\r\n        doc.removeEventListener(mappedTouchEvent, handleClickAway);\r\n        doc.removeEventListener('touchmove', handleTouchMove);\r\n      };\r\n    }\r\n    return undefined;\r\n  }, [handleClickAway, touchEvent]);\r\n  if (mouseEvent !== false) {\r\n    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);\r\n  }\r\n  React.useEffect(() => {\r\n    if (mouseEvent !== false) {\r\n      const mappedMouseEvent = mapEventPropToEvent(mouseEvent);\r\n      const doc = ownerDocument(nodeRef.current);\r\n      doc.addEventListener(mappedMouseEvent, handleClickAway);\r\n      return () => {\r\n        doc.removeEventListener(mappedMouseEvent, handleClickAway);\r\n      };\r\n    }\r\n    return undefined;\r\n  }, [handleClickAway, mouseEvent]);\r\n  return /*#__PURE__*/_jsx(React.Fragment, {\r\n    children: /*#__PURE__*/React.cloneElement(children, childrenProps)\r\n  });\r\n}\r\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes /* remove-proptypes */ = {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\r\n  // ----------------------------------------------------------------------\r\n  /**\r\n   * The wrapped element.\r\n   */\r\n  children: elementAcceptingRef.isRequired,\r\n  /**\r\n   * If `true`, the React tree is ignored and only the DOM tree is considered.\r\n   * This prop changes how portaled elements are handled.\r\n   * @default false\r\n   */\r\n  disableReactTree: PropTypes.bool,\r\n  /**\r\n   * The mouse event to listen to. You can disable the listener by providing `false`.\r\n   * @default 'onClick'\r\n   */\r\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', 'onPointerDown', 'onPointerUp', false]),\r\n  /**\r\n   * Callback fired when a \"click away\" event is detected.\r\n   */\r\n  onClickAway: PropTypes.func.isRequired,\r\n  /**\r\n   * The touch event to listen to. You can disable the listener by providing `false`.\r\n   * @default 'onTouchEnd'\r\n   */\r\n  touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\r\n} : void 0;\r\nif (process.env.NODE_ENV !== 'production') {\r\n  // eslint-disable-next-line\r\n  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);\r\n}\r\nexport { ClickAwayListener };"]},"metadata":{},"sourceType":"module"}