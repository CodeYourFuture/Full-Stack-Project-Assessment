{"ast":null,"code":"import _slicedToArray from \"/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"colorSchemes\", \"components\"],\n    _excluded2 = [\"light\"];\nimport { deepmerge } from '@mui/utils';\nimport cssVarsParser from './cssVarsParser';\n\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  var _theme$colorSchemes = theme.colorSchemes,\n      colorSchemes = _theme$colorSchemes === void 0 ? {} : _theme$colorSchemes,\n      otherTheme = _objectWithoutPropertiesLoose(theme, _excluded);\n\n  var _cssVarsParser = cssVarsParser(otherTheme, parserConfig),\n      rootVars = _cssVarsParser.vars,\n      rootCss = _cssVarsParser.css,\n      rootVarsWithDefaults = _cssVarsParser.varsWithDefaults;\n\n  var themeVars = rootVarsWithDefaults;\n  var colorSchemesMap = {};\n\n  var light = colorSchemes.light,\n      otherColorSchemes = _objectWithoutPropertiesLoose(colorSchemes, _excluded2);\n\n  Object.entries(otherColorSchemes || {}).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        scheme = _ref2[1];\n\n    var _cssVarsParser2 = cssVarsParser(scheme, parserConfig),\n        vars = _cssVarsParser2.vars,\n        css = _cssVarsParser2.css,\n        varsWithDefaults = _cssVarsParser2.varsWithDefaults;\n\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css: css,\n      vars: vars\n    };\n  });\n\n  if (light) {\n    // light color scheme vars should be merged last to set as default\n    var _cssVarsParser3 = cssVarsParser(light, parserConfig),\n        css = _cssVarsParser3.css,\n        vars = _cssVarsParser3.vars,\n        varsWithDefaults = _cssVarsParser3.varsWithDefaults;\n\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap.light = {\n      css: css,\n      vars: vars\n    };\n  }\n\n  var generateCssVars = function generateCssVars(colorScheme) {\n    if (!colorScheme) {\n      return {\n        css: _extends({}, rootCss),\n        vars: rootVars\n      };\n    }\n\n    return {\n      css: _extends({}, colorSchemesMap[colorScheme].css),\n      vars: colorSchemesMap[colorScheme].vars\n    };\n  };\n\n  return {\n    vars: themeVars,\n    generateCssVars: generateCssVars\n  };\n}\n\nexport default prepareCssVars;","map":{"version":3,"sources":["/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@mui/system/esm/cssVars/prepareCssVars.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","deepmerge","cssVarsParser","prepareCssVars","theme","parserConfig","colorSchemes","otherTheme","rootVars","vars","rootCss","css","rootVarsWithDefaults","varsWithDefaults","themeVars","colorSchemesMap","light","otherColorSchemes","Object","entries","forEach","key","scheme","generateCssVars","colorScheme"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,IAAMC,SAAS,GAAG,CAAC,cAAD,EAAiB,YAAjB,CAAlB;AAAA,IACEC,UAAU,GAAG,CAAC,OAAD,CADf;AAEA,SAASC,SAAT,QAA0B,YAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,YAA/B,EAA6C;AAC3C;AACA,4BAEMD,KAFN,CACIE,YADJ;AAAA,MACIA,YADJ,oCACmB,EADnB;AAAA,MAGEC,UAHF,GAGeT,6BAA6B,CAACM,KAAD,EAAQL,SAAR,CAH5C;;AAIA,uBAIIG,aAAa,CAACK,UAAD,EAAaF,YAAb,CAJjB;AAAA,MACQG,QADR,kBACEC,IADF;AAAA,MAEOC,OAFP,kBAEEC,GAFF;AAAA,MAGoBC,oBAHpB,kBAGEC,gBAHF;;AAKA,MAAIC,SAAS,GAAGF,oBAAhB;AACA,MAAMG,eAAe,GAAG,EAAxB;;AACM,MACFC,KADE,GAEAV,YAFA,CACFU,KADE;AAAA,MAGJC,iBAHI,GAGgBnB,6BAA6B,CAACQ,YAAD,EAAeN,UAAf,CAH7C;;AAINkB,EAAAA,MAAM,CAACC,OAAP,CAAeF,iBAAiB,IAAI,EAApC,EAAwCG,OAAxC,CAAgD,gBAAmB;AAAA;AAAA,QAAjBC,GAAiB;AAAA,QAAZC,MAAY;;AACjE,0BAIIpB,aAAa,CAACoB,MAAD,EAASjB,YAAT,CAJjB;AAAA,QACEI,IADF,mBACEA,IADF;AAAA,QAEEE,GAFF,mBAEEA,GAFF;AAAA,QAGEE,gBAHF,mBAGEA,gBAHF;;AAKAC,IAAAA,SAAS,GAAGb,SAAS,CAACa,SAAD,EAAYD,gBAAZ,CAArB;AACAE,IAAAA,eAAe,CAACM,GAAD,CAAf,GAAuB;AACrBV,MAAAA,GAAG,EAAHA,GADqB;AAErBF,MAAAA,IAAI,EAAJA;AAFqB,KAAvB;AAID,GAXD;;AAYA,MAAIO,KAAJ,EAAW;AACT;AACA,0BAIId,aAAa,CAACc,KAAD,EAAQX,YAAR,CAJjB;AAAA,QACEM,GADF,mBACEA,GADF;AAAA,QAEEF,IAFF,mBAEEA,IAFF;AAAA,QAGEI,gBAHF,mBAGEA,gBAHF;;AAKAC,IAAAA,SAAS,GAAGb,SAAS,CAACa,SAAD,EAAYD,gBAAZ,CAArB;AACAE,IAAAA,eAAe,CAACC,KAAhB,GAAwB;AACtBL,MAAAA,GAAG,EAAHA,GADsB;AAEtBF,MAAAA,IAAI,EAAJA;AAFsB,KAAxB;AAID;;AACD,MAAMc,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,WAAW,EAAI;AACrC,QAAI,CAACA,WAAL,EAAkB;AAChB,aAAO;AACLb,QAAAA,GAAG,EAAEd,QAAQ,CAAC,EAAD,EAAKa,OAAL,CADR;AAELD,QAAAA,IAAI,EAAED;AAFD,OAAP;AAID;;AACD,WAAO;AACLG,MAAAA,GAAG,EAAEd,QAAQ,CAAC,EAAD,EAAKkB,eAAe,CAACS,WAAD,CAAf,CAA6Bb,GAAlC,CADR;AAELF,MAAAA,IAAI,EAAEM,eAAe,CAACS,WAAD,CAAf,CAA6Bf;AAF9B,KAAP;AAID,GAXD;;AAYA,SAAO;AACLA,IAAAA,IAAI,EAAEK,SADD;AAELS,IAAAA,eAAe,EAAfA;AAFK,GAAP;AAID;;AACD,eAAepB,cAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"colorSchemes\", \"components\"],\n  _excluded2 = [\"light\"];\nimport { deepmerge } from '@mui/utils';\nimport cssVarsParser from './cssVarsParser';\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  const {\n      colorSchemes = {}\n    } = theme,\n    otherTheme = _objectWithoutPropertiesLoose(theme, _excluded);\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n      light\n    } = colorSchemes,\n    otherColorSchemes = _objectWithoutPropertiesLoose(colorSchemes, _excluded2);\n  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n  if (light) {\n    // light color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(light, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap.light = {\n      css,\n      vars\n    };\n  }\n  const generateCssVars = colorScheme => {\n    if (!colorScheme) {\n      return {\n        css: _extends({}, rootCss),\n        vars: rootVars\n      };\n    }\n    return {\n      css: _extends({}, colorSchemesMap[colorScheme].css),\n      vars: colorSchemesMap[colorScheme].vars\n    };\n  };\n  return {\n    vars: themeVars,\n    generateCssVars\n  };\n}\nexport default prepareCssVars;"]},"metadata":{},"sourceType":"module"}