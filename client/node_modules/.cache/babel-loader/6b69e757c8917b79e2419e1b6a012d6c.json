{"ast":null,"code":"import _defineProperty from \"/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nvar _excluded = [\"colorSchemes\", \"components\", \"generateCssVars\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var themeId = options.themeId,\n      _options$theme = options.theme,\n      defaultTheme = _options$theme === void 0 ? {} : _options$theme,\n      _options$attribute = options.attribute,\n      defaultAttribute = _options$attribute === void 0 ? DEFAULT_ATTRIBUTE : _options$attribute,\n      _options$modeStorageK = options.modeStorageKey,\n      defaultModeStorageKey = _options$modeStorageK === void 0 ? DEFAULT_MODE_STORAGE_KEY : _options$modeStorageK,\n      _options$colorSchemeS = options.colorSchemeStorageKey,\n      defaultColorSchemeStorageKey = _options$colorSchemeS === void 0 ? DEFAULT_COLOR_SCHEME_STORAGE_KEY : _options$colorSchemeS,\n      _options$defaultMode = options.defaultMode,\n      designSystemMode = _options$defaultMode === void 0 ? 'light' : _options$defaultMode,\n      designSystemColorScheme = options.defaultColorScheme,\n      _options$disableTrans = options.disableTransitionOnChange,\n      designSystemTransitionOnChange = _options$disableTrans === void 0 ? false : _options$disableTrans,\n      resolveTheme = options.resolveTheme,\n      excludeVariablesFromRoot = options.excludeVariablesFromRoot;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(\"MUI: `\".concat(designSystemColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n  }\n\n  var ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  var useColorScheme = function useColorScheme() {\n    var value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: `useColorScheme` must be called under <CssVarsProvider />\" : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider(_ref2) {\n    var children = _ref2.children,\n        _ref2$theme = _ref2.theme,\n        themeProp = _ref2$theme === void 0 ? defaultTheme : _ref2$theme,\n        _ref2$modeStorageKey = _ref2.modeStorageKey,\n        modeStorageKey = _ref2$modeStorageKey === void 0 ? defaultModeStorageKey : _ref2$modeStorageKey,\n        _ref2$colorSchemeStor = _ref2.colorSchemeStorageKey,\n        colorSchemeStorageKey = _ref2$colorSchemeStor === void 0 ? defaultColorSchemeStorageKey : _ref2$colorSchemeStor,\n        _ref2$attribute = _ref2.attribute,\n        attribute = _ref2$attribute === void 0 ? defaultAttribute : _ref2$attribute,\n        _ref2$defaultMode = _ref2.defaultMode,\n        defaultMode = _ref2$defaultMode === void 0 ? designSystemMode : _ref2$defaultMode,\n        _ref2$defaultColorSch = _ref2.defaultColorScheme,\n        defaultColorScheme = _ref2$defaultColorSch === void 0 ? designSystemColorScheme : _ref2$defaultColorSch,\n        _ref2$disableTransiti = _ref2.disableTransitionOnChange,\n        disableTransitionOnChange = _ref2$disableTransiti === void 0 ? designSystemTransitionOnChange : _ref2$disableTransiti,\n        _ref2$storageWindow = _ref2.storageWindow,\n        storageWindow = _ref2$storageWindow === void 0 ? typeof window === 'undefined' ? undefined : window : _ref2$storageWindow,\n        _ref2$documentNode = _ref2.documentNode,\n        documentNode = _ref2$documentNode === void 0 ? typeof document === 'undefined' ? undefined : document : _ref2$documentNode,\n        _ref2$colorSchemeNode = _ref2.colorSchemeNode,\n        colorSchemeNode = _ref2$colorSchemeNode === void 0 ? typeof document === 'undefined' ? undefined : document.documentElement : _ref2$colorSchemeNode,\n        _ref2$colorSchemeSele = _ref2.colorSchemeSelector,\n        colorSchemeSelector = _ref2$colorSchemeSele === void 0 ? ':root' : _ref2$colorSchemeSele,\n        _ref2$disableNestedCo = _ref2.disableNestedContext,\n        disableNestedContext = _ref2$disableNestedCo === void 0 ? false : _ref2$disableNestedCo,\n        _ref2$disableStyleShe = _ref2.disableStyleSheetGeneration,\n        disableStyleSheetGeneration = _ref2$disableStyleShe === void 0 ? false : _ref2$disableStyleShe;\n    var hasMounted = React.useRef(false);\n    var upperTheme = muiUseTheme();\n    var ctx = React.useContext(ColorSchemeContext);\n    var nested = !!ctx && !disableNestedContext;\n    var scopedTheme = themeProp[themeId];\n\n    var _ref = scopedTheme || themeProp,\n        _ref$colorSchemes = _ref.colorSchemes,\n        colorSchemes = _ref$colorSchemes === void 0 ? {} : _ref$colorSchemes,\n        _ref$components = _ref.components,\n        components = _ref$components === void 0 ? {} : _ref$components,\n        _ref$generateCssVars = _ref.generateCssVars,\n        generateCssVars = _ref$generateCssVars === void 0 ? function () {\n      return {\n        vars: {},\n        css: {}\n      };\n    } : _ref$generateCssVars,\n        cssVarPrefix = _ref.cssVarPrefix,\n        restThemeProp = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n    var allColorSchemes = Object.keys(colorSchemes);\n    var defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    var defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark; // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n\n    var _useCurrentColorSchem = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme: defaultLightColorScheme,\n      defaultDarkColorScheme: defaultDarkColorScheme,\n      modeStorageKey: modeStorageKey,\n      colorSchemeStorageKey: colorSchemeStorageKey,\n      defaultMode: defaultMode,\n      storageWindow: storageWindow\n    }),\n        stateMode = _useCurrentColorSchem.mode,\n        setMode = _useCurrentColorSchem.setMode,\n        systemMode = _useCurrentColorSchem.systemMode,\n        lightColorScheme = _useCurrentColorSchem.lightColorScheme,\n        darkColorScheme = _useCurrentColorSchem.darkColorScheme,\n        stateColorScheme = _useCurrentColorSchem.colorScheme,\n        setColorScheme = _useCurrentColorSchem.setColorScheme;\n\n    var mode = stateMode;\n    var colorScheme = stateColorScheme;\n\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n\n    var calculatedMode = function () {\n      if (mode) {\n        return mode;\n      } // This scope occurs on the server\n\n\n      if (defaultMode === 'system') {\n        return designSystemMode;\n      }\n\n      return defaultMode;\n    }();\n\n    var calculatedColorScheme = function () {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'system'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    }(); // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n\n\n    var _generateCssVars = generateCssVars(),\n        rootCss = _generateCssVars.css,\n        rootVars = _generateCssVars.vars; // 3. Start composing the theme object\n\n\n    var theme = _extends({}, restThemeProp, {\n      components: components,\n      colorSchemes: colorSchemes,\n      cssVarPrefix: cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: function getColorSchemeSelector(targetColorScheme) {\n        return \"[\".concat(attribute, \"=\\\"\").concat(targetColorScheme, \"\\\"] &\");\n      }\n    }); // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n\n\n    var defaultColorSchemeStyleSheet = {};\n    var otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          key = _ref4[0],\n          scheme = _ref4[1];\n\n      var _generateCssVars2 = generateCssVars(key),\n          css = _generateCssVars2.css,\n          vars = _generateCssVars2.vars;\n\n      theme.vars = deepmerge(theme.vars, vars);\n\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(function (schemeKey) {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n\n      var resolvedDefaultColorScheme = function () {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      }();\n\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          var excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(function (cssVar) {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[\"[\".concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = excludedVariables;\n        }\n\n        defaultColorSchemeStyleSheet[\"\".concat(colorSchemeSelector, \", [\").concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      } else {\n        otherColorSchemesStyleSheet[\"\".concat(colorSchemeSelector === ':root' ? '' : colorSchemeSelector, \"[\").concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      }\n    });\n    theme.vars = deepmerge(theme.vars, rootVars); // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n\n    React.useEffect(function () {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]); // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n\n    React.useEffect(function () {\n      var timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        var css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (function () {\n          return window.getComputedStyle(documentNode.body);\n        })();\n\n        timer = setTimeout(function () {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return function () {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(function () {\n      hasMounted.current = true;\n      return function () {\n        hasMounted.current = false;\n      };\n    }, []);\n    var contextValue = React.useMemo(function () {\n      return {\n        mode: mode,\n        systemMode: systemMode,\n        setMode: setMode,\n        lightColorScheme: lightColorScheme,\n        darkColorScheme: darkColorScheme,\n        colorScheme: colorScheme,\n        setColorScheme: setColorScheme,\n        allColorSchemes: allColorSchemes\n      };\n    }, [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    var shouldGenerateStyleSheet = true;\n\n    if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n\n    var element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [/*#__PURE__*/_jsx(GlobalStyles, {\n          styles: _defineProperty({}, colorSchemeSelector, rootCss)\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: defaultColorSchemeStyleSheet\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: otherColorSchemesStyleSheet\n        })]\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n\n    if (nested) {\n      return element;\n    }\n\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  var defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  var defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n\n  var getInitColorSchemeScript = function getInitColorSchemeScript(params) {\n    return systemGetInitColorSchemeScript(_extends({\n      attribute: defaultAttribute,\n      colorSchemeStorageKey: defaultColorSchemeStorageKey,\n      defaultMode: designSystemMode,\n      defaultLightColorScheme: defaultLightColorScheme,\n      defaultDarkColorScheme: defaultDarkColorScheme,\n      modeStorageKey: defaultModeStorageKey\n    }, params));\n  };\n\n  return {\n    CssVarsProvider: CssVarsProvider,\n    useColorScheme: useColorScheme,\n    getInitColorSchemeScript: getInitColorSchemeScript\n  };\n}","map":{"version":3,"sources":["/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","React","PropTypes","deepmerge","GlobalStyles","useTheme","muiUseTheme","ThemeProvider","systemGetInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","themeId","theme","defaultTheme","attribute","defaultAttribute","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","defaultMode","designSystemMode","designSystemColorScheme","defaultColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","resolveTheme","excludeVariablesFromRoot","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","colorSchemeSelector","disableNestedContext","disableStyleSheetGeneration","hasMounted","useRef","upperTheme","ctx","nested","scopedTheme","_ref","components","generateCssVars","vars","css","cssVarPrefix","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","stateMode","mode","setMode","systemMode","lightColorScheme","darkColorScheme","stateColorScheme","colorScheme","setColorScheme","calculatedMode","calculatedColorScheme","rootCss","rootVars","getColorSchemeSelector","targetColorScheme","defaultColorSchemeStyleSheet","otherColorSchemesStyleSheet","entries","forEach","key","scheme","schemeKey","palette","resolvedDefaultColorScheme","excludedVariables","cssVar","useEffect","setAttribute","timer","current","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","contextValue","useMemo","shouldGenerateStyleSheet","element","Fragment","styles","Provider","propTypes","string","node","any","oneOfType","object","bool","getInitColorSchemeScript","params"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"generateCssVars\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    themeId,\n    /**\n     * This `theme` object needs to follow a certain structure to\n     * be used correctly by the finel `CssVarsProvider`. It should have a\n     * `colorSchemes` key with the light and dark (and any other) palette.\n     * It should also ideally have a vars object created using `prepareCssVars`.\n     */\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n    return value;\n  };\n  function CssVarsProvider({\n    children,\n    theme: themeProp = defaultTheme,\n    modeStorageKey = defaultModeStorageKey,\n    colorSchemeStorageKey = defaultColorSchemeStorageKey,\n    attribute = defaultAttribute,\n    defaultMode = designSystemMode,\n    defaultColorScheme = designSystemColorScheme,\n    disableTransitionOnChange = designSystemTransitionOnChange,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    documentNode = typeof document === 'undefined' ? undefined : document,\n    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n    colorSchemeSelector = ':root',\n    disableNestedContext = false,\n    disableStyleSheetGeneration = false\n  }) {\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const scopedTheme = themeProp[themeId];\n    const _ref = scopedTheme || themeProp,\n      {\n        colorSchemes = {},\n        components = {},\n        generateCssVars = () => ({\n          vars: {},\n          css: {}\n        }),\n        cssVarPrefix\n      } = _ref,\n      restThemeProp = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n    const calculatedMode = (() => {\n      if (mode) {\n        return mode;\n      }\n      // This scope occurs on the server\n      if (defaultMode === 'system') {\n        return designSystemMode;\n      }\n      return defaultMode;\n    })();\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        }\n        // use light color scheme, if default mode is 'light' | 'system'\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    })();\n\n    // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = generateCssVars();\n\n    // 3. Start composing the theme object\n    const theme = _extends({}, restThemeProp, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    });\n\n    // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars\n      } = generateCssVars(key);\n      theme.vars = deepmerge(theme.vars, vars);\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n        return defaultColorScheme.light;\n      })();\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    theme.vars = deepmerge(theme.vars, rootVars);\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      mode,\n      systemMode,\n      setMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme,\n      allColorSchemes\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    let shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [/*#__PURE__*/_jsx(GlobalStyles, {\n          styles: {\n            [colorSchemeSelector]: rootCss\n          }\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: defaultColorSchemeStyleSheet\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: otherColorSchemesStyleSheet\n        })]\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"]},"metadata":{},"sourceType":"module"}