{"ast":null,"code":"var _jsxFileName = \"/home/coder/CYF/DataBase/Full-Stack-Project-Assessment/client/src/components/VideoPlay.jsx\",\n    _s = $RefreshSig$();\n\n// import React, { useState } from \"react\";\n// import AddVideo from \"./AddVideo\";\n// import exampleresponse from \"../exampleresponse.json\";\n// function VideoPlay() {\n//   const [vote, setVote] = useState(0);\n//   const [vid, setVid] = useState(exampleresponse);\n//   const voteIncrease = () => {\n//     setVote((prev) => prev + 1);\n//   };\n//   const voteDecrease = () => {\n//     setVote((prev) => (prev > 0 ? prev - 1 : 0));\n//   };\n//   const updateVoteCount = (videoId, value) => {\n//     setVid((prevVid) =>\n//       prevVid.map((video) =>\n//         video.id === videoId ? { ...video, votes: video.votes + value } : video\n//       )\n//     );\n//   };\n//   const newVideoAdd = (newInput) => {\n//     setVid([...vid, newInput]);\n//     const newId = vid.length + 1;\n//     newInput.id = newId;\n//     newInput.votes = 0;\n//   };\n//   const deleteVideo =(videoId)=>{\n//     console.log(\"delete\");\n//     const videoDeleleted = vid.filter((el)=>el.id!==videoId)\n//     setVid(videoDeleleted)\n//   }\n//   return (\n//     <div className=\"container mt-5\">\n//       <AddVideo onVidAdd={newVideoAdd} />\n//       {vid.map((el, index) => {\n//         const videoId = getVideoIdFromUrl(el.url);\n//         return (\n//           <div className=\"videoCard\" key={index}>\n//             <h5 className=\"card-title\">{el.title}</h5>\n//             <iframe\n//               width=\"560\"\n//               height=\"315\"\n//               src={`https://www.youtube.com/embed/${videoId}`}\n//               title=\"YouTube video player\"\n//               frameBorder=\"0\"\n//               allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n//               allowFullScreen\n//             ></iframe>\n//             <div className=\"btnCounter\">\n//               <button onClick={voteIncrease} type=\"button\" className=\"btn btn-success\">\n//                 +\n//               </button>\n//               <p>Vote: {vote}</p>\n//               <button onClick={voteDecrease} type=\"button\" className=\"btn btn-danger\">\n//                 -\n//               </button>\n//               <button onClick={deleteVideo} type=\"button\" className=\"btn btn-danger\">Delete</button>\n//             </div>\n//           </div>\n//         );\n//       })}\n//     </div>\n//   );\n// }\n// function getVideoIdFromUrl(url) {\n//   const videoId = url.split(\"v=\")[1];\n//   return videoId;\n// }\n// export default VideoPlay;\nimport React, { useState } from \"react\";\nimport AddVideo from \"./AddVideo\";\nimport exampleresponse from \"../exampleresponse.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction VideoPlay() {\n  _s();\n\n  const [vid, setVid] = useState(exampleresponse);\n\n  const updateVoteCount = (videoId, value) => {\n    setVid(prevVid => prevVid.map(video => video.id === videoId ? { ...video,\n      votes: Math.max(0, video.votes + value)\n    } : video));\n  };\n\n  const newVideoAdd = newInput => {\n    const newId = vid.length + 1;\n    newInput.id = newId;\n    newInput.votes = 0;\n    setVid([...vid, newInput]);\n  };\n\n  const deleteVideo = videoId => {\n    const videoDeleted = vid.filter(el => el.id !== videoId);\n    setVid(videoDeleted);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(AddVideo, {\n      onVidAdd: newVideoAdd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), vid.map((el, index) => {\n      const videoId = getVideoIdFromUrl(el.url);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"videoCard\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"card-title\",\n          children: el.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n          width: \"560\",\n          height: \"315\",\n          src: `https://www.youtube.com/embed/${videoId}`,\n          title: \"YouTube video player\",\n          frameBorder: \"0\",\n          allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n          allowFullScreen: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btnCounter\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => updateVoteCount(el.id, 1),\n            type: \"button\",\n            className: \"btn btn-success\",\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Vote: \", el.votes]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => updateVoteCount(el.id, -1),\n            type: \"button\",\n            className: \"btn btn-danger\",\n            children: \"-\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => deleteVideo(el.id),\n            type: \"button\",\n            className: \"btn btn-danger\",\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VideoPlay, \"CTfgcBxVaj5EK9YHzb37NbhPblY=\");\n\n_c = VideoPlay;\n\nfunction getVideoIdFromUrl(url) {\n  const videoId = url.split(\"v=\")[1];\n  return videoId;\n}\n\nexport default VideoPlay;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoPlay\");","map":{"version":3,"sources":["/home/coder/CYF/DataBase/Full-Stack-Project-Assessment/client/src/components/VideoPlay.jsx"],"names":["React","useState","AddVideo","exampleresponse","VideoPlay","vid","setVid","updateVoteCount","videoId","value","prevVid","map","video","id","votes","Math","max","newVideoAdd","newInput","newId","length","deleteVideo","videoDeleted","filter","el","index","getVideoIdFromUrl","url","title","split"],"mappings":"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","sourcesContent":["\n// import React, { useState } from \"react\";\n// import AddVideo from \"./AddVideo\";\n// import exampleresponse from \"../exampleresponse.json\";\n\n// function VideoPlay() {\n//   const [vote, setVote] = useState(0);\n//   const [vid, setVid] = useState(exampleresponse);\n\n//   const voteIncrease = () => {\n//     setVote((prev) => prev + 1);\n//   };\n\n//   const voteDecrease = () => {\n//     setVote((prev) => (prev > 0 ? prev - 1 : 0));\n//   };\n\n\n//   const updateVoteCount = (videoId, value) => {\n//     setVid((prevVid) =>\n//       prevVid.map((video) =>\n//         video.id === videoId ? { ...video, votes: video.votes + value } : video\n//       )\n//     );\n//   };\n\n\n\n\n//   const newVideoAdd = (newInput) => {\n//     setVid([...vid, newInput]);\n//     const newId = vid.length + 1;\n//     newInput.id = newId;\n//     newInput.votes = 0;\n//   };\n//   const deleteVideo =(videoId)=>{\n//     console.log(\"delete\");\n//     const videoDeleleted = vid.filter((el)=>el.id!==videoId)\n//     setVid(videoDeleleted)\n//   }\n//   return (\n//     <div className=\"container mt-5\">\n//       <AddVideo onVidAdd={newVideoAdd} />\n\n//       {vid.map((el, index) => {\n//         const videoId = getVideoIdFromUrl(el.url);\n\n//         return (\n//           <div className=\"videoCard\" key={index}>\n//             <h5 className=\"card-title\">{el.title}</h5>\n\n//             <iframe\n//               width=\"560\"\n//               height=\"315\"\n//               src={`https://www.youtube.com/embed/${videoId}`}\n//               title=\"YouTube video player\"\n//               frameBorder=\"0\"\n//               allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n//               allowFullScreen\n//             ></iframe>\n\n//             <div className=\"btnCounter\">\n//               <button onClick={voteIncrease} type=\"button\" className=\"btn btn-success\">\n//                 +\n//               </button>\n//               <p>Vote: {vote}</p>\n//               <button onClick={voteDecrease} type=\"button\" className=\"btn btn-danger\">\n//                 -\n//               </button>\n//               <button onClick={deleteVideo} type=\"button\" className=\"btn btn-danger\">Delete</button>\n//             </div>\n//           </div>\n//         );\n//       })}\n//     </div>\n//   );\n// }\n\n// function getVideoIdFromUrl(url) {\n//   const videoId = url.split(\"v=\")[1];\n//   return videoId;\n// }\n\n// export default VideoPlay;\n\nimport React, { useState } from \"react\";\nimport AddVideo from \"./AddVideo\";\nimport exampleresponse from \"../exampleresponse.json\";\n\nfunction VideoPlay() {\n  const [vid, setVid] = useState(exampleresponse);\n\n  const updateVoteCount = (videoId, value) => {\n    setVid((prevVid) =>\n      prevVid.map((video) =>\n        video.id === videoId ? { ...video, votes: Math.max(0, video.votes + value) } : video\n      )\n    );\n  };\n\n  const newVideoAdd = (newInput) => {\n    const newId = vid.length + 1;\n    newInput.id = newId;\n    newInput.votes = 0;\n    setVid([...vid, newInput]);\n  };\n\n  const deleteVideo = (videoId) => {\n    const videoDeleted = vid.filter((el) => el.id !== videoId);\n    setVid(videoDeleted);\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <AddVideo onVidAdd={newVideoAdd} />\n\n      {vid.map((el, index) => {\n        const videoId = getVideoIdFromUrl(el.url);\n\n        return (\n          <div className=\"videoCard\" key={index}>\n            <h5 className=\"card-title\">{el.title}</h5>\n\n            <iframe\n              width=\"560\"\n              height=\"315\"\n              src={`https://www.youtube.com/embed/${videoId}`}\n              title=\"YouTube video player\"\n              frameBorder=\"0\"\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n              allowFullScreen\n            ></iframe>\n\n            <div className=\"btnCounter\">\n              <button\n                onClick={() => updateVoteCount(el.id, 1)}\n                type=\"button\"\n                className=\"btn btn-success\"\n              >\n                +\n              </button>\n              <p>Vote: {el.votes}</p>\n              <button\n                onClick={() => updateVoteCount(el.id, -1)}\n                type=\"button\"\n                className=\"btn btn-danger\"\n              >\n                -\n              </button>\n              <button\n                onClick={() => deleteVideo(el.id)}\n                type=\"button\"\n                className=\"btn btn-danger\"\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nfunction getVideoIdFromUrl(url) {\n  const videoId = url.split(\"v=\")[1];\n  return videoId;\n}\n\nexport default VideoPlay;\n"]},"metadata":{},"sourceType":"module"}