{"ast":null,"code":"exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream);\nexports.writableStream = isFunction(global.WritableStream);\nexports.abortController = isFunction(global.AbortController);\nexports.blobConstructor = false;\ntry {\n  new Blob([new ArrayBuffer(1)]);\n  exports.blobConstructor = true;\n} catch (e) {}\n\n// The xhr request to example.com may violate some restrictive CSP configurations,\n// so if we're running in a browser that supports `fetch`, avoid calling getXHR()\n// and assume support for certain features below.\nvar xhr;\nfunction getXHR() {\n  // Cache the xhr value\n  if (xhr !== undefined) return xhr;\n  if (global.XMLHttpRequest) {\n    xhr = new global.XMLHttpRequest();\n    // If XDomainRequest is available (ie only, where xhr might not work\n    // cross domain), use the page location. Otherwise use example.com\n    // Note: this doesn't actually make an http request.\n    try {\n      xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com');\n    } catch (e) {\n      xhr = null;\n    }\n  } else {\n    // Service workers don't have XHR\n    xhr = null;\n  }\n  return xhr;\n}\nfunction checkTypeSupport(type) {\n  var xhr = getXHR();\n  if (!xhr) return false;\n  try {\n    xhr.responseType = type;\n    return xhr.responseType === type;\n  } catch (e) {}\n  return false;\n}\n\n// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.\n// Safari 7.1 appears to have fixed this bug.\nvar haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined';\nvar haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice);\n\n// If fetch is supported, then arraybuffer will be supported too. Skip calling\n// checkTypeSupport(), since that calls getXHR().\nexports.arraybuffer = exports.fetch || haveArrayBuffer && checkTypeSupport('arraybuffer');\n\n// These next two tests unavoidably show warnings in Chrome. Since fetch will always\n// be used if it's available, just return false for these to avoid the warnings.\nexports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream');\nexports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer && checkTypeSupport('moz-chunked-arraybuffer');\n\n// If fetch is supported, then overrideMimeType will be supported too. Skip calling\n// getXHR().\nexports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false);\nexports.vbArray = isFunction(global.VBArray);\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\nxhr = null; // Help gc","map":{"version":3,"names":["exports","fetch","isFunction","global","ReadableStream","writableStream","WritableStream","abortController","AbortController","blobConstructor","Blob","ArrayBuffer","e","xhr","getXHR","undefined","XMLHttpRequest","open","XDomainRequest","checkTypeSupport","type","responseType","haveArrayBuffer","haveSlice","prototype","slice","arraybuffer","msstream","mozchunkedarraybuffer","overrideMimeType","vbArray","VBArray","value"],"sources":["/Users/admin/Desktop/Newsletter-Signup/Full-Stack-Project-Assessment/client/node_modules/stream-http/lib/capability.js"],"sourcesContent":["exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)\n\nexports.writableStream = isFunction(global.WritableStream)\n\nexports.abortController = isFunction(global.AbortController)\n\nexports.blobConstructor = false\ntry {\n\tnew Blob([new ArrayBuffer(1)])\n\texports.blobConstructor = true\n} catch (e) {}\n\n// The xhr request to example.com may violate some restrictive CSP configurations,\n// so if we're running in a browser that supports `fetch`, avoid calling getXHR()\n// and assume support for certain features below.\nvar xhr\nfunction getXHR () {\n\t// Cache the xhr value\n\tif (xhr !== undefined) return xhr\n\n\tif (global.XMLHttpRequest) {\n\t\txhr = new global.XMLHttpRequest()\n\t\t// If XDomainRequest is available (ie only, where xhr might not work\n\t\t// cross domain), use the page location. Otherwise use example.com\n\t\t// Note: this doesn't actually make an http request.\n\t\ttry {\n\t\t\txhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')\n\t\t} catch(e) {\n\t\t\txhr = null\n\t\t}\n\t} else {\n\t\t// Service workers don't have XHR\n\t\txhr = null\n\t}\n\treturn xhr\n}\n\nfunction checkTypeSupport (type) {\n\tvar xhr = getXHR()\n\tif (!xhr) return false\n\ttry {\n\t\txhr.responseType = type\n\t\treturn xhr.responseType === type\n\t} catch (e) {}\n\treturn false\n}\n\n// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.\n// Safari 7.1 appears to have fixed this bug.\nvar haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'\nvar haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)\n\n// If fetch is supported, then arraybuffer will be supported too. Skip calling\n// checkTypeSupport(), since that calls getXHR().\nexports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))\n\n// These next two tests unavoidably show warnings in Chrome. Since fetch will always\n// be used if it's available, just return false for these to avoid the warnings.\nexports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')\nexports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&\n\tcheckTypeSupport('moz-chunked-arraybuffer')\n\n// If fetch is supported, then overrideMimeType will be supported too. Skip calling\n// getXHR().\nexports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)\n\nexports.vbArray = isFunction(global.VBArray)\n\nfunction isFunction (value) {\n\treturn typeof value === 'function'\n}\n\nxhr = null // Help gc\n"],"mappings":"AAAAA,OAAO,CAACC,KAAK,GAAGC,UAAU,CAACC,MAAM,CAACF,KAAK,CAAC,IAAIC,UAAU,CAACC,MAAM,CAACC,cAAc,CAAC;AAE7EJ,OAAO,CAACK,cAAc,GAAGH,UAAU,CAACC,MAAM,CAACG,cAAc,CAAC;AAE1DN,OAAO,CAACO,eAAe,GAAGL,UAAU,CAACC,MAAM,CAACK,eAAe,CAAC;AAE5DR,OAAO,CAACS,eAAe,GAAG,KAAK;AAC/B,IAAI;EACH,IAAIC,IAAI,CAAC,CAAC,IAAIC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9BX,OAAO,CAACS,eAAe,GAAG,IAAI;AAC/B,CAAC,CAAC,OAAOG,CAAC,EAAE,CAAC;;AAEb;AACA;AACA;AACA,IAAIC,GAAG;AACP,SAASC,MAAMA,CAAA,EAAI;EAClB;EACA,IAAID,GAAG,KAAKE,SAAS,EAAE,OAAOF,GAAG;EAEjC,IAAIV,MAAM,CAACa,cAAc,EAAE;IAC1BH,GAAG,GAAG,IAAIV,MAAM,CAACa,cAAc,EAAE;IACjC;IACA;IACA;IACA,IAAI;MACHH,GAAG,CAACI,IAAI,CAAC,KAAK,EAAEd,MAAM,CAACe,cAAc,GAAG,GAAG,GAAG,qBAAqB,CAAC;IACrE,CAAC,CAAC,OAAMN,CAAC,EAAE;MACVC,GAAG,GAAG,IAAI;IACX;EACD,CAAC,MAAM;IACN;IACAA,GAAG,GAAG,IAAI;EACX;EACA,OAAOA,GAAG;AACX;AAEA,SAASM,gBAAgBA,CAAEC,IAAI,EAAE;EAChC,IAAIP,GAAG,GAAGC,MAAM,EAAE;EAClB,IAAI,CAACD,GAAG,EAAE,OAAO,KAAK;EACtB,IAAI;IACHA,GAAG,CAACQ,YAAY,GAAGD,IAAI;IACvB,OAAOP,GAAG,CAACQ,YAAY,KAAKD,IAAI;EACjC,CAAC,CAAC,OAAOR,CAAC,EAAE,CAAC;EACb,OAAO,KAAK;AACb;;AAEA;AACA;AACA,IAAIU,eAAe,GAAG,OAAOnB,MAAM,CAACQ,WAAW,KAAK,WAAW;AAC/D,IAAIY,SAAS,GAAGD,eAAe,IAAIpB,UAAU,CAACC,MAAM,CAACQ,WAAW,CAACa,SAAS,CAACC,KAAK,CAAC;;AAEjF;AACA;AACAzB,OAAO,CAAC0B,WAAW,GAAG1B,OAAO,CAACC,KAAK,IAAKqB,eAAe,IAAIH,gBAAgB,CAAC,aAAa,CAAE;;AAE3F;AACA;AACAnB,OAAO,CAAC2B,QAAQ,GAAG,CAAC3B,OAAO,CAACC,KAAK,IAAIsB,SAAS,IAAIJ,gBAAgB,CAAC,WAAW,CAAC;AAC/EnB,OAAO,CAAC4B,qBAAqB,GAAG,CAAC5B,OAAO,CAACC,KAAK,IAAIqB,eAAe,IAChEH,gBAAgB,CAAC,yBAAyB,CAAC;;AAE5C;AACA;AACAnB,OAAO,CAAC6B,gBAAgB,GAAG7B,OAAO,CAACC,KAAK,KAAKa,MAAM,EAAE,GAAGZ,UAAU,CAACY,MAAM,EAAE,CAACe,gBAAgB,CAAC,GAAG,KAAK,CAAC;AAEtG7B,OAAO,CAAC8B,OAAO,GAAG5B,UAAU,CAACC,MAAM,CAAC4B,OAAO,CAAC;AAE5C,SAAS7B,UAAUA,CAAE8B,KAAK,EAAE;EAC3B,OAAO,OAAOA,KAAK,KAAK,UAAU;AACnC;AAEAnB,GAAG,GAAG,IAAI,EAAC"},"metadata":{},"sourceType":"script"}