{"ast":null,"code":"'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _ClearIcon, _ArrowDropDownIcon;\n\nconst _excluded = [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"className\", \"clearIcon\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeText\", \"componentsProps\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"isOptionEqualToValue\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"readOnly\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"slotProps\", \"value\"],\n      _excluded2 = [\"ref\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, integerPropType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses, useAutocomplete, createFilterOptions } from '@mui/base';\nimport { alpha } from '@mui/system';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport inputClasses from '../Input/inputClasses';\nimport inputBaseClasses from '../InputBase/inputBaseClasses';\nimport outlinedInputClasses from '../OutlinedInput/outlinedInputClasses';\nimport filledInputClasses from '../FilledInput/filledInputClasses';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport capitalize from '../utils/capitalize';\nimport useForkRef from '../utils/useForkRef';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', expanded && 'expanded', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', `tagSize${capitalize(size)}`],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\n\nconst AutocompleteRoot = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      fullWidth,\n      hasClearIcon,\n      hasPopupIcon,\n      inputFocused,\n      size\n    } = ownerState;\n    return [{\n      [`& .${autocompleteClasses.tag}`]: styles.tag\n    }, {\n      [`& .${autocompleteClasses.tag}`]: styles[`tagSize${capitalize(size)}`]\n    }, {\n      [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot\n    }, {\n      [`& .${autocompleteClasses.input}`]: styles.input\n    }, {\n      [`& .${autocompleteClasses.input}`]: inputFocused && styles.inputFocused\n    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];\n  }\n})(_ref => {\n  let {\n    ownerState\n  } = _ref;\n  return _extends({\n    [`&.${autocompleteClasses.focused} .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    },\n\n    /* Avoid double tap issue on iOS */\n    '@media (pointer: fine)': {\n      [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n        visibility: 'visible'\n      }\n    }\n  }, ownerState.fullWidth && {\n    width: '100%'\n  }, {\n    [`& .${autocompleteClasses.tag}`]: _extends({\n      margin: 3,\n      maxWidth: 'calc(100% - 6px)'\n    }, ownerState.size === 'small' && {\n      margin: 2,\n      maxWidth: 'calc(100% - 4px)'\n    }),\n    [`& .${autocompleteClasses.inputRoot}`]: {\n      flexWrap: 'wrap',\n      [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 26 + 4\n      },\n      [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 52 + 4\n      },\n      [`& .${autocompleteClasses.input}`]: {\n        width: 0,\n        minWidth: 30\n      }\n    },\n    [`& .${inputClasses.root}`]: {\n      paddingBottom: 1,\n      '& .MuiInput-input': {\n        padding: '4px 4px 4px 0px'\n      }\n    },\n    [`& .${inputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n      [`& .${inputClasses.input}`]: {\n        padding: '2px 4px 3px 0'\n      }\n    },\n    [`& .${outlinedInputClasses.root}`]: {\n      padding: 9,\n      [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 26 + 4 + 9\n      },\n      [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 52 + 4 + 9\n      },\n      [`& .${autocompleteClasses.input}`]: {\n        padding: '7.5px 4px 7.5px 5px'\n      },\n      [`& .${autocompleteClasses.endAdornment}`]: {\n        right: 9\n      }\n    },\n    [`& .${outlinedInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n      // Don't specify paddingRight, as it overrides the default value set when there is only\n      // one of the popup or clear icon as the specificity is equal so the latter one wins\n      paddingTop: 6,\n      paddingBottom: 6,\n      paddingLeft: 6,\n      [`& .${autocompleteClasses.input}`]: {\n        padding: '2.5px 4px 2.5px 8px'\n      }\n    },\n    [`& .${filledInputClasses.root}`]: {\n      paddingTop: 19,\n      paddingLeft: 8,\n      [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 26 + 4 + 9\n      },\n      [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 52 + 4 + 9\n      },\n      [`& .${filledInputClasses.input}`]: {\n        padding: '7px 4px'\n      },\n      [`& .${autocompleteClasses.endAdornment}`]: {\n        right: 9\n      }\n    },\n    [`& .${filledInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n      paddingBottom: 1,\n      [`& .${filledInputClasses.input}`]: {\n        padding: '2.5px 4px'\n      }\n    },\n    [`& .${inputBaseClasses.hiddenLabel}`]: {\n      paddingTop: 8\n    },\n    [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}`]: {\n      paddingTop: 0,\n      paddingBottom: 0,\n      [`& .${autocompleteClasses.input}`]: {\n        paddingTop: 16,\n        paddingBottom: 17\n      }\n    },\n    [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}.${inputBaseClasses.sizeSmall}`]: {\n      [`& .${autocompleteClasses.input}`]: {\n        paddingTop: 8,\n        paddingBottom: 9\n      }\n    },\n    [`& .${autocompleteClasses.input}`]: _extends({\n      flexGrow: 1,\n      textOverflow: 'ellipsis',\n      opacity: 0\n    }, ownerState.inputFocused && {\n      opacity: 1\n    })\n  });\n});\nconst AutocompleteEndAdornment = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment',\n  overridesResolver: (props, styles) => styles.endAdornment\n})({\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: 'calc(50% - 14px)' // Center vertically\n\n});\nconst AutocompleteClearIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator',\n  overridesResolver: (props, styles) => styles.clearIndicator\n})({\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: (_ref2, styles) => {\n    let {\n      ownerState\n    } = _ref2;\n    return _extends({}, styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen);\n  }\n})(_ref3 => {\n  let {\n    ownerState\n  } = _ref3;\n  return _extends({\n    padding: 2,\n    marginRight: -2\n  }, ownerState.popupOpen && {\n    transform: 'rotate(180deg)'\n  });\n});\nconst AutocompletePopper = styled(Popper, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${autocompleteClasses.option}`]: styles.option\n    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];\n  }\n})(_ref4 => {\n  let {\n    theme,\n    ownerState\n  } = _ref4;\n  return _extends({\n    zIndex: (theme.vars || theme).zIndex.modal\n  }, ownerState.disablePortal && {\n    position: 'absolute'\n  });\n});\nconst AutocompletePaper = styled(Paper, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper',\n  overridesResolver: (props, styles) => styles.paper\n})(_ref5 => {\n  let {\n    theme\n  } = _ref5;\n  return _extends({}, theme.typography.body1, {\n    overflow: 'auto'\n  });\n});\nconst AutocompleteLoading = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Loading',\n  overridesResolver: (props, styles) => styles.loading\n})(_ref6 => {\n  let {\n    theme\n  } = _ref6;\n  return {\n    color: (theme.vars || theme).palette.text.secondary,\n    padding: '14px 16px'\n  };\n});\nconst AutocompleteNoOptions = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})(_ref7 => {\n  let {\n    theme\n  } = _ref7;\n  return {\n    color: (theme.vars || theme).palette.text.secondary,\n    padding: '14px 16px'\n  };\n});\nconst AutocompleteListbox = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox',\n  overridesResolver: (props, styles) => styles.listbox\n})(_ref8 => {\n  let {\n    theme\n  } = _ref8;\n  return {\n    listStyle: 'none',\n    margin: 0,\n    padding: '8px 0',\n    maxHeight: '40vh',\n    overflow: 'auto',\n    position: 'relative',\n    [`& .${autocompleteClasses.option}`]: {\n      minHeight: 48,\n      display: 'flex',\n      overflow: 'hidden',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      cursor: 'pointer',\n      paddingTop: 6,\n      boxSizing: 'border-box',\n      outline: '0',\n      WebkitTapHighlightColor: 'transparent',\n      paddingBottom: 6,\n      paddingLeft: 16,\n      paddingRight: 16,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 'auto'\n      },\n      [`&.${autocompleteClasses.focused}`]: {\n        backgroundColor: (theme.vars || theme).palette.action.hover,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      },\n      '&[aria-disabled=\"true\"]': {\n        opacity: (theme.vars || theme).palette.action.disabledOpacity,\n        pointerEvents: 'none'\n      },\n      [`&.${autocompleteClasses.focusVisible}`]: {\n        backgroundColor: (theme.vars || theme).palette.action.focus\n      },\n      '&[aria-selected=\"true\"]': {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n        [`&.${autocompleteClasses.focused}`]: {\n          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: (theme.vars || theme).palette.action.selected\n          }\n        },\n        [`&.${autocompleteClasses.focusVisible}`]: {\n          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n        }\n      }\n    }\n  };\n});\nconst AutocompleteGroupLabel = styled(ListSubheader, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel',\n  overridesResolver: (props, styles) => styles.groupLabel\n})(_ref9 => {\n  let {\n    theme\n  } = _ref9;\n  return {\n    backgroundColor: (theme.vars || theme).palette.background.paper,\n    top: -8\n  };\n});\nconst AutocompleteGroupUl = styled('ul', {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl',\n  overridesResolver: (props, styles) => styles.groupUl\n})({\n  padding: 0,\n  [`& .${autocompleteClasses.option}`]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;\n\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    ChipProps,\n    className,\n    clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n      fontSize: \"small\"\n    })),\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    clearText = 'Clear',\n    closeText = 'Close',\n    componentsProps = {},\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    disablePortal = false,\n    filterSelectedOptions = false,\n    forcePopupIcon = 'auto',\n    freeSolo = false,\n    fullWidth = false,\n    getLimitTagsText = more => `+${more}`,\n    getOptionLabel: getOptionLabelProp,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    includeInputInList = false,\n    limitTags = -1,\n    ListboxComponent = 'ul',\n    ListboxProps,\n    loading = false,\n    loadingText = 'Loading…',\n    multiple = false,\n    noOptionsText = 'No options',\n    openOnFocus = false,\n    openText = 'Open',\n    PaperComponent = Paper,\n    PopperComponent = Popper,\n    popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n    readOnly = false,\n    renderGroup: renderGroupProp,\n    renderInput,\n    renderOption: renderOptionProp,\n    renderTags,\n    selectOnFocus = !props.freeSolo,\n    size = 'medium',\n    slotProps = {}\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    expanded,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  }));\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  const {\n    onMouseDown: handleInputMouseDown\n  } = getInputProps();\n  const {\n    ref: externalListboxRef\n  } = ListboxProps != null ? ListboxProps : {};\n\n  const _getListboxProps = getListboxProps(),\n        {\n    ref: listboxRef\n  } = _getListboxProps,\n        otherListboxProps = _objectWithoutPropertiesLoose(_getListboxProps, _excluded2);\n\n  const combinedListboxRef = useForkRef(listboxRef, externalListboxRef);\n\n  const defaultGetOptionLabel = option => {\n    var _option$label;\n\n    return (_option$label = option.label) != null ? _option$label : option;\n  };\n\n  const getOptionLabel = getOptionLabelProp || defaultGetOptionLabel; // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\n\n  const ownerState = _extends({}, props, {\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    getOptionLabel,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  let startAdornment;\n\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => _extends({\n      className: classes.tag,\n      disabled\n    }, getTagProps(params));\n\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps, ownerState);\n    } else {\n      startAdornment = value.map((option, index) => /*#__PURE__*/_jsx(Chip, _extends({\n        label: getOptionLabel(option),\n        size: size\n      }, getCustomizedTagProps({\n        index\n      }), ChipProps)));\n    }\n  }\n\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      ownerState: ownerState,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      ownerState: ownerState,\n      children: params.children\n    })]\n  }, params.key);\n\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n\n  const defaultRenderOption = (props2, option) => /*#__PURE__*/_jsx(\"li\", _extends({}, props2, {\n    children: getOptionLabel(option)\n  }));\n\n  const renderOption = renderOptionProp || defaultRenderOption;\n\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, optionProps, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      index,\n      inputValue\n    }, ownerState);\n  };\n\n  const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;\n  const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;\n  const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;\n  const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, _extends({\n      ref: ref,\n      className: clsx(classes.root, className),\n      ownerState: ownerState\n    }, getRootProps(other), {\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: _extends({\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment,\n          onClick: event => {\n            if (event.target === event.currentTarget) {\n              handleInputMouseDown(event);\n            }\n          }\n        }, (hasClearIcon || hasPopupIcon) && {\n          endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n            className: classes.endAdornment,\n            ownerState: ownerState,\n            children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, _extends({}, getClearProps(), {\n              \"aria-label\": clearText,\n              title: clearText,\n              ownerState: ownerState\n            }, clearIndicatorSlotProps, {\n              className: clsx(classes.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),\n              children: clearIcon\n            })) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {\n              disabled: disabled,\n              \"aria-label\": popupOpen ? closeText : openText,\n              title: popupOpen ? closeText : openText,\n              ownerState: ownerState\n            }, popupIndicatorSlotProps, {\n              className: clsx(classes.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),\n              children: popupIcon\n            })) : null]\n          })\n        }),\n        inputProps: _extends({\n          className: classes.input,\n          disabled,\n          readOnly\n        }, getInputProps())\n      })\n    })), anchorEl ? /*#__PURE__*/_jsx(AutocompletePopper, _extends({\n      as: PopperComponent,\n      disablePortal: disablePortal,\n      style: {\n        width: anchorEl ? anchorEl.clientWidth : null\n      },\n      ownerState: ownerState,\n      role: \"presentation\",\n      anchorEl: anchorEl,\n      open: popupOpen\n    }, popperSlotProps, {\n      className: clsx(classes.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),\n      children: /*#__PURE__*/_jsxs(AutocompletePaper, _extends({\n        ownerState: ownerState,\n        as: PaperComponent\n      }, paperSlotProps, {\n        className: clsx(classes.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),\n        children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(AutocompleteLoading, {\n          className: classes.loading,\n          ownerState: ownerState,\n          children: loadingText\n        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(AutocompleteNoOptions, {\n          className: classes.noOptions,\n          ownerState: ownerState,\n          role: \"presentation\",\n          onMouseDown: event => {\n            // Prevent input blur when interacting with the \"no options\" content\n            event.preventDefault();\n          },\n          children: noOptionsText\n        }) : null, groupedOptions.length > 0 ? /*#__PURE__*/_jsx(AutocompleteListbox, _extends({\n          as: ListboxComponent,\n          className: classes.listbox,\n          ownerState: ownerState\n        }, otherListboxProps, ListboxProps, {\n          ref: combinedListboxRef,\n          children: groupedOptions.map((option, index) => {\n            if (groupBy) {\n              return renderGroup({\n                key: option.key,\n                group: option.group,\n                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n              });\n            }\n\n            return renderListOption(option, index);\n          })\n        })) : null]\n      }))\n    })) : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\r\n   * known as the completion string, appears inline after the input cursor in the textbox.\r\n   * The inline completion string is visually highlighted and has a selected state.\r\n   * @default false\r\n   */\n  autoComplete: PropTypes.bool,\n\n  /**\r\n   * If `true`, the first option is automatically highlighted.\r\n   * @default false\r\n   */\n  autoHighlight: PropTypes.bool,\n\n  /**\r\n   * If `true`, the selected option becomes the value of the input\r\n   * when the Autocomplete loses focus unless the user chooses\r\n   * a different option or changes the character string in the input.\r\n   *\r\n   * When using `freeSolo` mode, the typed value will be the input value\r\n   * if the Autocomplete loses focus without highlighting an option.\r\n   * @default false\r\n   */\n  autoSelect: PropTypes.bool,\n\n  /**\r\n   * Control if the input should be blurred when an option is selected:\r\n   *\r\n   * - `false` the input is not blurred.\r\n   * - `true` the input is always blurred.\r\n   * - `touch` the input is blurred after a touch event.\r\n   * - `mouse` the input is blurred after a mouse event.\r\n   * @default false\r\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n\n  /**\r\n   * Props applied to the [`Chip`](/material-ui/api/chip/) element.\r\n   */\n  ChipProps: PropTypes.object,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   */\n  classes: PropTypes.object,\n\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * The icon to display in place of the default clear icon.\r\n   * @default <ClearIcon fontSize=\"small\" />\r\n   */\n  clearIcon: PropTypes.node,\n\n  /**\r\n   * If `true`, the input's text is cleared on blur if no value is selected.\r\n   *\r\n   * Set to `true` if you want to help the user enter a new value.\r\n   * Set to `false` if you want to help the user resume their search.\r\n   * @default !props.freeSolo\r\n   */\n  clearOnBlur: PropTypes.bool,\n\n  /**\r\n   * If `true`, clear all values when the user presses escape and the popup is closed.\r\n   * @default false\r\n   */\n  clearOnEscape: PropTypes.bool,\n\n  /**\r\n   * Override the default text for the *clear* icon button.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\r\n   * @default 'Clear'\r\n   */\n  clearText: PropTypes.string,\n\n  /**\r\n   * Override the default text for the *close popup* icon button.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\r\n   * @default 'Close'\r\n   */\n  closeText: PropTypes.string,\n\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\n  componentsProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n\n  /**\r\n   * The default value. Use when the component is not controlled.\r\n   * @default props.multiple ? [] : null\r\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\n    }\n\n    return null;\n  }),\n\n  /**\r\n   * If `true`, the input can't be cleared.\r\n   * @default false\r\n   */\n  disableClearable: PropTypes.bool,\n\n  /**\r\n   * If `true`, the popup won't close when a value is selected.\r\n   * @default false\r\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\r\n   * If `true`, the component is disabled.\r\n   * @default false\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * If `true`, will allow focus on disabled items.\r\n   * @default false\r\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\r\n   * If `true`, the list box in the popup will not wrap focus.\r\n   * @default false\r\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\r\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\r\n   * @default false\r\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\r\n   * A function that determines the filtered options to be rendered on search.\r\n   *\r\n   * @default createFilterOptions()\r\n   * @param {Value[]} options The options to render.\r\n   * @param {object} state The state of the component.\r\n   * @returns {Value[]}\r\n   */\n  filterOptions: PropTypes.func,\n\n  /**\r\n   * If `true`, hide the selected options from the list box.\r\n   * @default false\r\n   */\n  filterSelectedOptions: PropTypes.bool,\n\n  /**\r\n   * Force the visibility display of the popup icon.\r\n   * @default 'auto'\r\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n\n  /**\r\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\r\n   * @default false\r\n   */\n  freeSolo: PropTypes.bool,\n\n  /**\r\n   * If `true`, the input will take up the full width of its container.\r\n   * @default false\r\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\r\n   * The label to display when the tags are truncated (`limitTags`).\r\n   *\r\n   * @param {number} more The number of truncated tags.\r\n   * @returns {ReactNode}\r\n   * @default (more) => `+${more}`\r\n   */\n  getLimitTagsText: PropTypes.func,\n\n  /**\r\n   * Used to determine the disabled state for a given option.\r\n   *\r\n   * @param {Value} option The option to test.\r\n   * @returns {boolean}\r\n   */\n  getOptionDisabled: PropTypes.func,\n\n  /**\r\n   * Used to determine the string value for a given option.\r\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\r\n   *\r\n   * If used in free solo mode, it must accept both the type of the options and a string.\r\n   *\r\n   * @param {Value} option\r\n   * @returns {string}\r\n   * @default (option) => option.label ?? option\r\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\r\n   * If provided, the options will be grouped under the returned string.\r\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\r\n   *\r\n   * @param {Value} options The options to group.\r\n   * @returns {string}\r\n   */\n  groupBy: PropTypes.func,\n\n  /**\r\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\r\n   * It should move focus to the first option and last option, respectively.\r\n   * @default !props.freeSolo\r\n   */\n  handleHomeEndKeys: PropTypes.bool,\n\n  /**\r\n   * This prop is used to help implement the accessibility logic.\r\n   * If you don't provide an id it will fall back to a randomly generated one.\r\n   */\n  id: PropTypes.string,\n\n  /**\r\n   * If `true`, the highlight can move to the input.\r\n   * @default false\r\n   */\n  includeInputInList: PropTypes.bool,\n\n  /**\r\n   * The input value.\r\n   */\n  inputValue: PropTypes.string,\n\n  /**\r\n   * Used to determine if the option represents the given value.\r\n   * Uses strict equality by default.\r\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\r\n   *\r\n   * @param {Value} option The option to test.\r\n   * @param {Value} value The value to test against.\r\n   * @returns {boolean}\r\n   */\n  isOptionEqualToValue: PropTypes.func,\n\n  /**\r\n   * The maximum number of tags that will be visible when not focused.\r\n   * Set `-1` to disable the limit.\r\n   * @default -1\r\n   */\n  limitTags: integerPropType,\n\n  /**\r\n   * The component used to render the listbox.\r\n   * @default 'ul'\r\n   */\n  ListboxComponent: PropTypes.elementType,\n\n  /**\r\n   * Props applied to the Listbox element.\r\n   */\n  ListboxProps: PropTypes.object,\n\n  /**\r\n   * If `true`, the component is in a loading state.\r\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, e.g. `options` are empty).\r\n   * @default false\r\n   */\n  loading: PropTypes.bool,\n\n  /**\r\n   * Text to display when in a loading state.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\r\n   * @default 'Loading…'\r\n   */\n  loadingText: PropTypes.node,\n\n  /**\r\n   * If `true`, `value` must be an array and the menu will support multiple selections.\r\n   * @default false\r\n   */\n  multiple: PropTypes.bool,\n\n  /**\r\n   * Text to display when there are no options.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\r\n   * @default 'No options'\r\n   */\n  noOptionsText: PropTypes.node,\n\n  /**\r\n   * Callback fired when the value changes.\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   * @param {Value|Value[]} value The new value of the component.\r\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\r\n   * @param {string} [details]\r\n   */\n  onChange: PropTypes.func,\n\n  /**\r\n   * Callback fired when the popup requests to be closed.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\r\n   */\n  onClose: PropTypes.func,\n\n  /**\r\n   * Callback fired when the highlight option changes.\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   * @param {Value} option The highlighted option.\r\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`, `\"touch\"`.\r\n   */\n  onHighlightChange: PropTypes.func,\n\n  /**\r\n   * Callback fired when the input value changes.\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   * @param {string} value The new value of the text input.\r\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\r\n   */\n  onInputChange: PropTypes.func,\n\n  /**\r\n   * Callback fired when the popup requests to be opened.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   */\n  onOpen: PropTypes.func,\n\n  /**\r\n   * If `true`, the component is shown.\r\n   */\n  open: PropTypes.bool,\n\n  /**\r\n   * If `true`, the popup will open on input focus.\r\n   * @default false\r\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\r\n   * Override the default text for the *open popup* icon button.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\r\n   * @default 'Open'\r\n   */\n  openText: PropTypes.string,\n\n  /**\r\n   * Array of options.\r\n   */\n  options: PropTypes.array.isRequired,\n\n  /**\r\n   * The component used to render the body of the popup.\r\n   * @default Paper\r\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\r\n   * The component used to position the popup.\r\n   * @default Popper\r\n   */\n  PopperComponent: PropTypes.elementType,\n\n  /**\r\n   * The icon to display in place of the default popup icon.\r\n   * @default <ArrowDropDownIcon />\r\n   */\n  popupIcon: PropTypes.node,\n\n  /**\r\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\r\n   * @default false\r\n   */\n  readOnly: PropTypes.bool,\n\n  /**\r\n   * Render the group.\r\n   *\r\n   * @param {AutocompleteRenderGroupParams} params The group to render.\r\n   * @returns {ReactNode}\r\n   */\n  renderGroup: PropTypes.func,\n\n  /**\r\n   * Render the input.\r\n   *\r\n   * @param {object} params\r\n   * @returns {ReactNode}\r\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\r\n   * Render the option, use `getOptionLabel` by default.\r\n   *\r\n   * @param {object} props The props to apply on the li element.\r\n   * @param {Value} option The option to render.\r\n   * @param {object} state The state of each option.\r\n   * @param {object} ownerState The state of the Autocomplete component.\r\n   * @returns {ReactNode}\r\n   */\n  renderOption: PropTypes.func,\n\n  /**\r\n   * Render the selected value.\r\n   *\r\n   * @param {Value[]} value The `value` provided to the component.\r\n   * @param {function} getTagProps A tag props getter.\r\n   * @param {object} ownerState The state of the Autocomplete component.\r\n   * @returns {ReactNode}\r\n   */\n  renderTags: PropTypes.func,\n\n  /**\r\n   * If `true`, the input's text is selected on focus.\r\n   * It helps the user clear the selected value.\r\n   * @default !props.freeSolo\r\n   */\n  selectOnFocus: PropTypes.bool,\n\n  /**\r\n   * The size of the component.\r\n   * @default 'medium'\r\n   */\n  size: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),\n\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\r\n   * The value of the autocomplete.\r\n   *\r\n   * The value must have reference equality with the option in order to be selected.\r\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\r\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/@mui/material/Autocomplete/Autocomplete.js"],"names":["_objectWithoutPropertiesLoose","_extends","_ClearIcon","_ArrowDropDownIcon","_excluded","_excluded2","React","PropTypes","clsx","chainPropTypes","integerPropType","unstable_composeClasses","composeClasses","useAutocomplete","createFilterOptions","alpha","Popper","ListSubheader","Paper","IconButton","Chip","inputClasses","inputBaseClasses","outlinedInputClasses","filledInputClasses","ClearIcon","ArrowDropDownIcon","useThemeProps","styled","autocompleteClasses","getAutocompleteUtilityClass","capitalize","useForkRef","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","classes","disablePortal","expanded","focused","fullWidth","hasClearIcon","hasPopupIcon","inputFocused","popupOpen","size","slots","root","inputRoot","input","tag","endAdornment","clearIndicator","popupIndicator","popper","paper","listbox","loading","noOptions","option","groupLabel","groupUl","AutocompleteRoot","name","slot","overridesResolver","props","styles","visibility","width","margin","maxWidth","flexWrap","paddingRight","minWidth","paddingBottom","padding","sizeSmall","right","paddingTop","paddingLeft","hiddenLabel","flexGrow","textOverflow","opacity","AutocompleteEndAdornment","position","top","AutocompleteClearIndicator","marginRight","AutocompletePopupIndicator","popupIndicatorOpen","transform","AutocompletePopper","popperDisablePortal","theme","zIndex","vars","modal","AutocompletePaper","typography","body1","overflow","AutocompleteLoading","color","palette","text","secondary","AutocompleteNoOptions","AutocompleteListbox","listStyle","maxHeight","minHeight","display","justifyContent","alignItems","cursor","boxSizing","outline","WebkitTapHighlightColor","breakpoints","up","backgroundColor","action","hover","disabledOpacity","pointerEvents","focusVisible","focus","primary","mainChannel","selectedOpacity","main","hoverOpacity","selected","focusOpacity","AutocompleteGroupLabel","background","AutocompleteGroupUl","Autocomplete","forwardRef","inProps","ref","_slotProps$clearIndic","_slotProps$paper","_slotProps$popper","_slotProps$popupIndic","autoComplete","autoHighlight","autoSelect","blurOnSelect","ChipProps","className","clearIcon","fontSize","clearOnBlur","freeSolo","clearOnEscape","clearText","closeText","componentsProps","defaultValue","multiple","disableClearable","disableCloseOnSelect","disabled","disabledItemsFocusable","disableListWrap","filterSelectedOptions","forcePopupIcon","getLimitTagsText","more","getOptionLabel","getOptionLabelProp","groupBy","handleHomeEndKeys","includeInputInList","limitTags","ListboxComponent","ListboxProps","loadingText","noOptionsText","openOnFocus","openText","PaperComponent","PopperComponent","popupIcon","readOnly","renderGroup","renderGroupProp","renderInput","renderOption","renderOptionProp","renderTags","selectOnFocus","slotProps","other","getRootProps","getInputProps","getInputLabelProps","getPopupIndicatorProps","getClearProps","getTagProps","getListboxProps","getOptionProps","value","dirty","id","focusedTag","anchorEl","setAnchorEl","inputValue","groupedOptions","componentName","onMouseDown","handleInputMouseDown","externalListboxRef","_getListboxProps","listboxRef","otherListboxProps","combinedListboxRef","defaultGetOptionLabel","_option$label","label","startAdornment","length","getCustomizedTagProps","params","map","index","Array","isArray","splice","push","children","defaultRenderGroup","component","group","key","defaultRenderOption","props2","renderListOption","optionProps","clearIndicatorSlotProps","paperSlotProps","popperSlotProps","popupIndicatorSlotProps","Fragment","undefined","InputLabelProps","InputProps","onClick","event","target","currentTarget","title","inputProps","as","style","clientWidth","role","open","preventDefault","options","option2","index2","process","env","NODE_ENV","propTypes","bool","oneOfType","oneOf","object","string","node","shape","any","Error","join","filterOptions","func","getOptionDisabled","isOptionEqualToValue","elementType","onChange","onClose","onHighlightChange","onInputChange","onOpen","array","isRequired","sx","arrayOf"],"mappings":"AAAA;;AAEA,OAAOA,6BAAP,MAA0C,yDAA1C;AACA,OAAOC,QAAP,MAAqB,oCAArB;;AACA,IAAIC,UAAJ,EAAgBC,kBAAhB;;AACA,MAAMC,SAAS,GAAG,CAAC,cAAD,EAAiB,eAAjB,EAAkC,YAAlC,EAAgD,cAAhD,EAAgE,WAAhE,EAA6E,WAA7E,EAA0F,WAA1F,EAAuG,aAAvG,EAAsH,eAAtH,EAAuI,WAAvI,EAAoJ,WAApJ,EAAiK,iBAAjK,EAAoL,cAApL,EAAoM,kBAApM,EAAwN,sBAAxN,EAAgP,UAAhP,EAA4P,wBAA5P,EAAsR,iBAAtR,EAAyS,eAAzS,EAA0T,eAA1T,EAA2U,uBAA3U,EAAoW,gBAApW,EAAsX,UAAtX,EAAkY,WAAlY,EAA+Y,kBAA/Y,EAAma,mBAAna,EAAwb,gBAAxb,EAA0c,sBAA1c,EAAke,SAAle,EAA6e,mBAA7e,EAAkgB,IAAlgB,EAAwgB,oBAAxgB,EAA8hB,YAA9hB,EAA4iB,WAA5iB,EAAyjB,kBAAzjB,EAA6kB,cAA7kB,EAA6lB,SAA7lB,EAAwmB,aAAxmB,EAAunB,UAAvnB,EAAmoB,eAAnoB,EAAopB,UAAppB,EAAgqB,SAAhqB,EAA2qB,mBAA3qB,EAAgsB,eAAhsB,EAAitB,QAAjtB,EAA2tB,MAA3tB,EAAmuB,aAAnuB,EAAkvB,UAAlvB,EAA8vB,SAA9vB,EAAywB,gBAAzwB,EAA2xB,iBAA3xB,EAA8yB,WAA9yB,EAA2zB,UAA3zB,EAAu0B,aAAv0B,EAAs1B,aAAt1B,EAAq2B,cAAr2B,EAAq3B,YAAr3B,EAAm4B,eAAn4B,EAAo5B,MAAp5B,EAA45B,WAA55B,EAAy6B,OAAz6B,CAAlB;AAAA,MACEC,UAAU,GAAG,CAAC,KAAD,CADf;AAEA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,YAAhD;AACA,SAASC,uBAAuB,IAAIC,cAApC,EAAoDC,eAApD,EAAqEC,mBAArE,QAAgG,WAAhG;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,OAAOC,oBAAP,MAAiC,uCAAjC;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,iBAAP,MAA8B,qCAA9B;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,mBAAP,IAA8BC,2BAA9B,QAAiE,uBAAjE;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,SAASC,IAAI,IAAIC,KAAjB,QAA8B,mBAA9B;;AACA,MAAMC,iBAAiB,GAAGC,UAAU,IAAI;AACtC,QAAM;AACJC,IAAAA,OADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,OAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA,YANI;AAOJC,IAAAA,YAPI;AAQJC,IAAAA,YARI;AASJC,IAAAA,SATI;AAUJC,IAAAA;AAVI,MAWFV,UAXJ;AAYA,QAAMW,KAAK,GAAG;AACZC,IAAAA,IAAI,EAAE,CAAC,MAAD,EAAST,QAAQ,IAAI,UAArB,EAAiCC,OAAO,IAAI,SAA5C,EAAuDC,SAAS,IAAI,WAApE,EAAiFC,YAAY,IAAI,cAAjG,EAAiHC,YAAY,IAAI,cAAjI,CADM;AAEZM,IAAAA,SAAS,EAAE,CAAC,WAAD,CAFC;AAGZC,IAAAA,KAAK,EAAE,CAAC,OAAD,EAAUN,YAAY,IAAI,cAA1B,CAHK;AAIZO,IAAAA,GAAG,EAAE,CAAC,KAAD,EAAS,UAAStB,UAAU,CAACiB,IAAD,CAAO,EAAnC,CAJO;AAKZM,IAAAA,YAAY,EAAE,CAAC,cAAD,CALF;AAMZC,IAAAA,cAAc,EAAE,CAAC,gBAAD,CANJ;AAOZC,IAAAA,cAAc,EAAE,CAAC,gBAAD,EAAmBT,SAAS,IAAI,oBAAhC,CAPJ;AAQZU,IAAAA,MAAM,EAAE,CAAC,QAAD,EAAWjB,aAAa,IAAI,qBAA5B,CARI;AASZkB,IAAAA,KAAK,EAAE,CAAC,OAAD,CATK;AAUZC,IAAAA,OAAO,EAAE,CAAC,SAAD,CAVG;AAWZC,IAAAA,OAAO,EAAE,CAAC,SAAD,CAXG;AAYZC,IAAAA,SAAS,EAAE,CAAC,WAAD,CAZC;AAaZC,IAAAA,MAAM,EAAE,CAAC,QAAD,CAbI;AAcZC,IAAAA,UAAU,EAAE,CAAC,YAAD,CAdA;AAeZC,IAAAA,OAAO,EAAE,CAAC,SAAD;AAfG,GAAd;AAiBA,SAAOpD,cAAc,CAACqC,KAAD,EAAQnB,2BAAR,EAAqCS,OAArC,CAArB;AACD,CA/BD;;AAgCA,MAAM0B,gBAAgB,GAAGrC,MAAM,CAAC,KAAD,EAAQ;AACrCsC,EAAAA,IAAI,EAAE,iBAD+B;AAErCC,EAAAA,IAAI,EAAE,MAF+B;AAGrCC,EAAAA,iBAAiB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpC,UAAM;AACJhC,MAAAA;AADI,QAEF+B,KAFJ;AAGA,UAAM;AACJ1B,MAAAA,SADI;AAEJC,MAAAA,YAFI;AAGJC,MAAAA,YAHI;AAIJC,MAAAA,YAJI;AAKJE,MAAAA;AALI,QAMFV,UANJ;AAOA,WAAO,CAAC;AACN,OAAE,MAAKT,mBAAmB,CAACwB,GAAI,EAA/B,GAAmCiB,MAAM,CAACjB;AADpC,KAAD,EAEJ;AACD,OAAE,MAAKxB,mBAAmB,CAACwB,GAAI,EAA/B,GAAmCiB,MAAM,CAAE,UAASvC,UAAU,CAACiB,IAAD,CAAO,EAA5B;AADxC,KAFI,EAIJ;AACD,OAAE,MAAKnB,mBAAmB,CAACsB,SAAU,EAArC,GAAyCmB,MAAM,CAACnB;AAD/C,KAJI,EAMJ;AACD,OAAE,MAAKtB,mBAAmB,CAACuB,KAAM,EAAjC,GAAqCkB,MAAM,CAAClB;AAD3C,KANI,EAQJ;AACD,OAAE,MAAKvB,mBAAmB,CAACuB,KAAM,EAAjC,GAAqCN,YAAY,IAAIwB,MAAM,CAACxB;AAD3D,KARI,EAUJwB,MAAM,CAACpB,IAVH,EAUSP,SAAS,IAAI2B,MAAM,CAAC3B,SAV7B,EAUwCE,YAAY,IAAIyB,MAAM,CAACzB,YAV/D,EAU6ED,YAAY,IAAI0B,MAAM,CAAC1B,YAVpG,CAAP;AAWD;AAzBoC,CAAR,CAAN,CA0BtB;AAAA,MAAC;AACFN,IAAAA;AADE,GAAD;AAAA,SAEGrC,QAAQ,CAAC;AACb,KAAE,KAAI4B,mBAAmB,CAACa,OAAQ,KAAIb,mBAAmB,CAAC0B,cAAe,EAAzE,GAA6E;AAC3EgB,MAAAA,UAAU,EAAE;AAD+D,KADhE;;AAIb;AACA,8BAA0B;AACxB,OAAE,YAAW1C,mBAAmB,CAAC0B,cAAe,EAAhD,GAAoD;AAClDgB,QAAAA,UAAU,EAAE;AADsC;AAD5B;AALb,GAAD,EAUXjC,UAAU,CAACK,SAAX,IAAwB;AACzB6B,IAAAA,KAAK,EAAE;AADkB,GAVb,EAYX;AACD,KAAE,MAAK3C,mBAAmB,CAACwB,GAAI,EAA/B,GAAmCpD,QAAQ,CAAC;AAC1CwE,MAAAA,MAAM,EAAE,CADkC;AAE1CC,MAAAA,QAAQ,EAAE;AAFgC,KAAD,EAGxCpC,UAAU,CAACU,IAAX,KAAoB,OAApB,IAA+B;AAChCyB,MAAAA,MAAM,EAAE,CADwB;AAEhCC,MAAAA,QAAQ,EAAE;AAFsB,KAHS,CAD1C;AAQD,KAAE,MAAK7C,mBAAmB,CAACsB,SAAU,EAArC,GAAyC;AACvCwB,MAAAA,QAAQ,EAAE,MAD6B;AAEvC,OAAE,IAAG9C,mBAAmB,CAACgB,YAAa,OAAMhB,mBAAmB,CAACe,YAAa,GAA7E,GAAkF;AAChFgC,QAAAA,YAAY,EAAE,KAAK;AAD6D,OAF3C;AAKvC,OAAE,IAAG/C,mBAAmB,CAACgB,YAAa,IAAGhB,mBAAmB,CAACe,YAAa,GAA1E,GAA+E;AAC7EgC,QAAAA,YAAY,EAAE,KAAK;AAD0D,OALxC;AAQvC,OAAE,MAAK/C,mBAAmB,CAACuB,KAAM,EAAjC,GAAqC;AACnCoB,QAAAA,KAAK,EAAE,CAD4B;AAEnCK,QAAAA,QAAQ,EAAE;AAFyB;AARE,KARxC;AAqBD,KAAE,MAAKxD,YAAY,CAAC6B,IAAK,EAAzB,GAA6B;AAC3B4B,MAAAA,aAAa,EAAE,CADY;AAE3B,2BAAqB;AACnBC,QAAAA,OAAO,EAAE;AADU;AAFM,KArB5B;AA2BD,KAAE,MAAK1D,YAAY,CAAC6B,IAAK,IAAG5B,gBAAgB,CAAC0D,SAAU,EAAvD,GAA2D;AACzD,OAAE,MAAK3D,YAAY,CAAC+B,KAAM,EAA1B,GAA8B;AAC5B2B,QAAAA,OAAO,EAAE;AADmB;AAD2B,KA3B1D;AAgCD,KAAE,MAAKxD,oBAAoB,CAAC2B,IAAK,EAAjC,GAAqC;AACnC6B,MAAAA,OAAO,EAAE,CAD0B;AAEnC,OAAE,IAAGlD,mBAAmB,CAACgB,YAAa,OAAMhB,mBAAmB,CAACe,YAAa,GAA7E,GAAkF;AAChFgC,QAAAA,YAAY,EAAE,KAAK,CAAL,GAAS;AADyD,OAF/C;AAKnC,OAAE,IAAG/C,mBAAmB,CAACgB,YAAa,IAAGhB,mBAAmB,CAACe,YAAa,GAA1E,GAA+E;AAC7EgC,QAAAA,YAAY,EAAE,KAAK,CAAL,GAAS;AADsD,OAL5C;AAQnC,OAAE,MAAK/C,mBAAmB,CAACuB,KAAM,EAAjC,GAAqC;AACnC2B,QAAAA,OAAO,EAAE;AAD0B,OARF;AAWnC,OAAE,MAAKlD,mBAAmB,CAACyB,YAAa,EAAxC,GAA4C;AAC1C2B,QAAAA,KAAK,EAAE;AADmC;AAXT,KAhCpC;AA+CD,KAAE,MAAK1D,oBAAoB,CAAC2B,IAAK,IAAG5B,gBAAgB,CAAC0D,SAAU,EAA/D,GAAmE;AACjE;AACA;AACAE,MAAAA,UAAU,EAAE,CAHqD;AAIjEJ,MAAAA,aAAa,EAAE,CAJkD;AAKjEK,MAAAA,WAAW,EAAE,CALoD;AAMjE,OAAE,MAAKtD,mBAAmB,CAACuB,KAAM,EAAjC,GAAqC;AACnC2B,QAAAA,OAAO,EAAE;AAD0B;AAN4B,KA/ClE;AAyDD,KAAE,MAAKvD,kBAAkB,CAAC0B,IAAK,EAA/B,GAAmC;AACjCgC,MAAAA,UAAU,EAAE,EADqB;AAEjCC,MAAAA,WAAW,EAAE,CAFoB;AAGjC,OAAE,IAAGtD,mBAAmB,CAACgB,YAAa,OAAMhB,mBAAmB,CAACe,YAAa,GAA7E,GAAkF;AAChFgC,QAAAA,YAAY,EAAE,KAAK,CAAL,GAAS;AADyD,OAHjD;AAMjC,OAAE,IAAG/C,mBAAmB,CAACgB,YAAa,IAAGhB,mBAAmB,CAACe,YAAa,GAA1E,GAA+E;AAC7EgC,QAAAA,YAAY,EAAE,KAAK,CAAL,GAAS;AADsD,OAN9C;AASjC,OAAE,MAAKpD,kBAAkB,CAAC4B,KAAM,EAAhC,GAAoC;AAClC2B,QAAAA,OAAO,EAAE;AADyB,OATH;AAYjC,OAAE,MAAKlD,mBAAmB,CAACyB,YAAa,EAAxC,GAA4C;AAC1C2B,QAAAA,KAAK,EAAE;AADmC;AAZX,KAzDlC;AAyED,KAAE,MAAKzD,kBAAkB,CAAC0B,IAAK,IAAG5B,gBAAgB,CAAC0D,SAAU,EAA7D,GAAiE;AAC/DF,MAAAA,aAAa,EAAE,CADgD;AAE/D,OAAE,MAAKtD,kBAAkB,CAAC4B,KAAM,EAAhC,GAAoC;AAClC2B,QAAAA,OAAO,EAAE;AADyB;AAF2B,KAzEhE;AA+ED,KAAE,MAAKzD,gBAAgB,CAAC8D,WAAY,EAApC,GAAwC;AACtCF,MAAAA,UAAU,EAAE;AAD0B,KA/EvC;AAkFD,KAAE,MAAK1D,kBAAkB,CAAC0B,IAAK,IAAG5B,gBAAgB,CAAC8D,WAAY,EAA/D,GAAmE;AACjEF,MAAAA,UAAU,EAAE,CADqD;AAEjEJ,MAAAA,aAAa,EAAE,CAFkD;AAGjE,OAAE,MAAKjD,mBAAmB,CAACuB,KAAM,EAAjC,GAAqC;AACnC8B,QAAAA,UAAU,EAAE,EADuB;AAEnCJ,QAAAA,aAAa,EAAE;AAFoB;AAH4B,KAlFlE;AA0FD,KAAE,MAAKtD,kBAAkB,CAAC0B,IAAK,IAAG5B,gBAAgB,CAAC8D,WAAY,IAAG9D,gBAAgB,CAAC0D,SAAU,EAA7F,GAAiG;AAC/F,OAAE,MAAKnD,mBAAmB,CAACuB,KAAM,EAAjC,GAAqC;AACnC8B,QAAAA,UAAU,EAAE,CADuB;AAEnCJ,QAAAA,aAAa,EAAE;AAFoB;AAD0D,KA1FhG;AAgGD,KAAE,MAAKjD,mBAAmB,CAACuB,KAAM,EAAjC,GAAqCnD,QAAQ,CAAC;AAC5CoF,MAAAA,QAAQ,EAAE,CADkC;AAE5CC,MAAAA,YAAY,EAAE,UAF8B;AAG5CC,MAAAA,OAAO,EAAE;AAHmC,KAAD,EAI1CjD,UAAU,CAACQ,YAAX,IAA2B;AAC5ByC,MAAAA,OAAO,EAAE;AADmB,KAJe;AAhG5C,GAZW,CAFX;AAAA,CA1BsB,CAAzB;AAgJA,MAAMC,wBAAwB,GAAG5D,MAAM,CAAC,KAAD,EAAQ;AAC7CsC,EAAAA,IAAI,EAAE,iBADuC;AAE7CC,EAAAA,IAAI,EAAE,cAFuC;AAG7CC,EAAAA,iBAAiB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAAChB;AAHA,CAAR,CAAN,CAI9B;AACD;AACAmC,EAAAA,QAAQ,EAAE,UAFT;AAGDR,EAAAA,KAAK,EAAE,CAHN;AAIDS,EAAAA,GAAG,EAAE,kBAJJ,CAIuB;;AAJvB,CAJ8B,CAAjC;AAWA,MAAMC,0BAA0B,GAAG/D,MAAM,CAACT,UAAD,EAAa;AACpD+C,EAAAA,IAAI,EAAE,iBAD8C;AAEpDC,EAAAA,IAAI,EAAE,gBAF8C;AAGpDC,EAAAA,iBAAiB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACf;AAHO,CAAb,CAAN,CAIhC;AACDqC,EAAAA,WAAW,EAAE,CAAC,CADb;AAEDb,EAAAA,OAAO,EAAE,CAFR;AAGDR,EAAAA,UAAU,EAAE;AAHX,CAJgC,CAAnC;AASA,MAAMsB,0BAA0B,GAAGjE,MAAM,CAACT,UAAD,EAAa;AACpD+C,EAAAA,IAAI,EAAE,iBAD8C;AAEpDC,EAAAA,IAAI,EAAE,gBAF8C;AAGpDC,EAAAA,iBAAiB,EAAE,QAEhBE,MAFgB;AAAA,QAAC;AAClBhC,MAAAA;AADkB,KAAD;AAAA,WAELrC,QAAQ,CAAC,EAAD,EAAKqE,MAAM,CAACd,cAAZ,EAA4BlB,UAAU,CAACS,SAAX,IAAwBuB,MAAM,CAACwB,kBAA3D,CAFH;AAAA;AAHiC,CAAb,CAAN,CAMhC;AAAA,MAAC;AACFxD,IAAAA;AADE,GAAD;AAAA,SAEGrC,QAAQ,CAAC;AACb8E,IAAAA,OAAO,EAAE,CADI;AAEba,IAAAA,WAAW,EAAE,CAAC;AAFD,GAAD,EAGXtD,UAAU,CAACS,SAAX,IAAwB;AACzBgD,IAAAA,SAAS,EAAE;AADc,GAHb,CAFX;AAAA,CANgC,CAAnC;AAcA,MAAMC,kBAAkB,GAAGpE,MAAM,CAACZ,MAAD,EAAS;AACxCkD,EAAAA,IAAI,EAAE,iBADkC;AAExCC,EAAAA,IAAI,EAAE,QAFkC;AAGxCC,EAAAA,iBAAiB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpC,UAAM;AACJhC,MAAAA;AADI,QAEF+B,KAFJ;AAGA,WAAO,CAAC;AACN,OAAE,MAAKxC,mBAAmB,CAACiC,MAAO,EAAlC,GAAsCQ,MAAM,CAACR;AADvC,KAAD,EAEJQ,MAAM,CAACb,MAFH,EAEWnB,UAAU,CAACE,aAAX,IAA4B8B,MAAM,CAAC2B,mBAF9C,CAAP;AAGD;AAVuC,CAAT,CAAN,CAWxB;AAAA,MAAC;AACFC,IAAAA,KADE;AAEF5D,IAAAA;AAFE,GAAD;AAAA,SAGGrC,QAAQ,CAAC;AACbkG,IAAAA,MAAM,EAAE,CAACD,KAAK,CAACE,IAAN,IAAcF,KAAf,EAAsBC,MAAtB,CAA6BE;AADxB,GAAD,EAEX/D,UAAU,CAACE,aAAX,IAA4B;AAC7BiD,IAAAA,QAAQ,EAAE;AADmB,GAFjB,CAHX;AAAA,CAXwB,CAA3B;AAmBA,MAAMa,iBAAiB,GAAG1E,MAAM,CAACV,KAAD,EAAQ;AACtCgD,EAAAA,IAAI,EAAE,iBADgC;AAEtCC,EAAAA,IAAI,EAAE,OAFgC;AAGtCC,EAAAA,iBAAiB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACZ;AAHP,CAAR,CAAN,CAIvB;AAAA,MAAC;AACFwC,IAAAA;AADE,GAAD;AAAA,SAEGjG,QAAQ,CAAC,EAAD,EAAKiG,KAAK,CAACK,UAAN,CAAiBC,KAAtB,EAA6B;AACzCC,IAAAA,QAAQ,EAAE;AAD+B,GAA7B,CAFX;AAAA,CAJuB,CAA1B;AASA,MAAMC,mBAAmB,GAAG9E,MAAM,CAAC,KAAD,EAAQ;AACxCsC,EAAAA,IAAI,EAAE,iBADkC;AAExCC,EAAAA,IAAI,EAAE,SAFkC;AAGxCC,EAAAA,iBAAiB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACV;AAHL,CAAR,CAAN,CAIzB;AAAA,MAAC;AACFsC,IAAAA;AADE,GAAD;AAAA,SAEI;AACLS,IAAAA,KAAK,EAAE,CAACT,KAAK,CAACE,IAAN,IAAcF,KAAf,EAAsBU,OAAtB,CAA8BC,IAA9B,CAAmCC,SADrC;AAEL/B,IAAAA,OAAO,EAAE;AAFJ,GAFJ;AAAA,CAJyB,CAA5B;AAUA,MAAMgC,qBAAqB,GAAGnF,MAAM,CAAC,KAAD,EAAQ;AAC1CsC,EAAAA,IAAI,EAAE,iBADoC;AAE1CC,EAAAA,IAAI,EAAE,WAFoC;AAG1CC,EAAAA,iBAAiB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACT;AAHH,CAAR,CAAN,CAI3B;AAAA,MAAC;AACFqC,IAAAA;AADE,GAAD;AAAA,SAEI;AACLS,IAAAA,KAAK,EAAE,CAACT,KAAK,CAACE,IAAN,IAAcF,KAAf,EAAsBU,OAAtB,CAA8BC,IAA9B,CAAmCC,SADrC;AAEL/B,IAAAA,OAAO,EAAE;AAFJ,GAFJ;AAAA,CAJ2B,CAA9B;AAUA,MAAMiC,mBAAmB,GAAGpF,MAAM,CAAC,KAAD,EAAQ;AACxCsC,EAAAA,IAAI,EAAE,iBADkC;AAExCC,EAAAA,IAAI,EAAE,SAFkC;AAGxCC,EAAAA,iBAAiB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACX;AAHL,CAAR,CAAN,CAIzB;AAAA,MAAC;AACFuC,IAAAA;AADE,GAAD;AAAA,SAEI;AACLe,IAAAA,SAAS,EAAE,MADN;AAELxC,IAAAA,MAAM,EAAE,CAFH;AAGLM,IAAAA,OAAO,EAAE,OAHJ;AAILmC,IAAAA,SAAS,EAAE,MAJN;AAKLT,IAAAA,QAAQ,EAAE,MALL;AAMLhB,IAAAA,QAAQ,EAAE,UANL;AAOL,KAAE,MAAK5D,mBAAmB,CAACiC,MAAO,EAAlC,GAAsC;AACpCqD,MAAAA,SAAS,EAAE,EADyB;AAEpCC,MAAAA,OAAO,EAAE,MAF2B;AAGpCX,MAAAA,QAAQ,EAAE,QAH0B;AAIpCY,MAAAA,cAAc,EAAE,YAJoB;AAKpCC,MAAAA,UAAU,EAAE,QALwB;AAMpCC,MAAAA,MAAM,EAAE,SAN4B;AAOpCrC,MAAAA,UAAU,EAAE,CAPwB;AAQpCsC,MAAAA,SAAS,EAAE,YARyB;AASpCC,MAAAA,OAAO,EAAE,GAT2B;AAUpCC,MAAAA,uBAAuB,EAAE,aAVW;AAWpC5C,MAAAA,aAAa,EAAE,CAXqB;AAYpCK,MAAAA,WAAW,EAAE,EAZuB;AAapCP,MAAAA,YAAY,EAAE,EAbsB;AAcpC,OAACsB,KAAK,CAACyB,WAAN,CAAkBC,EAAlB,CAAqB,IAArB,CAAD,GAA8B;AAC5BT,QAAAA,SAAS,EAAE;AADiB,OAdM;AAiBpC,OAAE,KAAItF,mBAAmB,CAACa,OAAQ,EAAlC,GAAsC;AACpCmF,QAAAA,eAAe,EAAE,CAAC3B,KAAK,CAACE,IAAN,IAAcF,KAAf,EAAsBU,OAAtB,CAA8BkB,MAA9B,CAAqCC,KADlB;AAEpC;AACA,gCAAwB;AACtBF,UAAAA,eAAe,EAAE;AADK;AAHY,OAjBF;AAwBpC,iCAA2B;AACzBtC,QAAAA,OAAO,EAAE,CAACW,KAAK,CAACE,IAAN,IAAcF,KAAf,EAAsBU,OAAtB,CAA8BkB,MAA9B,CAAqCE,eADrB;AAEzBC,QAAAA,aAAa,EAAE;AAFU,OAxBS;AA4BpC,OAAE,KAAIpG,mBAAmB,CAACqG,YAAa,EAAvC,GAA2C;AACzCL,QAAAA,eAAe,EAAE,CAAC3B,KAAK,CAACE,IAAN,IAAcF,KAAf,EAAsBU,OAAtB,CAA8BkB,MAA9B,CAAqCK;AADb,OA5BP;AA+BpC,iCAA2B;AACzBN,QAAAA,eAAe,EAAE3B,KAAK,CAACE,IAAN,GAAc,QAAOF,KAAK,CAACE,IAAN,CAAWQ,OAAX,CAAmBwB,OAAnB,CAA2BC,WAAY,MAAKnC,KAAK,CAACE,IAAN,CAAWQ,OAAX,CAAmBkB,MAAnB,CAA0BQ,eAAgB,GAA3G,GAAgHvH,KAAK,CAACmF,KAAK,CAACU,OAAN,CAAcwB,OAAd,CAAsBG,IAAvB,EAA6BrC,KAAK,CAACU,OAAN,CAAckB,MAAd,CAAqBQ,eAAlD,CAD7G;AAEzB,SAAE,KAAIzG,mBAAmB,CAACa,OAAQ,EAAlC,GAAsC;AACpCmF,UAAAA,eAAe,EAAE3B,KAAK,CAACE,IAAN,GAAc,QAAOF,KAAK,CAACE,IAAN,CAAWQ,OAAX,CAAmBwB,OAAnB,CAA2BC,WAAY,WAAUnC,KAAK,CAACE,IAAN,CAAWQ,OAAX,CAAmBkB,MAAnB,CAA0BQ,eAAgB,MAAKpC,KAAK,CAACE,IAAN,CAAWQ,OAAX,CAAmBkB,MAAnB,CAA0BU,YAAa,IAA5J,GAAkKzH,KAAK,CAACmF,KAAK,CAACU,OAAN,CAAcwB,OAAd,CAAsBG,IAAvB,EAA6BrC,KAAK,CAACU,OAAN,CAAckB,MAAd,CAAqBQ,eAArB,GAAuCpC,KAAK,CAACU,OAAN,CAAckB,MAAd,CAAqBU,YAAzF,CADpJ;AAEpC;AACA,kCAAwB;AACtBX,YAAAA,eAAe,EAAE,CAAC3B,KAAK,CAACE,IAAN,IAAcF,KAAf,EAAsBU,OAAtB,CAA8BkB,MAA9B,CAAqCW;AADhC;AAHY,SAFb;AASzB,SAAE,KAAI5G,mBAAmB,CAACqG,YAAa,EAAvC,GAA2C;AACzCL,UAAAA,eAAe,EAAE3B,KAAK,CAACE,IAAN,GAAc,QAAOF,KAAK,CAACE,IAAN,CAAWQ,OAAX,CAAmBwB,OAAnB,CAA2BC,WAAY,WAAUnC,KAAK,CAACE,IAAN,CAAWQ,OAAX,CAAmBkB,MAAnB,CAA0BQ,eAAgB,MAAKpC,KAAK,CAACE,IAAN,CAAWQ,OAAX,CAAmBkB,MAAnB,CAA0BY,YAAa,IAA5J,GAAkK3H,KAAK,CAACmF,KAAK,CAACU,OAAN,CAAcwB,OAAd,CAAsBG,IAAvB,EAA6BrC,KAAK,CAACU,OAAN,CAAckB,MAAd,CAAqBQ,eAArB,GAAuCpC,KAAK,CAACU,OAAN,CAAckB,MAAd,CAAqBY,YAAzF;AAD/I;AATlB;AA/BS;AAPjC,GAFJ;AAAA,CAJyB,CAA5B;AA2DA,MAAMC,sBAAsB,GAAG/G,MAAM,CAACX,aAAD,EAAgB;AACnDiD,EAAAA,IAAI,EAAE,iBAD6C;AAEnDC,EAAAA,IAAI,EAAE,YAF6C;AAGnDC,EAAAA,iBAAiB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACP;AAHM,CAAhB,CAAN,CAI5B;AAAA,MAAC;AACFmC,IAAAA;AADE,GAAD;AAAA,SAEI;AACL2B,IAAAA,eAAe,EAAE,CAAC3B,KAAK,CAACE,IAAN,IAAcF,KAAf,EAAsBU,OAAtB,CAA8BgC,UAA9B,CAAyClF,KADrD;AAELgC,IAAAA,GAAG,EAAE,CAAC;AAFD,GAFJ;AAAA,CAJ4B,CAA/B;AAUA,MAAMmD,mBAAmB,GAAGjH,MAAM,CAAC,IAAD,EAAO;AACvCsC,EAAAA,IAAI,EAAE,iBADiC;AAEvCC,EAAAA,IAAI,EAAE,SAFiC;AAGvCC,EAAAA,iBAAiB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACN;AAHN,CAAP,CAAN,CAIzB;AACDe,EAAAA,OAAO,EAAE,CADR;AAED,GAAE,MAAKlD,mBAAmB,CAACiC,MAAO,EAAlC,GAAsC;AACpCqB,IAAAA,WAAW,EAAE;AADuB;AAFrC,CAJyB,CAA5B;AAUA,SAASrE,mBAAT;AACA,MAAMgI,YAAY,GAAG,aAAaxI,KAAK,CAACyI,UAAN,CAAiB,SAASD,YAAT,CAAsBE,OAAtB,EAA+BC,GAA/B,EAAoC;AACrF,MAAIC,qBAAJ,EAA2BC,gBAA3B,EAA6CC,iBAA7C,EAAgEC,qBAAhE;;AACA,QAAMhF,KAAK,GAAG1C,aAAa,CAAC;AAC1B0C,IAAAA,KAAK,EAAE2E,OADmB;AAE1B9E,IAAAA,IAAI,EAAE;AAFoB,GAAD,CAA3B;AAKA;;AACA,QAAM;AACFoF,IAAAA,YAAY,GAAG,KADb;AAEFC,IAAAA,aAAa,GAAG,KAFd;AAGFC,IAAAA,UAAU,GAAG,KAHX;AAIFC,IAAAA,YAAY,GAAG,KAJb;AAKFC,IAAAA,SALE;AAMFC,IAAAA,SANE;AAOFC,IAAAA,SAAS,GAAG1J,UAAU,KAAKA,UAAU,GAAG,aAAagC,IAAI,CAACT,SAAD,EAAY;AACnEoI,MAAAA,QAAQ,EAAE;AADyD,KAAZ,CAAnC,CAPpB;AAUFC,IAAAA,WAAW,GAAG,CAACzF,KAAK,CAAC0F,QAVnB;AAWFC,IAAAA,aAAa,GAAG,KAXd;AAYFC,IAAAA,SAAS,GAAG,OAZV;AAaFC,IAAAA,SAAS,GAAG,OAbV;AAcFC,IAAAA,eAAe,GAAG,EAdhB;AAeFC,IAAAA,YAAY,GAAG/F,KAAK,CAACgG,QAAN,GAAiB,EAAjB,GAAsB,IAfnC;AAgBFC,IAAAA,gBAAgB,GAAG,KAhBjB;AAiBFC,IAAAA,oBAAoB,GAAG,KAjBrB;AAkBFC,IAAAA,QAAQ,GAAG,KAlBT;AAmBFC,IAAAA,sBAAsB,GAAG,KAnBvB;AAoBFC,IAAAA,eAAe,GAAG,KApBhB;AAqBFlI,IAAAA,aAAa,GAAG,KArBd;AAsBFmI,IAAAA,qBAAqB,GAAG,KAtBtB;AAuBFC,IAAAA,cAAc,GAAG,MAvBf;AAwBFb,IAAAA,QAAQ,GAAG,KAxBT;AAyBFpH,IAAAA,SAAS,GAAG,KAzBV;AA0BFkI,IAAAA,gBAAgB,GAAGC,IAAI,IAAK,IAAGA,IAAK,EA1BlC;AA2BFC,IAAAA,cAAc,EAAEC,kBA3Bd;AA4BFC,IAAAA,OA5BE;AA6BFC,IAAAA,iBAAiB,GAAG,CAAC7G,KAAK,CAAC0F,QA7BzB;AA8BFoB,IAAAA,kBAAkB,GAAG,KA9BnB;AA+BFC,IAAAA,SAAS,GAAG,CAAC,CA/BX;AAgCFC,IAAAA,gBAAgB,GAAG,IAhCjB;AAiCFC,IAAAA,YAjCE;AAkCF1H,IAAAA,OAAO,GAAG,KAlCR;AAmCF2H,IAAAA,WAAW,GAAG,UAnCZ;AAoCFlB,IAAAA,QAAQ,GAAG,KApCT;AAqCFmB,IAAAA,aAAa,GAAG,YArCd;AAsCFC,IAAAA,WAAW,GAAG,KAtCZ;AAuCFC,IAAAA,QAAQ,GAAG,MAvCT;AAwCFC,IAAAA,cAAc,GAAGzK,KAxCf;AAyCF0K,IAAAA,eAAe,GAAG5K,MAzChB;AA0CF6K,IAAAA,SAAS,GAAG1L,kBAAkB,KAAKA,kBAAkB,GAAG,aAAa+B,IAAI,CAACR,iBAAD,EAAoB,EAApB,CAA3C,CA1C5B;AA2CFoK,IAAAA,QAAQ,GAAG,KA3CT;AA4CFC,IAAAA,WAAW,EAAEC,eA5CX;AA6CFC,IAAAA,WA7CE;AA8CFC,IAAAA,YAAY,EAAEC,gBA9CZ;AA+CFC,IAAAA,UA/CE;AAgDFC,IAAAA,aAAa,GAAG,CAAChI,KAAK,CAAC0F,QAhDrB;AAiDF/G,IAAAA,IAAI,GAAG,QAjDL;AAkDFsJ,IAAAA,SAAS,GAAG;AAlDV,MAmDAjI,KAnDN;AAAA,QAoDEkI,KAAK,GAAGvM,6BAA6B,CAACqE,KAAD,EAAQjE,SAAR,CApDvC;AAqDA;;;AAEA,QAAM;AACJoM,IAAAA,YADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,kBAHI;AAIJC,IAAAA,sBAJI;AAKJC,IAAAA,aALI;AAMJC,IAAAA,WANI;AAOJC,IAAAA,eAPI;AAQJC,IAAAA,cARI;AASJC,IAAAA,KATI;AAUJC,IAAAA,KAVI;AAWJxK,IAAAA,QAXI;AAYJyK,IAAAA,EAZI;AAaJnK,IAAAA,SAbI;AAcJL,IAAAA,OAdI;AAeJyK,IAAAA,UAfI;AAgBJC,IAAAA,QAhBI;AAiBJC,IAAAA,WAjBI;AAkBJC,IAAAA,UAlBI;AAmBJC,IAAAA;AAnBI,MAoBF1M,eAAe,CAACZ,QAAQ,CAAC,EAAD,EAAKoE,KAAL,EAAY;AACtCmJ,IAAAA,aAAa,EAAE;AADuB,GAAZ,CAAT,CApBnB;AAuBA,QAAM5K,YAAY,GAAG,CAAC0H,gBAAD,IAAqB,CAACE,QAAtB,IAAkCyC,KAAlC,IAA2C,CAACnB,QAAjE;AACA,QAAMjJ,YAAY,GAAG,CAAC,CAACkH,QAAD,IAAaa,cAAc,KAAK,IAAjC,KAA0CA,cAAc,KAAK,KAAlF;AACA,QAAM;AACJ6C,IAAAA,WAAW,EAAEC;AADT,MAEFjB,aAAa,EAFjB;AAGA,QAAM;AACJxD,IAAAA,GAAG,EAAE0E;AADD,MAEFrC,YAAY,IAAI,IAAhB,GAAuBA,YAAvB,GAAsC,EAF1C;;AAGA,QAAMsC,gBAAgB,GAAGd,eAAe,EAAxC;AAAA,QACE;AACE7D,IAAAA,GAAG,EAAE4E;AADP,MAEID,gBAHN;AAAA,QAIEE,iBAAiB,GAAG9N,6BAA6B,CAAC4N,gBAAD,EAAmBvN,UAAnB,CAJnD;;AAKA,QAAM0N,kBAAkB,GAAG/L,UAAU,CAAC6L,UAAD,EAAaF,kBAAb,CAArC;;AACA,QAAMK,qBAAqB,GAAGlK,MAAM,IAAI;AACtC,QAAImK,aAAJ;;AACA,WAAO,CAACA,aAAa,GAAGnK,MAAM,CAACoK,KAAxB,KAAkC,IAAlC,GAAyCD,aAAzC,GAAyDnK,MAAhE;AACD,GAHD;;AAIA,QAAMiH,cAAc,GAAGC,kBAAkB,IAAIgD,qBAA7C,CAxGqF,CA0GrF;;AACA,QAAM1L,UAAU,GAAGrC,QAAQ,CAAC,EAAD,EAAKoE,KAAL,EAAY;AACrC7B,IAAAA,aADqC;AAErCC,IAAAA,QAFqC;AAGrCC,IAAAA,OAHqC;AAIrCC,IAAAA,SAJqC;AAKrCoI,IAAAA,cALqC;AAMrCnI,IAAAA,YANqC;AAOrCC,IAAAA,YAPqC;AAQrCC,IAAAA,YAAY,EAAEqK,UAAU,KAAK,CAAC,CARO;AASrCpK,IAAAA,SATqC;AAUrCC,IAAAA;AAVqC,GAAZ,CAA3B;;AAYA,QAAMT,OAAO,GAAGF,iBAAiB,CAACC,UAAD,CAAjC;AACA,MAAI6L,cAAJ;;AACA,MAAI9D,QAAQ,IAAI2C,KAAK,CAACoB,MAAN,GAAe,CAA/B,EAAkC;AAChC,UAAMC,qBAAqB,GAAGC,MAAM,IAAIrO,QAAQ,CAAC;AAC/C0J,MAAAA,SAAS,EAAEpH,OAAO,CAACc,GAD4B;AAE/CmH,MAAAA;AAF+C,KAAD,EAG7CqC,WAAW,CAACyB,MAAD,CAHkC,CAAhD;;AAIA,QAAIlC,UAAJ,EAAgB;AACd+B,MAAAA,cAAc,GAAG/B,UAAU,CAACY,KAAD,EAAQqB,qBAAR,EAA+B/L,UAA/B,CAA3B;AACD,KAFD,MAEO;AACL6L,MAAAA,cAAc,GAAGnB,KAAK,CAACuB,GAAN,CAAU,CAACzK,MAAD,EAAS0K,KAAT,KAAmB,aAAatM,IAAI,CAACd,IAAD,EAAOnB,QAAQ,CAAC;AAC7EiO,QAAAA,KAAK,EAAEnD,cAAc,CAACjH,MAAD,CADwD;AAE7Ed,QAAAA,IAAI,EAAEA;AAFuE,OAAD,EAG3EqL,qBAAqB,CAAC;AACvBG,QAAAA;AADuB,OAAD,CAHsD,EAK1E9E,SAL0E,CAAf,CAA9C,CAAjB;AAMD;AACF;;AACD,MAAI0B,SAAS,GAAG,CAAC,CAAb,IAAkBqD,KAAK,CAACC,OAAN,CAAcP,cAAd,CAAtB,EAAqD;AACnD,UAAMrD,IAAI,GAAGqD,cAAc,CAACC,MAAf,GAAwBhD,SAArC;;AACA,QAAI,CAAC1I,OAAD,IAAYoI,IAAI,GAAG,CAAvB,EAA0B;AACxBqD,MAAAA,cAAc,GAAGA,cAAc,CAACQ,MAAf,CAAsB,CAAtB,EAAyBvD,SAAzB,CAAjB;AACA+C,MAAAA,cAAc,CAACS,IAAf,EAAqB,aAAa1M,IAAI,CAAC,MAAD,EAAS;AAC7CyH,QAAAA,SAAS,EAAEpH,OAAO,CAACc,GAD0B;AAE7CwL,QAAAA,QAAQ,EAAEhE,gBAAgB,CAACC,IAAD;AAFmB,OAAT,EAGnCqD,cAAc,CAACC,MAHoB,CAAtC;AAID;AACF;;AACD,QAAMU,kBAAkB,GAAGR,MAAM,IAAI,aAAalM,KAAK,CAAC,IAAD,EAAO;AAC5DyM,IAAAA,QAAQ,EAAE,CAAC,aAAa3M,IAAI,CAACyG,sBAAD,EAAyB;AACnDgB,MAAAA,SAAS,EAAEpH,OAAO,CAACwB,UADgC;AAEnDzB,MAAAA,UAAU,EAAEA,UAFuC;AAGnDyM,MAAAA,SAAS,EAAE,KAHwC;AAInDF,MAAAA,QAAQ,EAAEP,MAAM,CAACU;AAJkC,KAAzB,CAAlB,EAKN,aAAa9M,IAAI,CAAC2G,mBAAD,EAAsB;AACzCc,MAAAA,SAAS,EAAEpH,OAAO,CAACyB,OADsB;AAEzC1B,MAAAA,UAAU,EAAEA,UAF6B;AAGzCuM,MAAAA,QAAQ,EAAEP,MAAM,CAACO;AAHwB,KAAtB,CALX;AADkD,GAAP,EAWpDP,MAAM,CAACW,GAX6C,CAAvD;;AAYA,QAAMlD,WAAW,GAAGC,eAAe,IAAI8C,kBAAvC;;AACA,QAAMI,mBAAmB,GAAG,CAACC,MAAD,EAASrL,MAAT,KAAoB,aAAa5B,IAAI,CAAC,IAAD,EAAOjC,QAAQ,CAAC,EAAD,EAAKkP,MAAL,EAAa;AAC3FN,IAAAA,QAAQ,EAAE9D,cAAc,CAACjH,MAAD;AADmE,GAAb,CAAf,CAAjE;;AAGA,QAAMoI,YAAY,GAAGC,gBAAgB,IAAI+C,mBAAzC;;AACA,QAAME,gBAAgB,GAAG,CAACtL,MAAD,EAAS0K,KAAT,KAAmB;AAC1C,UAAMa,WAAW,GAAGtC,cAAc,CAAC;AACjCjJ,MAAAA,MADiC;AAEjC0K,MAAAA;AAFiC,KAAD,CAAlC;AAIA,WAAOtC,YAAY,CAACjM,QAAQ,CAAC,EAAD,EAAKoP,WAAL,EAAkB;AAC5C1F,MAAAA,SAAS,EAAEpH,OAAO,CAACuB;AADyB,KAAlB,CAAT,EAEfA,MAFe,EAEP;AACV2E,MAAAA,QAAQ,EAAE4G,WAAW,CAAC,eAAD,CADX;AAEVb,MAAAA,KAFU;AAGVlB,MAAAA;AAHU,KAFO,EAMhBhL,UANgB,CAAnB;AAOD,GAZD;;AAaA,QAAMgN,uBAAuB,GAAG,CAACpG,qBAAqB,GAAGoD,SAAS,CAAC/I,cAAnC,KAAsD,IAAtD,GAA6D2F,qBAA7D,GAAqFiB,eAAe,CAAC5G,cAArI;AACA,QAAMgM,cAAc,GAAG,CAACpG,gBAAgB,GAAGmD,SAAS,CAAC5I,KAA9B,KAAwC,IAAxC,GAA+CyF,gBAA/C,GAAkEgB,eAAe,CAACzG,KAAzG;AACA,QAAM8L,eAAe,GAAG,CAACpG,iBAAiB,GAAGkD,SAAS,CAAC7I,MAA/B,KAA0C,IAA1C,GAAiD2F,iBAAjD,GAAqEe,eAAe,CAAC1G,MAA7G;AACA,QAAMgM,uBAAuB,GAAG,CAACpG,qBAAqB,GAAGiD,SAAS,CAAC9I,cAAnC,KAAsD,IAAtD,GAA6D6F,qBAA7D,GAAqFc,eAAe,CAAC3G,cAArI;AACA,SAAO,aAAapB,KAAK,CAAC9B,KAAK,CAACoP,QAAP,EAAiB;AACxCb,IAAAA,QAAQ,EAAE,CAAC,aAAa3M,IAAI,CAAC+B,gBAAD,EAAmBhE,QAAQ,CAAC;AACtDgJ,MAAAA,GAAG,EAAEA,GADiD;AAEtDU,MAAAA,SAAS,EAAEnJ,IAAI,CAAC+B,OAAO,CAACW,IAAT,EAAeyG,SAAf,CAFuC;AAGtDrH,MAAAA,UAAU,EAAEA;AAH0C,KAAD,EAIpDkK,YAAY,CAACD,KAAD,CAJwC,EAI/B;AACtBsC,MAAAA,QAAQ,EAAE5C,WAAW,CAAC;AACpBiB,QAAAA,EADoB;AAEpB1C,QAAAA,QAFoB;AAGpB7H,QAAAA,SAAS,EAAE,IAHS;AAIpBK,QAAAA,IAAI,EAAEA,IAAI,KAAK,OAAT,GAAmB,OAAnB,GAA6B2M,SAJf;AAKpBC,QAAAA,eAAe,EAAElD,kBAAkB,EALf;AAMpBmD,QAAAA,UAAU,EAAE5P,QAAQ,CAAC;AACnBgJ,UAAAA,GAAG,EAAEoE,WADc;AAEnB1D,UAAAA,SAAS,EAAEpH,OAAO,CAACY,SAFA;AAGnBgL,UAAAA,cAHmB;AAInB2B,UAAAA,OAAO,EAAEC,KAAK,IAAI;AAChB,gBAAIA,KAAK,CAACC,MAAN,KAAiBD,KAAK,CAACE,aAA3B,EAA0C;AACxCvC,cAAAA,oBAAoB,CAACqC,KAAD,CAApB;AACD;AACF;AARkB,SAAD,EASjB,CAACnN,YAAY,IAAIC,YAAjB,KAAkC;AACnCS,UAAAA,YAAY,EAAE,aAAalB,KAAK,CAACoD,wBAAD,EAA2B;AACzDmE,YAAAA,SAAS,EAAEpH,OAAO,CAACe,YADsC;AAEzDhB,YAAAA,UAAU,EAAEA,UAF6C;AAGzDuM,YAAAA,QAAQ,EAAE,CAACjM,YAAY,GAAG,aAAaV,IAAI,CAACyD,0BAAD,EAA6B1F,QAAQ,CAAC,EAAD,EAAK2M,aAAa,EAAlB,EAAsB;AACpG,4BAAc3C,SADsF;AAEpGiG,cAAAA,KAAK,EAAEjG,SAF6F;AAGpG3H,cAAAA,UAAU,EAAEA;AAHwF,aAAtB,EAI7EgN,uBAJ6E,EAIpD;AAC1B3F,cAAAA,SAAS,EAAEnJ,IAAI,CAAC+B,OAAO,CAACgB,cAAT,EAAyB+L,uBAAuB,IAAI,IAA3B,GAAkC,KAAK,CAAvC,GAA2CA,uBAAuB,CAAC3F,SAA5F,CADW;AAE1BkF,cAAAA,QAAQ,EAAEjF;AAFgB,aAJoD,CAArC,CAApB,GAOjB,IAPI,EAOE/G,YAAY,GAAG,aAAaX,IAAI,CAAC2D,0BAAD,EAA6B5F,QAAQ,CAAC,EAAD,EAAK0M,sBAAsB,EAA3B,EAA+B;AAC9GnC,cAAAA,QAAQ,EAAEA,QADoG;AAE9G,4BAAczH,SAAS,GAAGmH,SAAH,GAAewB,QAFwE;AAG9GwE,cAAAA,KAAK,EAAEnN,SAAS,GAAGmH,SAAH,GAAewB,QAH+E;AAI9GpJ,cAAAA,UAAU,EAAEA;AAJkG,aAA/B,EAK9EmN,uBAL8E,EAKrD;AAC1B9F,cAAAA,SAAS,EAAEnJ,IAAI,CAAC+B,OAAO,CAACiB,cAAT,EAAyBiM,uBAAuB,IAAI,IAA3B,GAAkC,KAAK,CAAvC,GAA2CA,uBAAuB,CAAC9F,SAA5F,CADW;AAE1BkF,cAAAA,QAAQ,EAAEhD;AAFgB,aALqD,CAArC,CAApB,GAQlB,IAfI;AAH+C,WAA3B;AADG,SATjB,CANA;AAqCpBsE,QAAAA,UAAU,EAAElQ,QAAQ,CAAC;AACnB0J,UAAAA,SAAS,EAAEpH,OAAO,CAACa,KADA;AAEnBoH,UAAAA,QAFmB;AAGnBsB,UAAAA;AAHmB,SAAD,EAIjBW,aAAa,EAJI;AArCA,OAAD;AADC,KAJ+B,CAA3B,CAAlB,EAgDLW,QAAQ,GAAG,aAAalL,IAAI,CAAC8D,kBAAD,EAAqB/F,QAAQ,CAAC;AAC7DmQ,MAAAA,EAAE,EAAExE,eADyD;AAE7DpJ,MAAAA,aAAa,EAAEA,aAF8C;AAG7D6N,MAAAA,KAAK,EAAE;AACL7L,QAAAA,KAAK,EAAE4I,QAAQ,GAAGA,QAAQ,CAACkD,WAAZ,GAA0B;AADpC,OAHsD;AAM7DhO,MAAAA,UAAU,EAAEA,UANiD;AAO7DiO,MAAAA,IAAI,EAAE,cAPuD;AAQ7DnD,MAAAA,QAAQ,EAAEA,QARmD;AAS7DoD,MAAAA,IAAI,EAAEzN;AATuD,KAAD,EAU3DyM,eAV2D,EAU1C;AAClB7F,MAAAA,SAAS,EAAEnJ,IAAI,CAAC+B,OAAO,CAACkB,MAAT,EAAiB+L,eAAe,IAAI,IAAnB,GAA0B,KAAK,CAA/B,GAAmCA,eAAe,CAAC7F,SAApE,CADG;AAElBkF,MAAAA,QAAQ,EAAE,aAAazM,KAAK,CAACkE,iBAAD,EAAoBrG,QAAQ,CAAC;AACvDqC,QAAAA,UAAU,EAAEA,UAD2C;AAEvD8N,QAAAA,EAAE,EAAEzE;AAFmD,OAAD,EAGrD4D,cAHqD,EAGrC;AACjB5F,QAAAA,SAAS,EAAEnJ,IAAI,CAAC+B,OAAO,CAACmB,KAAT,EAAgB6L,cAAc,IAAI,IAAlB,GAAyB,KAAK,CAA9B,GAAkCA,cAAc,CAAC5F,SAAjE,CADE;AAEjBkF,QAAAA,QAAQ,EAAE,CAACjL,OAAO,IAAI2J,cAAc,CAACa,MAAf,KAA0B,CAArC,GAAyC,aAAalM,IAAI,CAACwE,mBAAD,EAAsB;AACzFiD,UAAAA,SAAS,EAAEpH,OAAO,CAACqB,OADsE;AAEzFtB,UAAAA,UAAU,EAAEA,UAF6E;AAGzFuM,UAAAA,QAAQ,EAAEtD;AAH+E,SAAtB,CAA1D,GAIN,IAJK,EAICgC,cAAc,CAACa,MAAf,KAA0B,CAA1B,IAA+B,CAACrE,QAAhC,IAA4C,CAACnG,OAA7C,GAAuD,aAAa1B,IAAI,CAAC6E,qBAAD,EAAwB;AACzG4C,UAAAA,SAAS,EAAEpH,OAAO,CAACsB,SADsF;AAEzGvB,UAAAA,UAAU,EAAEA,UAF6F;AAGzGiO,UAAAA,IAAI,EAAE,cAHmG;AAIzG9C,UAAAA,WAAW,EAAEsC,KAAK,IAAI;AACpB;AACAA,YAAAA,KAAK,CAACU,cAAN;AACD,WAPwG;AAQzG5B,UAAAA,QAAQ,EAAErD;AAR+F,SAAxB,CAAxE,GASN,IAbK,EAaC+B,cAAc,CAACa,MAAf,GAAwB,CAAxB,GAA4B,aAAalM,IAAI,CAAC8E,mBAAD,EAAsB/G,QAAQ,CAAC;AACrFmQ,UAAAA,EAAE,EAAE/E,gBADiF;AAErF1B,UAAAA,SAAS,EAAEpH,OAAO,CAACoB,OAFkE;AAGrFrB,UAAAA,UAAU,EAAEA;AAHyE,SAAD,EAInFwL,iBAJmF,EAIhExC,YAJgE,EAIlD;AAClCrC,UAAAA,GAAG,EAAE8E,kBAD6B;AAElCc,UAAAA,QAAQ,EAAEtB,cAAc,CAACgB,GAAf,CAAmB,CAACzK,MAAD,EAAS0K,KAAT,KAAmB;AAC9C,gBAAIvD,OAAJ,EAAa;AACX,qBAAOc,WAAW,CAAC;AACjBkD,gBAAAA,GAAG,EAAEnL,MAAM,CAACmL,GADK;AAEjBD,gBAAAA,KAAK,EAAElL,MAAM,CAACkL,KAFG;AAGjBH,gBAAAA,QAAQ,EAAE/K,MAAM,CAAC4M,OAAP,CAAenC,GAAf,CAAmB,CAACoC,OAAD,EAAUC,MAAV,KAAqBxB,gBAAgB,CAACuB,OAAD,EAAU7M,MAAM,CAAC0K,KAAP,GAAeoC,MAAzB,CAAxD;AAHO,eAAD,CAAlB;AAKD;;AACD,mBAAOxB,gBAAgB,CAACtL,MAAD,EAAS0K,KAAT,CAAvB;AACD,WATS;AAFwB,SAJkD,CAA9B,CAA7C,GAgBL,IA7BI;AAFO,OAHqC,CAA5B;AAFV,KAV0C,CAA7B,CAApB,GAgDP,IAhGI;AAD8B,GAAjB,CAAzB;AAmGD,CAxRiC,CAAlC;AAyRAqC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCjI,YAAY,CAACkI;AAAU;AAAvB,EAAgD;AACtF;AACA;AACA;AACA;;AACA;AACF;AACA;AACA;AACA;AACA;AACE1H,EAAAA,YAAY,EAAE/I,SAAS,CAAC0Q,IAX8D;;AAYtF;AACF;AACA;AACA;AACE1H,EAAAA,aAAa,EAAEhJ,SAAS,CAAC0Q,IAhB6D;;AAiBtF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEzH,EAAAA,UAAU,EAAEjJ,SAAS,CAAC0Q,IA1BgE;;AA2BtF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACExH,EAAAA,YAAY,EAAElJ,SAAS,CAAC2Q,SAAV,CAAoB,CAAC3Q,SAAS,CAAC4Q,KAAV,CAAgB,CAAC,OAAD,EAAU,OAAV,CAAhB,CAAD,EAAsC5Q,SAAS,CAAC0Q,IAAhD,CAApB,CApCwE;;AAqCtF;AACF;AACA;AACEvH,EAAAA,SAAS,EAAEnJ,SAAS,CAAC6Q,MAxCiE;;AAyCtF;AACF;AACA;AACE7O,EAAAA,OAAO,EAAEhC,SAAS,CAAC6Q,MA5CmE;;AA6CtF;AACF;AACA;AACEzH,EAAAA,SAAS,EAAEpJ,SAAS,CAAC8Q,MAhDiE;;AAiDtF;AACF;AACA;AACA;AACEzH,EAAAA,SAAS,EAAErJ,SAAS,CAAC+Q,IArDiE;;AAsDtF;AACF;AACA;AACA;AACA;AACA;AACA;AACExH,EAAAA,WAAW,EAAEvJ,SAAS,CAAC0Q,IA7D+D;;AA8DtF;AACF;AACA;AACA;AACEjH,EAAAA,aAAa,EAAEzJ,SAAS,CAAC0Q,IAlE6D;;AAmEtF;AACF;AACA;AACA;AACA;AACA;AACEhH,EAAAA,SAAS,EAAE1J,SAAS,CAAC8Q,MAzEiE;;AA0EtF;AACF;AACA;AACA;AACA;AACA;AACEnH,EAAAA,SAAS,EAAE3J,SAAS,CAAC8Q,MAhFiE;;AAiFtF;AACF;AACA;AACA;AACElH,EAAAA,eAAe,EAAE5J,SAAS,CAACgR,KAAV,CAAgB;AAC/BhO,IAAAA,cAAc,EAAEhD,SAAS,CAAC6Q,MADK;AAE/B1N,IAAAA,KAAK,EAAEnD,SAAS,CAAC6Q,MAFc;AAG/B3N,IAAAA,MAAM,EAAElD,SAAS,CAAC6Q,MAHa;AAI/B5N,IAAAA,cAAc,EAAEjD,SAAS,CAAC6Q;AAJK,GAAhB,CArFqE;;AA2FtF;AACF;AACA;AACA;AACEhH,EAAAA,YAAY,EAAE3J,cAAc,CAACF,SAAS,CAACiR,GAAX,EAAgBnN,KAAK,IAAI;AACnD,QAAIA,KAAK,CAACgG,QAAN,IAAkBhG,KAAK,CAAC+F,YAAN,KAAuBuF,SAAzC,IAAsD,CAAClB,KAAK,CAACC,OAAN,CAAcrK,KAAK,CAAC+F,YAApB,CAA3D,EAA8F;AAC5F,aAAO,IAAIqH,KAAJ,CAAU,CAAC,2GAAD,EAA+G,YAAWpN,KAAK,CAAC+F,YAAa,gBAA7I,EAA8JsH,IAA9J,CAAmK,IAAnK,CAAV,CAAP;AACD;;AACD,WAAO,IAAP;AACD,GAL2B,CA/F0D;;AAqGtF;AACF;AACA;AACA;AACEpH,EAAAA,gBAAgB,EAAE/J,SAAS,CAAC0Q,IAzG0D;;AA0GtF;AACF;AACA;AACA;AACE1G,EAAAA,oBAAoB,EAAEhK,SAAS,CAAC0Q,IA9GsD;;AA+GtF;AACF;AACA;AACA;AACEzG,EAAAA,QAAQ,EAAEjK,SAAS,CAAC0Q,IAnHkE;;AAoHtF;AACF;AACA;AACA;AACExG,EAAAA,sBAAsB,EAAElK,SAAS,CAAC0Q,IAxHoD;;AAyHtF;AACF;AACA;AACA;AACEvG,EAAAA,eAAe,EAAEnK,SAAS,CAAC0Q,IA7H2D;;AA8HtF;AACF;AACA;AACA;AACEzO,EAAAA,aAAa,EAAEjC,SAAS,CAAC0Q,IAlI6D;;AAmItF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEU,EAAAA,aAAa,EAAEpR,SAAS,CAACqR,IA3I6D;;AA4ItF;AACF;AACA;AACA;AACEjH,EAAAA,qBAAqB,EAAEpK,SAAS,CAAC0Q,IAhJqD;;AAiJtF;AACF;AACA;AACA;AACErG,EAAAA,cAAc,EAAErK,SAAS,CAAC2Q,SAAV,CAAoB,CAAC3Q,SAAS,CAAC4Q,KAAV,CAAgB,CAAC,MAAD,CAAhB,CAAD,EAA4B5Q,SAAS,CAAC0Q,IAAtC,CAApB,CArJsE;;AAsJtF;AACF;AACA;AACA;AACElH,EAAAA,QAAQ,EAAExJ,SAAS,CAAC0Q,IA1JkE;;AA2JtF;AACF;AACA;AACA;AACEtO,EAAAA,SAAS,EAAEpC,SAAS,CAAC0Q,IA/JiE;;AAgKtF;AACF;AACA;AACA;AACA;AACA;AACA;AACEpG,EAAAA,gBAAgB,EAAEtK,SAAS,CAACqR,IAvK0D;;AAwKtF;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,iBAAiB,EAAEtR,SAAS,CAACqR,IA9KyD;;AA+KtF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE7G,EAAAA,cAAc,EAAExK,SAAS,CAACqR,IAzL4D;;AA0LtF;AACF;AACA;AACA;AACA;AACA;AACA;AACE3G,EAAAA,OAAO,EAAE1K,SAAS,CAACqR,IAjMmE;;AAkMtF;AACF;AACA;AACA;AACA;AACE1G,EAAAA,iBAAiB,EAAE3K,SAAS,CAAC0Q,IAvMyD;;AAwMtF;AACF;AACA;AACA;AACE/D,EAAAA,EAAE,EAAE3M,SAAS,CAAC8Q,MA5MwE;;AA6MtF;AACF;AACA;AACA;AACElG,EAAAA,kBAAkB,EAAE5K,SAAS,CAAC0Q,IAjNwD;;AAkNtF;AACF;AACA;AACE3D,EAAAA,UAAU,EAAE/M,SAAS,CAAC8Q,MArNgE;;AAsNtF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACES,EAAAA,oBAAoB,EAAEvR,SAAS,CAACqR,IA/NsD;;AAgOtF;AACF;AACA;AACA;AACA;AACExG,EAAAA,SAAS,EAAE1K,eArO2E;;AAsOtF;AACF;AACA;AACA;AACE2K,EAAAA,gBAAgB,EAAE9K,SAAS,CAACwR,WA1O0D;;AA2OtF;AACF;AACA;AACEzG,EAAAA,YAAY,EAAE/K,SAAS,CAAC6Q,MA9O8D;;AA+OtF;AACF;AACA;AACA;AACA;AACExN,EAAAA,OAAO,EAAErD,SAAS,CAAC0Q,IApPmE;;AAqPtF;AACF;AACA;AACA;AACA;AACA;AACE1F,EAAAA,WAAW,EAAEhL,SAAS,CAAC+Q,IA3P+D;;AA4PtF;AACF;AACA;AACA;AACEjH,EAAAA,QAAQ,EAAE9J,SAAS,CAAC0Q,IAhQkE;;AAiQtF;AACF;AACA;AACA;AACA;AACA;AACEzF,EAAAA,aAAa,EAAEjL,SAAS,CAAC+Q,IAvQ6D;;AAwQtF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEU,EAAAA,QAAQ,EAAEzR,SAAS,CAACqR,IAhRkE;;AAiRtF;AACF;AACA;AACA;AACA;AACA;AACA;AACEK,EAAAA,OAAO,EAAE1R,SAAS,CAACqR,IAxRmE;;AAyRtF;AACF;AACA;AACA;AACA;AACA;AACA;AACEM,EAAAA,iBAAiB,EAAE3R,SAAS,CAACqR,IAhSyD;;AAiStF;AACF;AACA;AACA;AACA;AACA;AACA;AACEO,EAAAA,aAAa,EAAE5R,SAAS,CAACqR,IAxS6D;;AAyStF;AACF;AACA;AACA;AACA;AACA;AACEQ,EAAAA,MAAM,EAAE7R,SAAS,CAACqR,IA/SoE;;AAgTtF;AACF;AACA;AACEpB,EAAAA,IAAI,EAAEjQ,SAAS,CAAC0Q,IAnTsE;;AAoTtF;AACF;AACA;AACA;AACExF,EAAAA,WAAW,EAAElL,SAAS,CAAC0Q,IAxT+D;;AAyTtF;AACF;AACA;AACA;AACA;AACA;AACEvF,EAAAA,QAAQ,EAAEnL,SAAS,CAAC8Q,MA/TkE;;AAgUtF;AACF;AACA;AACEX,EAAAA,OAAO,EAAEnQ,SAAS,CAAC8R,KAAV,CAAgBC,UAnU6D;;AAoUtF;AACF;AACA;AACA;AACE3G,EAAAA,cAAc,EAAEpL,SAAS,CAACwR,WAxU4D;;AAyUtF;AACF;AACA;AACA;AACEnG,EAAAA,eAAe,EAAErL,SAAS,CAACwR,WA7U2D;;AA8UtF;AACF;AACA;AACA;AACElG,EAAAA,SAAS,EAAEtL,SAAS,CAAC+Q,IAlViE;;AAmVtF;AACF;AACA;AACA;AACExF,EAAAA,QAAQ,EAAEvL,SAAS,CAAC0Q,IAvVkE;;AAwVtF;AACF;AACA;AACA;AACA;AACA;AACElF,EAAAA,WAAW,EAAExL,SAAS,CAACqR,IA9V+D;;AA+VtF;AACF;AACA;AACA;AACA;AACA;AACE3F,EAAAA,WAAW,EAAE1L,SAAS,CAACqR,IAAV,CAAeU,UArW0D;;AAsWtF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEpG,EAAAA,YAAY,EAAE3L,SAAS,CAACqR,IA/W8D;;AAgXtF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACExF,EAAAA,UAAU,EAAE7L,SAAS,CAACqR,IAxXgE;;AAyXtF;AACF;AACA;AACA;AACA;AACEvF,EAAAA,aAAa,EAAE9L,SAAS,CAAC0Q,IA9X6D;;AA+XtF;AACF;AACA;AACA;AACEjO,EAAAA,IAAI,EAAEzC;AAAU;AAAD,GAAuC2Q,SAAhD,CAA0D,CAAC3Q,SAAS,CAAC4Q,KAAV,CAAgB,CAAC,OAAD,EAAU,QAAV,CAAhB,CAAD,EAAuC5Q,SAAS,CAAC8Q,MAAjD,CAA1D,CAnYgF;;AAoYtF;AACF;AACA;AACA;AACE/E,EAAAA,SAAS,EAAE/L,SAAS,CAACgR,KAAV,CAAgB;AACzBhO,IAAAA,cAAc,EAAEhD,SAAS,CAAC6Q,MADD;AAEzB1N,IAAAA,KAAK,EAAEnD,SAAS,CAAC6Q,MAFQ;AAGzB3N,IAAAA,MAAM,EAAElD,SAAS,CAAC6Q,MAHO;AAIzB5N,IAAAA,cAAc,EAAEjD,SAAS,CAAC6Q;AAJD,GAAhB,CAxY2E;;AA8YtF;AACF;AACA;AACEmB,EAAAA,EAAE,EAAEhS,SAAS,CAAC2Q,SAAV,CAAoB,CAAC3Q,SAAS,CAACiS,OAAV,CAAkBjS,SAAS,CAAC2Q,SAAV,CAAoB,CAAC3Q,SAAS,CAACqR,IAAX,EAAiBrR,SAAS,CAAC6Q,MAA3B,EAAmC7Q,SAAS,CAAC0Q,IAA7C,CAApB,CAAlB,CAAD,EAA6F1Q,SAAS,CAACqR,IAAvG,EAA6GrR,SAAS,CAAC6Q,MAAvH,CAApB,CAjZkF;;AAkZtF;AACF;AACA;AACA;AACA;AACA;AACEpE,EAAAA,KAAK,EAAEvM,cAAc,CAACF,SAAS,CAACiR,GAAX,EAAgBnN,KAAK,IAAI;AAC5C,QAAIA,KAAK,CAACgG,QAAN,IAAkBhG,KAAK,CAAC2I,KAAN,KAAgB2C,SAAlC,IAA+C,CAAClB,KAAK,CAACC,OAAN,CAAcrK,KAAK,CAAC2I,KAApB,CAApD,EAAgF;AAC9E,aAAO,IAAIyE,KAAJ,CAAU,CAAC,oGAAD,EAAwG,YAAWpN,KAAK,CAAC2I,KAAM,gBAA/H,EAAgJ0E,IAAhJ,CAAqJ,IAArJ,CAAV,CAAP;AACD;;AACD,WAAO,IAAP;AACD,GALoB;AAxZiE,CAAxF,GA8ZI,KAAK,CA9ZT;AA+ZA,eAAe5I,YAAf","sourcesContent":["'use client';\r\n\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nvar _ClearIcon, _ArrowDropDownIcon;\r\nconst _excluded = [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"className\", \"clearIcon\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeText\", \"componentsProps\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"isOptionEqualToValue\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"readOnly\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"slotProps\", \"value\"],\r\n  _excluded2 = [\"ref\"];\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { chainPropTypes, integerPropType } from '@mui/utils';\r\nimport { unstable_composeClasses as composeClasses, useAutocomplete, createFilterOptions } from '@mui/base';\r\nimport { alpha } from '@mui/system';\r\nimport Popper from '../Popper';\r\nimport ListSubheader from '../ListSubheader';\r\nimport Paper from '../Paper';\r\nimport IconButton from '../IconButton';\r\nimport Chip from '../Chip';\r\nimport inputClasses from '../Input/inputClasses';\r\nimport inputBaseClasses from '../InputBase/inputBaseClasses';\r\nimport outlinedInputClasses from '../OutlinedInput/outlinedInputClasses';\r\nimport filledInputClasses from '../FilledInput/filledInputClasses';\r\nimport ClearIcon from '../internal/svg-icons/Close';\r\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\r\nimport useThemeProps from '../styles/useThemeProps';\r\nimport styled from '../styles/styled';\r\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\r\nimport capitalize from '../utils/capitalize';\r\nimport useForkRef from '../utils/useForkRef';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\r\nconst useUtilityClasses = ownerState => {\r\n  const {\r\n    classes,\r\n    disablePortal,\r\n    expanded,\r\n    focused,\r\n    fullWidth,\r\n    hasClearIcon,\r\n    hasPopupIcon,\r\n    inputFocused,\r\n    popupOpen,\r\n    size\r\n  } = ownerState;\r\n  const slots = {\r\n    root: ['root', expanded && 'expanded', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\r\n    inputRoot: ['inputRoot'],\r\n    input: ['input', inputFocused && 'inputFocused'],\r\n    tag: ['tag', `tagSize${capitalize(size)}`],\r\n    endAdornment: ['endAdornment'],\r\n    clearIndicator: ['clearIndicator'],\r\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\r\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\r\n    paper: ['paper'],\r\n    listbox: ['listbox'],\r\n    loading: ['loading'],\r\n    noOptions: ['noOptions'],\r\n    option: ['option'],\r\n    groupLabel: ['groupLabel'],\r\n    groupUl: ['groupUl']\r\n  };\r\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\r\n};\r\nconst AutocompleteRoot = styled('div', {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'Root',\r\n  overridesResolver: (props, styles) => {\r\n    const {\r\n      ownerState\r\n    } = props;\r\n    const {\r\n      fullWidth,\r\n      hasClearIcon,\r\n      hasPopupIcon,\r\n      inputFocused,\r\n      size\r\n    } = ownerState;\r\n    return [{\r\n      [`& .${autocompleteClasses.tag}`]: styles.tag\r\n    }, {\r\n      [`& .${autocompleteClasses.tag}`]: styles[`tagSize${capitalize(size)}`]\r\n    }, {\r\n      [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot\r\n    }, {\r\n      [`& .${autocompleteClasses.input}`]: styles.input\r\n    }, {\r\n      [`& .${autocompleteClasses.input}`]: inputFocused && styles.inputFocused\r\n    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];\r\n  }\r\n})(({\r\n  ownerState\r\n}) => _extends({\r\n  [`&.${autocompleteClasses.focused} .${autocompleteClasses.clearIndicator}`]: {\r\n    visibility: 'visible'\r\n  },\r\n  /* Avoid double tap issue on iOS */\r\n  '@media (pointer: fine)': {\r\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\r\n      visibility: 'visible'\r\n    }\r\n  }\r\n}, ownerState.fullWidth && {\r\n  width: '100%'\r\n}, {\r\n  [`& .${autocompleteClasses.tag}`]: _extends({\r\n    margin: 3,\r\n    maxWidth: 'calc(100% - 6px)'\r\n  }, ownerState.size === 'small' && {\r\n    margin: 2,\r\n    maxWidth: 'calc(100% - 4px)'\r\n  }),\r\n  [`& .${autocompleteClasses.inputRoot}`]: {\r\n    flexWrap: 'wrap',\r\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\r\n      paddingRight: 26 + 4\r\n    },\r\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\r\n      paddingRight: 52 + 4\r\n    },\r\n    [`& .${autocompleteClasses.input}`]: {\r\n      width: 0,\r\n      minWidth: 30\r\n    }\r\n  },\r\n  [`& .${inputClasses.root}`]: {\r\n    paddingBottom: 1,\r\n    '& .MuiInput-input': {\r\n      padding: '4px 4px 4px 0px'\r\n    }\r\n  },\r\n  [`& .${inputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\r\n    [`& .${inputClasses.input}`]: {\r\n      padding: '2px 4px 3px 0'\r\n    }\r\n  },\r\n  [`& .${outlinedInputClasses.root}`]: {\r\n    padding: 9,\r\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\r\n      paddingRight: 26 + 4 + 9\r\n    },\r\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\r\n      paddingRight: 52 + 4 + 9\r\n    },\r\n    [`& .${autocompleteClasses.input}`]: {\r\n      padding: '7.5px 4px 7.5px 5px'\r\n    },\r\n    [`& .${autocompleteClasses.endAdornment}`]: {\r\n      right: 9\r\n    }\r\n  },\r\n  [`& .${outlinedInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\r\n    // Don't specify paddingRight, as it overrides the default value set when there is only\r\n    // one of the popup or clear icon as the specificity is equal so the latter one wins\r\n    paddingTop: 6,\r\n    paddingBottom: 6,\r\n    paddingLeft: 6,\r\n    [`& .${autocompleteClasses.input}`]: {\r\n      padding: '2.5px 4px 2.5px 8px'\r\n    }\r\n  },\r\n  [`& .${filledInputClasses.root}`]: {\r\n    paddingTop: 19,\r\n    paddingLeft: 8,\r\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\r\n      paddingRight: 26 + 4 + 9\r\n    },\r\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\r\n      paddingRight: 52 + 4 + 9\r\n    },\r\n    [`& .${filledInputClasses.input}`]: {\r\n      padding: '7px 4px'\r\n    },\r\n    [`& .${autocompleteClasses.endAdornment}`]: {\r\n      right: 9\r\n    }\r\n  },\r\n  [`& .${filledInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\r\n    paddingBottom: 1,\r\n    [`& .${filledInputClasses.input}`]: {\r\n      padding: '2.5px 4px'\r\n    }\r\n  },\r\n  [`& .${inputBaseClasses.hiddenLabel}`]: {\r\n    paddingTop: 8\r\n  },\r\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}`]: {\r\n    paddingTop: 0,\r\n    paddingBottom: 0,\r\n    [`& .${autocompleteClasses.input}`]: {\r\n      paddingTop: 16,\r\n      paddingBottom: 17\r\n    }\r\n  },\r\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}.${inputBaseClasses.sizeSmall}`]: {\r\n    [`& .${autocompleteClasses.input}`]: {\r\n      paddingTop: 8,\r\n      paddingBottom: 9\r\n    }\r\n  },\r\n  [`& .${autocompleteClasses.input}`]: _extends({\r\n    flexGrow: 1,\r\n    textOverflow: 'ellipsis',\r\n    opacity: 0\r\n  }, ownerState.inputFocused && {\r\n    opacity: 1\r\n  })\r\n}));\r\nconst AutocompleteEndAdornment = styled('div', {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'EndAdornment',\r\n  overridesResolver: (props, styles) => styles.endAdornment\r\n})({\r\n  // We use a position absolute to support wrapping tags.\r\n  position: 'absolute',\r\n  right: 0,\r\n  top: 'calc(50% - 14px)' // Center vertically\r\n});\r\n\r\nconst AutocompleteClearIndicator = styled(IconButton, {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'ClearIndicator',\r\n  overridesResolver: (props, styles) => styles.clearIndicator\r\n})({\r\n  marginRight: -2,\r\n  padding: 4,\r\n  visibility: 'hidden'\r\n});\r\nconst AutocompletePopupIndicator = styled(IconButton, {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'PopupIndicator',\r\n  overridesResolver: ({\r\n    ownerState\r\n  }, styles) => _extends({}, styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen)\r\n})(({\r\n  ownerState\r\n}) => _extends({\r\n  padding: 2,\r\n  marginRight: -2\r\n}, ownerState.popupOpen && {\r\n  transform: 'rotate(180deg)'\r\n}));\r\nconst AutocompletePopper = styled(Popper, {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'Popper',\r\n  overridesResolver: (props, styles) => {\r\n    const {\r\n      ownerState\r\n    } = props;\r\n    return [{\r\n      [`& .${autocompleteClasses.option}`]: styles.option\r\n    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];\r\n  }\r\n})(({\r\n  theme,\r\n  ownerState\r\n}) => _extends({\r\n  zIndex: (theme.vars || theme).zIndex.modal\r\n}, ownerState.disablePortal && {\r\n  position: 'absolute'\r\n}));\r\nconst AutocompletePaper = styled(Paper, {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'Paper',\r\n  overridesResolver: (props, styles) => styles.paper\r\n})(({\r\n  theme\r\n}) => _extends({}, theme.typography.body1, {\r\n  overflow: 'auto'\r\n}));\r\nconst AutocompleteLoading = styled('div', {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'Loading',\r\n  overridesResolver: (props, styles) => styles.loading\r\n})(({\r\n  theme\r\n}) => ({\r\n  color: (theme.vars || theme).palette.text.secondary,\r\n  padding: '14px 16px'\r\n}));\r\nconst AutocompleteNoOptions = styled('div', {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'NoOptions',\r\n  overridesResolver: (props, styles) => styles.noOptions\r\n})(({\r\n  theme\r\n}) => ({\r\n  color: (theme.vars || theme).palette.text.secondary,\r\n  padding: '14px 16px'\r\n}));\r\nconst AutocompleteListbox = styled('div', {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'Listbox',\r\n  overridesResolver: (props, styles) => styles.listbox\r\n})(({\r\n  theme\r\n}) => ({\r\n  listStyle: 'none',\r\n  margin: 0,\r\n  padding: '8px 0',\r\n  maxHeight: '40vh',\r\n  overflow: 'auto',\r\n  position: 'relative',\r\n  [`& .${autocompleteClasses.option}`]: {\r\n    minHeight: 48,\r\n    display: 'flex',\r\n    overflow: 'hidden',\r\n    justifyContent: 'flex-start',\r\n    alignItems: 'center',\r\n    cursor: 'pointer',\r\n    paddingTop: 6,\r\n    boxSizing: 'border-box',\r\n    outline: '0',\r\n    WebkitTapHighlightColor: 'transparent',\r\n    paddingBottom: 6,\r\n    paddingLeft: 16,\r\n    paddingRight: 16,\r\n    [theme.breakpoints.up('sm')]: {\r\n      minHeight: 'auto'\r\n    },\r\n    [`&.${autocompleteClasses.focused}`]: {\r\n      backgroundColor: (theme.vars || theme).palette.action.hover,\r\n      // Reset on touch devices, it doesn't add specificity\r\n      '@media (hover: none)': {\r\n        backgroundColor: 'transparent'\r\n      }\r\n    },\r\n    '&[aria-disabled=\"true\"]': {\r\n      opacity: (theme.vars || theme).palette.action.disabledOpacity,\r\n      pointerEvents: 'none'\r\n    },\r\n    [`&.${autocompleteClasses.focusVisible}`]: {\r\n      backgroundColor: (theme.vars || theme).palette.action.focus\r\n    },\r\n    '&[aria-selected=\"true\"]': {\r\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\r\n      [`&.${autocompleteClasses.focused}`]: {\r\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\r\n        // Reset on touch devices, it doesn't add specificity\r\n        '@media (hover: none)': {\r\n          backgroundColor: (theme.vars || theme).palette.action.selected\r\n        }\r\n      },\r\n      [`&.${autocompleteClasses.focusVisible}`]: {\r\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\r\n      }\r\n    }\r\n  }\r\n}));\r\nconst AutocompleteGroupLabel = styled(ListSubheader, {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'GroupLabel',\r\n  overridesResolver: (props, styles) => styles.groupLabel\r\n})(({\r\n  theme\r\n}) => ({\r\n  backgroundColor: (theme.vars || theme).palette.background.paper,\r\n  top: -8\r\n}));\r\nconst AutocompleteGroupUl = styled('ul', {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'GroupUl',\r\n  overridesResolver: (props, styles) => styles.groupUl\r\n})({\r\n  padding: 0,\r\n  [`& .${autocompleteClasses.option}`]: {\r\n    paddingLeft: 24\r\n  }\r\n});\r\nexport { createFilterOptions };\r\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\r\n  var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;\r\n  const props = useThemeProps({\r\n    props: inProps,\r\n    name: 'MuiAutocomplete'\r\n  });\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  const {\r\n      autoComplete = false,\r\n      autoHighlight = false,\r\n      autoSelect = false,\r\n      blurOnSelect = false,\r\n      ChipProps,\r\n      className,\r\n      clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\r\n        fontSize: \"small\"\r\n      })),\r\n      clearOnBlur = !props.freeSolo,\r\n      clearOnEscape = false,\r\n      clearText = 'Clear',\r\n      closeText = 'Close',\r\n      componentsProps = {},\r\n      defaultValue = props.multiple ? [] : null,\r\n      disableClearable = false,\r\n      disableCloseOnSelect = false,\r\n      disabled = false,\r\n      disabledItemsFocusable = false,\r\n      disableListWrap = false,\r\n      disablePortal = false,\r\n      filterSelectedOptions = false,\r\n      forcePopupIcon = 'auto',\r\n      freeSolo = false,\r\n      fullWidth = false,\r\n      getLimitTagsText = more => `+${more}`,\r\n      getOptionLabel: getOptionLabelProp,\r\n      groupBy,\r\n      handleHomeEndKeys = !props.freeSolo,\r\n      includeInputInList = false,\r\n      limitTags = -1,\r\n      ListboxComponent = 'ul',\r\n      ListboxProps,\r\n      loading = false,\r\n      loadingText = 'Loading…',\r\n      multiple = false,\r\n      noOptionsText = 'No options',\r\n      openOnFocus = false,\r\n      openText = 'Open',\r\n      PaperComponent = Paper,\r\n      PopperComponent = Popper,\r\n      popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\r\n      readOnly = false,\r\n      renderGroup: renderGroupProp,\r\n      renderInput,\r\n      renderOption: renderOptionProp,\r\n      renderTags,\r\n      selectOnFocus = !props.freeSolo,\r\n      size = 'medium',\r\n      slotProps = {}\r\n    } = props,\r\n    other = _objectWithoutPropertiesLoose(props, _excluded);\r\n  /* eslint-enable @typescript-eslint/no-unused-vars */\r\n\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    getInputLabelProps,\r\n    getPopupIndicatorProps,\r\n    getClearProps,\r\n    getTagProps,\r\n    getListboxProps,\r\n    getOptionProps,\r\n    value,\r\n    dirty,\r\n    expanded,\r\n    id,\r\n    popupOpen,\r\n    focused,\r\n    focusedTag,\r\n    anchorEl,\r\n    setAnchorEl,\r\n    inputValue,\r\n    groupedOptions\r\n  } = useAutocomplete(_extends({}, props, {\r\n    componentName: 'Autocomplete'\r\n  }));\r\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\r\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\r\n  const {\r\n    onMouseDown: handleInputMouseDown\r\n  } = getInputProps();\r\n  const {\r\n    ref: externalListboxRef\r\n  } = ListboxProps != null ? ListboxProps : {};\r\n  const _getListboxProps = getListboxProps(),\r\n    {\r\n      ref: listboxRef\r\n    } = _getListboxProps,\r\n    otherListboxProps = _objectWithoutPropertiesLoose(_getListboxProps, _excluded2);\r\n  const combinedListboxRef = useForkRef(listboxRef, externalListboxRef);\r\n  const defaultGetOptionLabel = option => {\r\n    var _option$label;\r\n    return (_option$label = option.label) != null ? _option$label : option;\r\n  };\r\n  const getOptionLabel = getOptionLabelProp || defaultGetOptionLabel;\r\n\r\n  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\r\n  const ownerState = _extends({}, props, {\r\n    disablePortal,\r\n    expanded,\r\n    focused,\r\n    fullWidth,\r\n    getOptionLabel,\r\n    hasClearIcon,\r\n    hasPopupIcon,\r\n    inputFocused: focusedTag === -1,\r\n    popupOpen,\r\n    size\r\n  });\r\n  const classes = useUtilityClasses(ownerState);\r\n  let startAdornment;\r\n  if (multiple && value.length > 0) {\r\n    const getCustomizedTagProps = params => _extends({\r\n      className: classes.tag,\r\n      disabled\r\n    }, getTagProps(params));\r\n    if (renderTags) {\r\n      startAdornment = renderTags(value, getCustomizedTagProps, ownerState);\r\n    } else {\r\n      startAdornment = value.map((option, index) => /*#__PURE__*/_jsx(Chip, _extends({\r\n        label: getOptionLabel(option),\r\n        size: size\r\n      }, getCustomizedTagProps({\r\n        index\r\n      }), ChipProps)));\r\n    }\r\n  }\r\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\r\n    const more = startAdornment.length - limitTags;\r\n    if (!focused && more > 0) {\r\n      startAdornment = startAdornment.splice(0, limitTags);\r\n      startAdornment.push( /*#__PURE__*/_jsx(\"span\", {\r\n        className: classes.tag,\r\n        children: getLimitTagsText(more)\r\n      }, startAdornment.length));\r\n    }\r\n  }\r\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\r\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\r\n      className: classes.groupLabel,\r\n      ownerState: ownerState,\r\n      component: \"div\",\r\n      children: params.group\r\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\r\n      className: classes.groupUl,\r\n      ownerState: ownerState,\r\n      children: params.children\r\n    })]\r\n  }, params.key);\r\n  const renderGroup = renderGroupProp || defaultRenderGroup;\r\n  const defaultRenderOption = (props2, option) => /*#__PURE__*/_jsx(\"li\", _extends({}, props2, {\r\n    children: getOptionLabel(option)\r\n  }));\r\n  const renderOption = renderOptionProp || defaultRenderOption;\r\n  const renderListOption = (option, index) => {\r\n    const optionProps = getOptionProps({\r\n      option,\r\n      index\r\n    });\r\n    return renderOption(_extends({}, optionProps, {\r\n      className: classes.option\r\n    }), option, {\r\n      selected: optionProps['aria-selected'],\r\n      index,\r\n      inputValue\r\n    }, ownerState);\r\n  };\r\n  const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;\r\n  const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;\r\n  const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;\r\n  const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;\r\n  return /*#__PURE__*/_jsxs(React.Fragment, {\r\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, _extends({\r\n      ref: ref,\r\n      className: clsx(classes.root, className),\r\n      ownerState: ownerState\r\n    }, getRootProps(other), {\r\n      children: renderInput({\r\n        id,\r\n        disabled,\r\n        fullWidth: true,\r\n        size: size === 'small' ? 'small' : undefined,\r\n        InputLabelProps: getInputLabelProps(),\r\n        InputProps: _extends({\r\n          ref: setAnchorEl,\r\n          className: classes.inputRoot,\r\n          startAdornment,\r\n          onClick: event => {\r\n            if (event.target === event.currentTarget) {\r\n              handleInputMouseDown(event);\r\n            }\r\n          }\r\n        }, (hasClearIcon || hasPopupIcon) && {\r\n          endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\r\n            className: classes.endAdornment,\r\n            ownerState: ownerState,\r\n            children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, _extends({}, getClearProps(), {\r\n              \"aria-label\": clearText,\r\n              title: clearText,\r\n              ownerState: ownerState\r\n            }, clearIndicatorSlotProps, {\r\n              className: clsx(classes.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),\r\n              children: clearIcon\r\n            })) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {\r\n              disabled: disabled,\r\n              \"aria-label\": popupOpen ? closeText : openText,\r\n              title: popupOpen ? closeText : openText,\r\n              ownerState: ownerState\r\n            }, popupIndicatorSlotProps, {\r\n              className: clsx(classes.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),\r\n              children: popupIcon\r\n            })) : null]\r\n          })\r\n        }),\r\n        inputProps: _extends({\r\n          className: classes.input,\r\n          disabled,\r\n          readOnly\r\n        }, getInputProps())\r\n      })\r\n    })), anchorEl ? /*#__PURE__*/_jsx(AutocompletePopper, _extends({\r\n      as: PopperComponent,\r\n      disablePortal: disablePortal,\r\n      style: {\r\n        width: anchorEl ? anchorEl.clientWidth : null\r\n      },\r\n      ownerState: ownerState,\r\n      role: \"presentation\",\r\n      anchorEl: anchorEl,\r\n      open: popupOpen\r\n    }, popperSlotProps, {\r\n      className: clsx(classes.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),\r\n      children: /*#__PURE__*/_jsxs(AutocompletePaper, _extends({\r\n        ownerState: ownerState,\r\n        as: PaperComponent\r\n      }, paperSlotProps, {\r\n        className: clsx(classes.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),\r\n        children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(AutocompleteLoading, {\r\n          className: classes.loading,\r\n          ownerState: ownerState,\r\n          children: loadingText\r\n        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(AutocompleteNoOptions, {\r\n          className: classes.noOptions,\r\n          ownerState: ownerState,\r\n          role: \"presentation\",\r\n          onMouseDown: event => {\r\n            // Prevent input blur when interacting with the \"no options\" content\r\n            event.preventDefault();\r\n          },\r\n          children: noOptionsText\r\n        }) : null, groupedOptions.length > 0 ? /*#__PURE__*/_jsx(AutocompleteListbox, _extends({\r\n          as: ListboxComponent,\r\n          className: classes.listbox,\r\n          ownerState: ownerState\r\n        }, otherListboxProps, ListboxProps, {\r\n          ref: combinedListboxRef,\r\n          children: groupedOptions.map((option, index) => {\r\n            if (groupBy) {\r\n              return renderGroup({\r\n                key: option.key,\r\n                group: option.group,\r\n                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\r\n              });\r\n            }\r\n            return renderListOption(option, index);\r\n          })\r\n        })) : null]\r\n      }))\r\n    })) : null]\r\n  });\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes /* remove-proptypes */ = {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\r\n  // ----------------------------------------------------------------------\r\n  /**\r\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\r\n   * known as the completion string, appears inline after the input cursor in the textbox.\r\n   * The inline completion string is visually highlighted and has a selected state.\r\n   * @default false\r\n   */\r\n  autoComplete: PropTypes.bool,\r\n  /**\r\n   * If `true`, the first option is automatically highlighted.\r\n   * @default false\r\n   */\r\n  autoHighlight: PropTypes.bool,\r\n  /**\r\n   * If `true`, the selected option becomes the value of the input\r\n   * when the Autocomplete loses focus unless the user chooses\r\n   * a different option or changes the character string in the input.\r\n   *\r\n   * When using `freeSolo` mode, the typed value will be the input value\r\n   * if the Autocomplete loses focus without highlighting an option.\r\n   * @default false\r\n   */\r\n  autoSelect: PropTypes.bool,\r\n  /**\r\n   * Control if the input should be blurred when an option is selected:\r\n   *\r\n   * - `false` the input is not blurred.\r\n   * - `true` the input is always blurred.\r\n   * - `touch` the input is blurred after a touch event.\r\n   * - `mouse` the input is blurred after a mouse event.\r\n   * @default false\r\n   */\r\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\r\n  /**\r\n   * Props applied to the [`Chip`](/material-ui/api/chip/) element.\r\n   */\r\n  ChipProps: PropTypes.object,\r\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   */\r\n  classes: PropTypes.object,\r\n  /**\r\n   * @ignore\r\n   */\r\n  className: PropTypes.string,\r\n  /**\r\n   * The icon to display in place of the default clear icon.\r\n   * @default <ClearIcon fontSize=\"small\" />\r\n   */\r\n  clearIcon: PropTypes.node,\r\n  /**\r\n   * If `true`, the input's text is cleared on blur if no value is selected.\r\n   *\r\n   * Set to `true` if you want to help the user enter a new value.\r\n   * Set to `false` if you want to help the user resume their search.\r\n   * @default !props.freeSolo\r\n   */\r\n  clearOnBlur: PropTypes.bool,\r\n  /**\r\n   * If `true`, clear all values when the user presses escape and the popup is closed.\r\n   * @default false\r\n   */\r\n  clearOnEscape: PropTypes.bool,\r\n  /**\r\n   * Override the default text for the *clear* icon button.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\r\n   * @default 'Clear'\r\n   */\r\n  clearText: PropTypes.string,\r\n  /**\r\n   * Override the default text for the *close popup* icon button.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\r\n   * @default 'Close'\r\n   */\r\n  closeText: PropTypes.string,\r\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\r\n  componentsProps: PropTypes.shape({\r\n    clearIndicator: PropTypes.object,\r\n    paper: PropTypes.object,\r\n    popper: PropTypes.object,\r\n    popupIndicator: PropTypes.object\r\n  }),\r\n  /**\r\n   * The default value. Use when the component is not controlled.\r\n   * @default props.multiple ? [] : null\r\n   */\r\n  defaultValue: chainPropTypes(PropTypes.any, props => {\r\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\r\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\r\n    }\r\n    return null;\r\n  }),\r\n  /**\r\n   * If `true`, the input can't be cleared.\r\n   * @default false\r\n   */\r\n  disableClearable: PropTypes.bool,\r\n  /**\r\n   * If `true`, the popup won't close when a value is selected.\r\n   * @default false\r\n   */\r\n  disableCloseOnSelect: PropTypes.bool,\r\n  /**\r\n   * If `true`, the component is disabled.\r\n   * @default false\r\n   */\r\n  disabled: PropTypes.bool,\r\n  /**\r\n   * If `true`, will allow focus on disabled items.\r\n   * @default false\r\n   */\r\n  disabledItemsFocusable: PropTypes.bool,\r\n  /**\r\n   * If `true`, the list box in the popup will not wrap focus.\r\n   * @default false\r\n   */\r\n  disableListWrap: PropTypes.bool,\r\n  /**\r\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\r\n   * @default false\r\n   */\r\n  disablePortal: PropTypes.bool,\r\n  /**\r\n   * A function that determines the filtered options to be rendered on search.\r\n   *\r\n   * @default createFilterOptions()\r\n   * @param {Value[]} options The options to render.\r\n   * @param {object} state The state of the component.\r\n   * @returns {Value[]}\r\n   */\r\n  filterOptions: PropTypes.func,\r\n  /**\r\n   * If `true`, hide the selected options from the list box.\r\n   * @default false\r\n   */\r\n  filterSelectedOptions: PropTypes.bool,\r\n  /**\r\n   * Force the visibility display of the popup icon.\r\n   * @default 'auto'\r\n   */\r\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\r\n  /**\r\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\r\n   * @default false\r\n   */\r\n  freeSolo: PropTypes.bool,\r\n  /**\r\n   * If `true`, the input will take up the full width of its container.\r\n   * @default false\r\n   */\r\n  fullWidth: PropTypes.bool,\r\n  /**\r\n   * The label to display when the tags are truncated (`limitTags`).\r\n   *\r\n   * @param {number} more The number of truncated tags.\r\n   * @returns {ReactNode}\r\n   * @default (more) => `+${more}`\r\n   */\r\n  getLimitTagsText: PropTypes.func,\r\n  /**\r\n   * Used to determine the disabled state for a given option.\r\n   *\r\n   * @param {Value} option The option to test.\r\n   * @returns {boolean}\r\n   */\r\n  getOptionDisabled: PropTypes.func,\r\n  /**\r\n   * Used to determine the string value for a given option.\r\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\r\n   *\r\n   * If used in free solo mode, it must accept both the type of the options and a string.\r\n   *\r\n   * @param {Value} option\r\n   * @returns {string}\r\n   * @default (option) => option.label ?? option\r\n   */\r\n  getOptionLabel: PropTypes.func,\r\n  /**\r\n   * If provided, the options will be grouped under the returned string.\r\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\r\n   *\r\n   * @param {Value} options The options to group.\r\n   * @returns {string}\r\n   */\r\n  groupBy: PropTypes.func,\r\n  /**\r\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\r\n   * It should move focus to the first option and last option, respectively.\r\n   * @default !props.freeSolo\r\n   */\r\n  handleHomeEndKeys: PropTypes.bool,\r\n  /**\r\n   * This prop is used to help implement the accessibility logic.\r\n   * If you don't provide an id it will fall back to a randomly generated one.\r\n   */\r\n  id: PropTypes.string,\r\n  /**\r\n   * If `true`, the highlight can move to the input.\r\n   * @default false\r\n   */\r\n  includeInputInList: PropTypes.bool,\r\n  /**\r\n   * The input value.\r\n   */\r\n  inputValue: PropTypes.string,\r\n  /**\r\n   * Used to determine if the option represents the given value.\r\n   * Uses strict equality by default.\r\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\r\n   *\r\n   * @param {Value} option The option to test.\r\n   * @param {Value} value The value to test against.\r\n   * @returns {boolean}\r\n   */\r\n  isOptionEqualToValue: PropTypes.func,\r\n  /**\r\n   * The maximum number of tags that will be visible when not focused.\r\n   * Set `-1` to disable the limit.\r\n   * @default -1\r\n   */\r\n  limitTags: integerPropType,\r\n  /**\r\n   * The component used to render the listbox.\r\n   * @default 'ul'\r\n   */\r\n  ListboxComponent: PropTypes.elementType,\r\n  /**\r\n   * Props applied to the Listbox element.\r\n   */\r\n  ListboxProps: PropTypes.object,\r\n  /**\r\n   * If `true`, the component is in a loading state.\r\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, e.g. `options` are empty).\r\n   * @default false\r\n   */\r\n  loading: PropTypes.bool,\r\n  /**\r\n   * Text to display when in a loading state.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\r\n   * @default 'Loading…'\r\n   */\r\n  loadingText: PropTypes.node,\r\n  /**\r\n   * If `true`, `value` must be an array and the menu will support multiple selections.\r\n   * @default false\r\n   */\r\n  multiple: PropTypes.bool,\r\n  /**\r\n   * Text to display when there are no options.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\r\n   * @default 'No options'\r\n   */\r\n  noOptionsText: PropTypes.node,\r\n  /**\r\n   * Callback fired when the value changes.\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   * @param {Value|Value[]} value The new value of the component.\r\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\r\n   * @param {string} [details]\r\n   */\r\n  onChange: PropTypes.func,\r\n  /**\r\n   * Callback fired when the popup requests to be closed.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\r\n   */\r\n  onClose: PropTypes.func,\r\n  /**\r\n   * Callback fired when the highlight option changes.\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   * @param {Value} option The highlighted option.\r\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`, `\"touch\"`.\r\n   */\r\n  onHighlightChange: PropTypes.func,\r\n  /**\r\n   * Callback fired when the input value changes.\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   * @param {string} value The new value of the text input.\r\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\r\n   */\r\n  onInputChange: PropTypes.func,\r\n  /**\r\n   * Callback fired when the popup requests to be opened.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   */\r\n  onOpen: PropTypes.func,\r\n  /**\r\n   * If `true`, the component is shown.\r\n   */\r\n  open: PropTypes.bool,\r\n  /**\r\n   * If `true`, the popup will open on input focus.\r\n   * @default false\r\n   */\r\n  openOnFocus: PropTypes.bool,\r\n  /**\r\n   * Override the default text for the *open popup* icon button.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\r\n   * @default 'Open'\r\n   */\r\n  openText: PropTypes.string,\r\n  /**\r\n   * Array of options.\r\n   */\r\n  options: PropTypes.array.isRequired,\r\n  /**\r\n   * The component used to render the body of the popup.\r\n   * @default Paper\r\n   */\r\n  PaperComponent: PropTypes.elementType,\r\n  /**\r\n   * The component used to position the popup.\r\n   * @default Popper\r\n   */\r\n  PopperComponent: PropTypes.elementType,\r\n  /**\r\n   * The icon to display in place of the default popup icon.\r\n   * @default <ArrowDropDownIcon />\r\n   */\r\n  popupIcon: PropTypes.node,\r\n  /**\r\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\r\n   * @default false\r\n   */\r\n  readOnly: PropTypes.bool,\r\n  /**\r\n   * Render the group.\r\n   *\r\n   * @param {AutocompleteRenderGroupParams} params The group to render.\r\n   * @returns {ReactNode}\r\n   */\r\n  renderGroup: PropTypes.func,\r\n  /**\r\n   * Render the input.\r\n   *\r\n   * @param {object} params\r\n   * @returns {ReactNode}\r\n   */\r\n  renderInput: PropTypes.func.isRequired,\r\n  /**\r\n   * Render the option, use `getOptionLabel` by default.\r\n   *\r\n   * @param {object} props The props to apply on the li element.\r\n   * @param {Value} option The option to render.\r\n   * @param {object} state The state of each option.\r\n   * @param {object} ownerState The state of the Autocomplete component.\r\n   * @returns {ReactNode}\r\n   */\r\n  renderOption: PropTypes.func,\r\n  /**\r\n   * Render the selected value.\r\n   *\r\n   * @param {Value[]} value The `value` provided to the component.\r\n   * @param {function} getTagProps A tag props getter.\r\n   * @param {object} ownerState The state of the Autocomplete component.\r\n   * @returns {ReactNode}\r\n   */\r\n  renderTags: PropTypes.func,\r\n  /**\r\n   * If `true`, the input's text is selected on focus.\r\n   * It helps the user clear the selected value.\r\n   * @default !props.freeSolo\r\n   */\r\n  selectOnFocus: PropTypes.bool,\r\n  /**\r\n   * The size of the component.\r\n   * @default 'medium'\r\n   */\r\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),\r\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\r\n  slotProps: PropTypes.shape({\r\n    clearIndicator: PropTypes.object,\r\n    paper: PropTypes.object,\r\n    popper: PropTypes.object,\r\n    popupIndicator: PropTypes.object\r\n  }),\r\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\r\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\r\n  /**\r\n   * The value of the autocomplete.\r\n   *\r\n   * The value must have reference equality with the option in order to be selected.\r\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\r\n   */\r\n  value: chainPropTypes(PropTypes.any, props => {\r\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\r\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\r\n    }\r\n    return null;\r\n  })\r\n} : void 0;\r\nexport default Autocomplete;"]},"metadata":{},"sourceType":"module"}