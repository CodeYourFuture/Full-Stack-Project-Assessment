{"ast":null,"code":"var _jsxFileName = \"/Users/ebrahim/Documents/GitHub/Full-Stack-Project-Assessment/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      videoUrl: \"\",\n      videos: []\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        videoUrl: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const videoUrl = this.state.videoUrl;\n      const videoId = extractVideoId(videoUrl); // Create a new video object\n\n      const newVideo = {\n        id: videoId,\n        url: videoUrl\n      }; // Add the new video to the videos array in the state\n\n      this.setState(prevState => ({\n        videos: [...prevState.videos, newVideo]\n      })); // Clear the input field\n\n      this.setState({\n        videoUrl: \"\"\n      });\n    };\n  }\n\n  render() {\n    const {\n      videoUrl,\n      videos\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Video Recommendation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter YouTube video URL\",\n            value: videoUrl,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Add Video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-list\",\n          children: videos.map(video => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video\",\n            children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n              title: \"YouTube Video\",\n              src: `https://www.youtube.com/embed/${video.id}`,\n              allowFullScreen: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, this)\n          }, video.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n} // Extracts the YouTube video ID from the URL\n\n\nfunction extractVideoId(url) {\n  const videoIdRegex = /(?:youtube\\.com\\/(?:[^\\/]+\\/[^\\/]+\\/|(?:v|e(?:mbed)?)\\/|[^\\/]+\\?v=)|youtu\\.be\\/)([^\"&?\\/ ]{11})/;\n  const match = url.match(videoIdRegex);\n  return match ? match[1] : null;\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ebrahim/Documents/GitHub/Full-Stack-Project-Assessment/client/src/App.js"],"names":["React","Component","App","state","videoUrl","videos","handleChange","event","setState","target","value","handleSubmit","preventDefault","videoId","extractVideoId","newVideo","id","url","prevState","render","map","video","videoIdRegex","match"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;;;AAEA,MAAMC,GAAN,SAAkBD,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BE,KAD0B,GAClB;AACNC,MAAAA,QAAQ,EAAE,EADJ;AAENC,MAAAA,MAAM,EAAE;AAFF,KADkB;;AAAA,SAM1BC,YAN0B,GAMVC,KAAD,IAAW;AACxB,WAAKC,QAAL,CAAc;AAAEJ,QAAAA,QAAQ,EAAEG,KAAK,CAACE,MAAN,CAAaC;AAAzB,OAAd;AACD,KARyB;;AAAA,SAU1BC,YAV0B,GAUVJ,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACK,cAAN;AAEA,YAAMR,QAAQ,GAAG,KAAKD,KAAL,CAAWC,QAA5B;AACA,YAAMS,OAAO,GAAGC,cAAc,CAACV,QAAD,CAA9B,CAJwB,CAMxB;;AACA,YAAMW,QAAQ,GAAG;AACfC,QAAAA,EAAE,EAAEH,OADW;AAEfI,QAAAA,GAAG,EAAEb;AAFU,OAAjB,CAPwB,CAYxB;;AACA,WAAKI,QAAL,CAAeU,SAAD,KAAgB;AAC5Bb,QAAAA,MAAM,EAAE,CAAC,GAAGa,SAAS,CAACb,MAAd,EAAsBU,QAAtB;AADoB,OAAhB,CAAd,EAbwB,CAiBxB;;AACA,WAAKP,QAAL,CAAc;AAAEJ,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACD,KA7ByB;AAAA;;AA+B1Be,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEf,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAuB,KAAKF,KAAlC;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACE;AAAM,UAAA,QAAQ,EAAE,KAAKQ,YAArB;AAAA,kCACE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,WAAW,EAAC,yBAFd;AAGE,YAAA,KAAK,EAAEP,QAHT;AAIE,YAAA,QAAQ,EAAE,KAAKE;AAJjB;AAAA;AAAA;AAAA;AAAA,kBADF,eAOE;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAUE;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,oBACGD,MAAM,CAACe,GAAP,CAAYC,KAAD,iBACV;AAAK,YAAA,SAAS,EAAC,OAAf;AAAA,mCACE;AACE,cAAA,KAAK,EAAC,eADR;AAEE,cAAA,GAAG,EAAG,iCAAgCA,KAAK,CAACL,EAAG,EAFjD;AAGE,cAAA,eAAe;AAHjB;AAAA;AAAA;AAAA;AAAA;AADF,aAA4BK,KAAK,CAACL,EAAlC;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA6BD;;AA/DyB,C,CAkE5B;;;AACA,SAASF,cAAT,CAAwBG,GAAxB,EAA6B;AAC3B,QAAMK,YAAY,GAChB,iGADF;AAEA,QAAMC,KAAK,GAAGN,GAAG,CAACM,KAAJ,CAAUD,YAAV,CAAd;AACA,SAAOC,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAR,GAAc,IAA1B;AACD;;AAED,eAAerB,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    videoUrl: \"\",\n    videos: [],\n  };\n\n  handleChange = (event) => {\n    this.setState({ videoUrl: event.target.value });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const videoUrl = this.state.videoUrl;\n    const videoId = extractVideoId(videoUrl);\n\n    // Create a new video object\n    const newVideo = {\n      id: videoId,\n      url: videoUrl,\n    };\n\n    // Add the new video to the videos array in the state\n    this.setState((prevState) => ({\n      videos: [...prevState.videos, newVideo],\n    }));\n\n    // Clear the input field\n    this.setState({ videoUrl: \"\" });\n  };\n\n  render() {\n    const { videoUrl, videos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Video Recommendation</h1>\n        </header>\n        <div className=\"container\">\n          <form onSubmit={this.handleSubmit}>\n            <input\n              type=\"text\"\n              placeholder=\"Enter YouTube video URL\"\n              value={videoUrl}\n              onChange={this.handleChange}\n            />\n            <button type=\"submit\">Add Video</button>\n          </form>\n          <div className=\"video-list\">\n            {videos.map((video) => (\n              <div className=\"video\" key={video.id}>\n                <iframe\n                  title=\"YouTube Video\"\n                  src={`https://www.youtube.com/embed/${video.id}`}\n                  allowFullScreen\n                ></iframe>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// Extracts the YouTube video ID from the URL\nfunction extractVideoId(url) {\n  const videoIdRegex =\n    /(?:youtube\\.com\\/(?:[^\\/]+\\/[^\\/]+\\/|(?:v|e(?:mbed)?)\\/|[^\\/]+\\?v=)|youtu\\.be\\/)([^\"&?\\/ ]{11})/;\n  const match = url.match(videoIdRegex);\n  return match ? match[1] : null;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}