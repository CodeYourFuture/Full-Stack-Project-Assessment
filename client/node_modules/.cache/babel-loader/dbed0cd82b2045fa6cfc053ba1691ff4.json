{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"disabled\", \"label\", \"slotProps\", \"slots\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { getOptionUtilityClass } from './optionClasses';\nimport { useSlotProps } from '../utils';\nimport { useOption } from '../useOption';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction useUtilityClasses(ownerState) {\n  const {\n    disabled,\n    highlighted,\n    selected\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', highlighted && 'highlighted', selected && 'selected']\n  };\n  return composeClasses(slots, useClassNamesOverride(getOptionUtilityClass));\n}\n/**\r\n * An unstyled option to be used within a Select.\r\n *\r\n * Demos:\r\n *\r\n * - [Select](https://mui.com/base-ui/react-select/)\r\n *\r\n * API:\r\n *\r\n * - [Option API](https://mui.com/base-ui/react-select/components-api/#option)\r\n */\n\n\nconst Option = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function Option(props, forwardedRef) {\n  var _slots$root, _optionRef$current;\n\n  const {\n    children,\n    disabled = false,\n    label,\n    slotProps = {},\n    slots = {},\n    value\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const Root = (_slots$root = slots.root) != null ? _slots$root : 'li';\n  const optionRef = React.useRef(null);\n  const combinedRef = useForkRef(optionRef, forwardedRef); // If `label` is not explicitly provided, the `children` are used for convenience.\n  // This is used to populate the select's trigger with the selected option's label.\n\n  const computedLabel = label != null ? label : typeof children === 'string' ? children : (_optionRef$current = optionRef.current) == null ? void 0 : _optionRef$current.innerText;\n  const {\n    getRootProps,\n    selected,\n    highlighted,\n    index\n  } = useOption({\n    disabled,\n    label: computedLabel,\n    rootRef: combinedRef,\n    value\n  });\n\n  const ownerState = _extends({}, props, {\n    disabled,\n    highlighted,\n    index,\n    selected\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const rootProps = useSlotProps({\n    getSlotProps: getRootProps,\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    className: classes.root,\n    ownerState\n  });\n  return /*#__PURE__*/_jsx(Root, _extends({}, rootProps, {\n    children: children\n  }));\n}));\nprocess.env.NODE_ENV !== \"production\" ? Option.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * @ignore\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * If `true`, the option will be disabled.\r\n   * @default false\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * A text representation of the option's content.\r\n   * Used for keyboard text navigation matching.\r\n   */\n  label: PropTypes.string,\n\n  /**\r\n   * The props used for each slot inside the Option.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\r\n   * The components used for each slot inside the Option.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n\n  /**\r\n   * The value of the option.\r\n   */\n  value: PropTypes.any.isRequired\n} : void 0;\nexport { Option };","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/@mui/base/Option/Option.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","unstable_useForkRef","useForkRef","unstable_composeClasses","composeClasses","getOptionUtilityClass","useSlotProps","useOption","useClassNamesOverride","jsx","_jsx","useUtilityClasses","ownerState","disabled","highlighted","selected","slots","root","Option","memo","forwardRef","props","forwardedRef","_slots$root","_optionRef$current","children","label","slotProps","value","other","Root","optionRef","useRef","combinedRef","computedLabel","current","innerText","getRootProps","index","rootRef","classes","rootProps","getSlotProps","elementType","externalSlotProps","externalForwardedProps","className","process","env","NODE_ENV","propTypes","node","string","bool","shape","oneOfType","func","object","any","isRequired"],"mappings":"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","sourcesContent":["'use client';\r\n\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nconst _excluded = [\"children\", \"disabled\", \"label\", \"slotProps\", \"slots\", \"value\"];\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\r\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\r\nimport { getOptionUtilityClass } from './optionClasses';\r\nimport { useSlotProps } from '../utils';\r\nimport { useOption } from '../useOption';\r\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nfunction useUtilityClasses(ownerState) {\r\n  const {\r\n    disabled,\r\n    highlighted,\r\n    selected\r\n  } = ownerState;\r\n  const slots = {\r\n    root: ['root', disabled && 'disabled', highlighted && 'highlighted', selected && 'selected']\r\n  };\r\n  return composeClasses(slots, useClassNamesOverride(getOptionUtilityClass));\r\n}\r\n\r\n/**\r\n * An unstyled option to be used within a Select.\r\n *\r\n * Demos:\r\n *\r\n * - [Select](https://mui.com/base-ui/react-select/)\r\n *\r\n * API:\r\n *\r\n * - [Option API](https://mui.com/base-ui/react-select/components-api/#option)\r\n */\r\nconst Option = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function Option(props, forwardedRef) {\r\n  var _slots$root, _optionRef$current;\r\n  const {\r\n      children,\r\n      disabled = false,\r\n      label,\r\n      slotProps = {},\r\n      slots = {},\r\n      value\r\n    } = props,\r\n    other = _objectWithoutPropertiesLoose(props, _excluded);\r\n  const Root = (_slots$root = slots.root) != null ? _slots$root : 'li';\r\n  const optionRef = React.useRef(null);\r\n  const combinedRef = useForkRef(optionRef, forwardedRef);\r\n\r\n  // If `label` is not explicitly provided, the `children` are used for convenience.\r\n  // This is used to populate the select's trigger with the selected option's label.\r\n  const computedLabel = label != null ? label : typeof children === 'string' ? children : (_optionRef$current = optionRef.current) == null ? void 0 : _optionRef$current.innerText;\r\n  const {\r\n    getRootProps,\r\n    selected,\r\n    highlighted,\r\n    index\r\n  } = useOption({\r\n    disabled,\r\n    label: computedLabel,\r\n    rootRef: combinedRef,\r\n    value\r\n  });\r\n  const ownerState = _extends({}, props, {\r\n    disabled,\r\n    highlighted,\r\n    index,\r\n    selected\r\n  });\r\n  const classes = useUtilityClasses(ownerState);\r\n  const rootProps = useSlotProps({\r\n    getSlotProps: getRootProps,\r\n    elementType: Root,\r\n    externalSlotProps: slotProps.root,\r\n    externalForwardedProps: other,\r\n    className: classes.root,\r\n    ownerState\r\n  });\r\n  return /*#__PURE__*/_jsx(Root, _extends({}, rootProps, {\r\n    children: children\r\n  }));\r\n}));\r\nprocess.env.NODE_ENV !== \"production\" ? Option.propTypes /* remove-proptypes */ = {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\r\n  // ----------------------------------------------------------------------\r\n  /**\r\n   * @ignore\r\n   */\r\n  children: PropTypes.node,\r\n  /**\r\n   * @ignore\r\n   */\r\n  className: PropTypes.string,\r\n  /**\r\n   * If `true`, the option will be disabled.\r\n   * @default false\r\n   */\r\n  disabled: PropTypes.bool,\r\n  /**\r\n   * A text representation of the option's content.\r\n   * Used for keyboard text navigation matching.\r\n   */\r\n  label: PropTypes.string,\r\n  /**\r\n   * The props used for each slot inside the Option.\r\n   * @default {}\r\n   */\r\n  slotProps: PropTypes.shape({\r\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\r\n  }),\r\n  /**\r\n   * The components used for each slot inside the Option.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\r\n  slots: PropTypes.shape({\r\n    root: PropTypes.elementType\r\n  }),\r\n  /**\r\n   * The value of the option.\r\n   */\r\n  value: PropTypes.any.isRequired\r\n} : void 0;\r\nexport { Option };"]},"metadata":{},"sourceType":"module"}