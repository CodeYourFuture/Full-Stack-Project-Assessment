{"ast":null,"code":"var _jsxFileName = \"/home/baki/Desktop/codeyourfuture/Full-Stack-Project-Assessment/client/src/components/AddVideo.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddVideo = _ref => {\n  _s();\n\n  let {\n    onAddVideo\n  } = _ref;\n  const [title, setTitle] = useState('');\n  const [url, setUrl] = useState('');\n\n  const handleAddVideo = () => {\n    if (title.trim() === '' || !isValidYouTubeUrl(url)) {\n      alert('Please enter a valid title and a valid YouTube URL.');\n      return;\n    } // Fetch ile POST isteği gönderme\n\n\n    fetch('http://localhost:5000/videos', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title,\n        youtubeVideoId: getYouTubeVideoIdFromUrl(url)\n      })\n    }).then(response => {\n      if (response.status === 201) {\n        // Veri başarıyla eklendi\n        return response.json();\n      } else {\n        // Veri eklerken bir hata oluştu\n        throw new Error('Failed to add video');\n      }\n    }).then(data => {\n      // Veri başarıyla eklenirse, onAddVideo fonksiyonunu çağırabilirsiniz\n      onAddVideo(data); // Giriş alanlarını sıfırlayın\n\n      setTitle('');\n      setUrl('');\n    }).catch(error => {\n      console.error('Error adding data:', error); // Hata durumunda kullanıcıya bir hata mesajı göstermek için uygun bir mekanizma ekleyin\n\n      alert('An error occurred while adding the video.');\n    });\n  }; // isValidYouTubeUrl ve getYouTubeVideoIdFromUrl fonksiyonları burada bulunmalı\n\n\n  const isValidYouTubeUrl = url => {\n    // Add your validation logic here\n    // For a simple example, you can check if the URL includes 'youtube.com'\n    return url.includes('youtube.com');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"addContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add your video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Title:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: title,\n        onChange: e => setTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"YouTube URL:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: url,\n        onChange: e => setUrl(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddVideo,\n      children: \"Add Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddVideo, \"72MpAzgDUQlEdTFufuGkfu+ySnY=\");\n\n_c = AddVideo;\nexport default AddVideo;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddVideo\");","map":{"version":3,"sources":["/home/baki/Desktop/codeyourfuture/Full-Stack-Project-Assessment/client/src/components/AddVideo.jsx"],"names":["React","useState","AddVideo","onAddVideo","title","setTitle","url","setUrl","handleAddVideo","trim","isValidYouTubeUrl","alert","fetch","method","headers","body","JSON","stringify","youtubeVideoId","getYouTubeVideoIdFromUrl","then","response","status","json","Error","data","catch","error","console","includes","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,QAAQ,GAAG,QAAoB;AAAA;;AAAA,MAAnB;AAAEC,IAAAA;AAAF,GAAmB;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACK,GAAD,EAAMC,MAAN,IAAgBN,QAAQ,CAAC,EAAD,CAA9B;;AAEA,QAAMO,cAAc,GAAG,MAAM;AAC3B,QAAIJ,KAAK,CAACK,IAAN,OAAiB,EAAjB,IAAuB,CAACC,iBAAiB,CAACJ,GAAD,CAA7C,EAAoD;AAClDK,MAAAA,KAAK,CAAC,qDAAD,CAAL;AACA;AACD,KAJ0B,CAM3B;;;AACAC,IAAAA,KAAK,CAAC,8BAAD,EAAiC;AACpCC,MAAAA,MAAM,EAAE,MAD4B;AAEpCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF2B;AAKpCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBb,QAAAA,KADmB;AAEnBc,QAAAA,cAAc,EAAEC,wBAAwB,CAACb,GAAD;AAFrB,OAAf;AAL8B,KAAjC,CAAL,CAUGc,IAVH,CAUSC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B;AACA,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,OAHD,MAGO;AACL;AACA,cAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACD;AACF,KAlBH,EAmBGJ,IAnBH,CAmBSK,IAAD,IAAU;AACd;AACAtB,MAAAA,UAAU,CAACsB,IAAD,CAAV,CAFc,CAId;;AACApB,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,MAAAA,MAAM,CAAC,EAAD,CAAN;AACD,KA1BH,EA2BGmB,KA3BH,CA2BUC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACD,KAAR,CAAc,oBAAd,EAAoCA,KAApC,EADgB,CAEhB;;AACAhB,MAAAA,KAAK,CAAC,2CAAD,CAAL;AACD,KA/BH;AAgCD,GAvCD,CAJmC,CA6CnC;;;AACF,QAAMD,iBAAiB,GAAIJ,GAAD,IAAS;AAC/B;AACA;AACA,WAAOA,GAAG,CAACuB,QAAJ,CAAa,aAAb,CAAP;AACD,GAJH;;AAKE,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,wCAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAEzB,KAA1B;AAAiC,QAAA,QAAQ,EAAG0B,CAAD,IAAOzB,QAAQ,CAACyB,CAAC,CAACC,MAAF,CAASC,KAAV;AAA1D;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAME;AAAA,8CAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAE1B,GAA1B;AAA+B,QAAA,QAAQ,EAAGwB,CAAD,IAAOvB,MAAM,CAACuB,CAAC,CAACC,MAAF,CAASC,KAAV;AAAtD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,eAUE;AAAQ,MAAA,OAAO,EAAExB,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAjED;;GAAMN,Q;;KAAAA,Q;AAmEN,eAAeA,QAAf","sourcesContent":["import React, { useState } from 'react';\n\nconst AddVideo = ({ onAddVideo }) => {\n  const [title, setTitle] = useState('');\n  const [url, setUrl] = useState('');\n\n  const handleAddVideo = () => {\n    if (title.trim() === '' || !isValidYouTubeUrl(url)) {\n      alert('Please enter a valid title and a valid YouTube URL.');\n      return;\n    }\n\n    // Fetch ile POST isteği gönderme\n    fetch('http://localhost:5000/videos', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        title,\n        youtubeVideoId: getYouTubeVideoIdFromUrl(url),\n      }),\n    })\n      .then((response) => {\n        if (response.status === 201) {\n          // Veri başarıyla eklendi\n          return response.json();\n        } else {\n          // Veri eklerken bir hata oluştu\n          throw new Error('Failed to add video');\n        }\n      })\n      .then((data) => {\n        // Veri başarıyla eklenirse, onAddVideo fonksiyonunu çağırabilirsiniz\n        onAddVideo(data);\n\n        // Giriş alanlarını sıfırlayın\n        setTitle('');\n        setUrl('');\n      })\n      .catch((error) => {\n        console.error('Error adding data:', error);\n        // Hata durumunda kullanıcıya bir hata mesajı göstermek için uygun bir mekanizma ekleyin\n        alert('An error occurred while adding the video.');\n      });\n  };\n\n  // isValidYouTubeUrl ve getYouTubeVideoIdFromUrl fonksiyonları burada bulunmalı\nconst isValidYouTubeUrl = (url) => {\n    // Add your validation logic here\n    // For a simple example, you can check if the URL includes 'youtube.com'\n    return url.includes('youtube.com');\n  };\n  return (\n    <div className='addContainer'>\n      <h2>Add your video</h2>\n      <label>\n        Title:\n        <input type=\"text\" value={title} onChange={(e) => setTitle(e.target.value)} />\n      </label>\n      <label>\n        YouTube URL:\n        <input type=\"text\" value={url} onChange={(e) => setUrl(e.target.value)} />\n      </label>\n      <button onClick={handleAddVideo}>Add Video</button>\n    </div>\n  );\n};\n\nexport default AddVideo;\n"]},"metadata":{},"sourceType":"module"}