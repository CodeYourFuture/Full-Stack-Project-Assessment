{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useThemeProps from '../styles/useThemeProps';\nimport GlobalStyles from '../GlobalStyles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const html = (theme, enableColorScheme) => _extends({\n  WebkitFontSmoothing: 'antialiased',\n  // Antialiasing.\n  MozOsxFontSmoothing: 'grayscale',\n  // Antialiasing.\n  // Change from `box-sizing: content-box` so that `width`\n  // is not affected by `padding` or `border`.\n  boxSizing: 'border-box',\n  // Fix font resize problem in iOS\n  WebkitTextSizeAdjust: '100%'\n}, enableColorScheme && !theme.vars && {\n  colorScheme: theme.palette.mode\n});\nexport const body = theme => _extends({\n  color: (theme.vars || theme).palette.text.primary\n}, theme.typography.body1, {\n  backgroundColor: (theme.vars || theme).palette.background.default,\n  '@media print': {\n    // Save printer ink.\n    backgroundColor: (theme.vars || theme).palette.common.white\n  }\n});\nexport const styles = function (theme) {\n  let enableColorScheme = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var _theme$components;\n\n  const colorSchemeStyles = {};\n\n  if (enableColorScheme && theme.colorSchemes) {\n    Object.entries(theme.colorSchemes).forEach(_ref => {\n      let [key, scheme] = _ref;\n\n      var _scheme$palette;\n\n      colorSchemeStyles[theme.getColorSchemeSelector(key).replace(/\\s*&/, '')] = {\n        colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode\n      };\n    });\n  }\n\n  let defaultStyles = _extends({\n    html: html(theme, enableColorScheme),\n    '*, *::before, *::after': {\n      boxSizing: 'inherit'\n    },\n    'strong, b': {\n      fontWeight: theme.typography.fontWeightBold\n    },\n    body: _extends({\n      margin: 0\n    }, body(theme), {\n      // Add support for document.body.requestFullScreen().\n      // Other elements, if background transparent, are not supported.\n      '&::backdrop': {\n        backgroundColor: (theme.vars || theme).palette.background.default\n      }\n    })\n  }, colorSchemeStyles);\n\n  const themeOverrides = (_theme$components = theme.components) == null || (_theme$components = _theme$components.MuiCssBaseline) == null ? void 0 : _theme$components.styleOverrides;\n\n  if (themeOverrides) {\n    defaultStyles = [defaultStyles, themeOverrides];\n  }\n\n  return defaultStyles;\n};\n/**\r\n * Kickstart an elegant, consistent, and simple baseline to build upon.\r\n */\n\nfunction CssBaseline(inProps) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCssBaseline'\n  });\n  const {\n    children,\n    enableColorScheme = false\n  } = props;\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(GlobalStyles, {\n      styles: theme => styles(theme, enableColorScheme)\n    }), children]\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? CssBaseline.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * You can wrap a node.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * Enable `color-scheme` CSS property to use `theme.palette.mode`.\r\n   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme\r\n   * For browser support, check out https://caniuse.com/?search=color-scheme\r\n   * @default false\r\n   */\n  enableColorScheme: PropTypes.bool\n} : void 0;\nexport default CssBaseline;","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/@mui/material/CssBaseline/CssBaseline.js"],"names":["_extends","React","PropTypes","useThemeProps","GlobalStyles","jsx","_jsx","jsxs","_jsxs","html","theme","enableColorScheme","WebkitFontSmoothing","MozOsxFontSmoothing","boxSizing","WebkitTextSizeAdjust","vars","colorScheme","palette","mode","body","color","text","primary","typography","body1","backgroundColor","background","default","common","white","styles","_theme$components","colorSchemeStyles","colorSchemes","Object","entries","forEach","key","scheme","_scheme$palette","getColorSchemeSelector","replace","defaultStyles","fontWeight","fontWeightBold","margin","themeOverrides","components","MuiCssBaseline","styleOverrides","CssBaseline","inProps","props","name","children","Fragment","process","env","NODE_ENV","propTypes","node","bool"],"mappings":"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","sourcesContent":["'use client';\r\n\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport useThemeProps from '../styles/useThemeProps';\r\nimport GlobalStyles from '../GlobalStyles';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\r\nexport const html = (theme, enableColorScheme) => _extends({\r\n  WebkitFontSmoothing: 'antialiased',\r\n  // Antialiasing.\r\n  MozOsxFontSmoothing: 'grayscale',\r\n  // Antialiasing.\r\n  // Change from `box-sizing: content-box` so that `width`\r\n  // is not affected by `padding` or `border`.\r\n  boxSizing: 'border-box',\r\n  // Fix font resize problem in iOS\r\n  WebkitTextSizeAdjust: '100%'\r\n}, enableColorScheme && !theme.vars && {\r\n  colorScheme: theme.palette.mode\r\n});\r\nexport const body = theme => _extends({\r\n  color: (theme.vars || theme).palette.text.primary\r\n}, theme.typography.body1, {\r\n  backgroundColor: (theme.vars || theme).palette.background.default,\r\n  '@media print': {\r\n    // Save printer ink.\r\n    backgroundColor: (theme.vars || theme).palette.common.white\r\n  }\r\n});\r\nexport const styles = (theme, enableColorScheme = false) => {\r\n  var _theme$components;\r\n  const colorSchemeStyles = {};\r\n  if (enableColorScheme && theme.colorSchemes) {\r\n    Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {\r\n      var _scheme$palette;\r\n      colorSchemeStyles[theme.getColorSchemeSelector(key).replace(/\\s*&/, '')] = {\r\n        colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode\r\n      };\r\n    });\r\n  }\r\n  let defaultStyles = _extends({\r\n    html: html(theme, enableColorScheme),\r\n    '*, *::before, *::after': {\r\n      boxSizing: 'inherit'\r\n    },\r\n    'strong, b': {\r\n      fontWeight: theme.typography.fontWeightBold\r\n    },\r\n    body: _extends({\r\n      margin: 0\r\n    }, body(theme), {\r\n      // Add support for document.body.requestFullScreen().\r\n      // Other elements, if background transparent, are not supported.\r\n      '&::backdrop': {\r\n        backgroundColor: (theme.vars || theme).palette.background.default\r\n      }\r\n    })\r\n  }, colorSchemeStyles);\r\n  const themeOverrides = (_theme$components = theme.components) == null || (_theme$components = _theme$components.MuiCssBaseline) == null ? void 0 : _theme$components.styleOverrides;\r\n  if (themeOverrides) {\r\n    defaultStyles = [defaultStyles, themeOverrides];\r\n  }\r\n  return defaultStyles;\r\n};\r\n\r\n/**\r\n * Kickstart an elegant, consistent, and simple baseline to build upon.\r\n */\r\nfunction CssBaseline(inProps) {\r\n  const props = useThemeProps({\r\n    props: inProps,\r\n    name: 'MuiCssBaseline'\r\n  });\r\n  const {\r\n    children,\r\n    enableColorScheme = false\r\n  } = props;\r\n  return /*#__PURE__*/_jsxs(React.Fragment, {\r\n    children: [/*#__PURE__*/_jsx(GlobalStyles, {\r\n      styles: theme => styles(theme, enableColorScheme)\r\n    }), children]\r\n  });\r\n}\r\nprocess.env.NODE_ENV !== \"production\" ? CssBaseline.propTypes /* remove-proptypes */ = {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\r\n  // ----------------------------------------------------------------------\r\n  /**\r\n   * You can wrap a node.\r\n   */\r\n  children: PropTypes.node,\r\n  /**\r\n   * Enable `color-scheme` CSS property to use `theme.palette.mode`.\r\n   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme\r\n   * For browser support, check out https://caniuse.com/?search=color-scheme\r\n   * @default false\r\n   */\r\n  enableColorScheme: PropTypes.bool\r\n} : void 0;\r\nexport default CssBaseline;"]},"metadata":{},"sourceType":"module"}