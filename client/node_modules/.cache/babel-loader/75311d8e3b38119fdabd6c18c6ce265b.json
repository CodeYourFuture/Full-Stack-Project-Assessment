{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport sliderClasses from './sliderClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar useValueLabelClasses = function useValueLabelClasses(props) {\n  var open = props.open;\n  var utilityClasses = {\n    offset: clsx(open && sliderClasses.valueLabelOpen),\n    circle: sliderClasses.valueLabelCircle,\n    label: sliderClasses.valueLabelLabel\n  };\n  return utilityClasses;\n};\n/**\n * @ignore - internal component.\n */\n\n\nexport default function SliderValueLabel(props) {\n  var children = props.children,\n      className = props.className,\n      value = props.value;\n  var classes = useValueLabelClasses(props);\n\n  if (!children) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.cloneElement(children, {\n    className: clsx(children.props.className)\n  }, /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [children.props.children, /*#__PURE__*/_jsx(\"span\", {\n      className: clsx(classes.offset, className),\n      \"aria-hidden\": true,\n      children: /*#__PURE__*/_jsx(\"span\", {\n        className: classes.circle,\n        children: /*#__PURE__*/_jsx(\"span\", {\n          className: classes.label,\n          children: value\n        })\n      })\n    })]\n  }));\n}\nprocess.env.NODE_ENV !== \"production\" ? SliderValueLabel.propTypes = {\n  children: PropTypes.element.isRequired,\n  className: PropTypes.string,\n  value: PropTypes.node\n} : void 0;","map":{"version":3,"sources":["/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@mui/material/Slider/SliderValueLabel.js"],"names":["React","PropTypes","clsx","sliderClasses","jsx","_jsx","jsxs","_jsxs","useValueLabelClasses","props","open","utilityClasses","offset","valueLabelOpen","circle","valueLabelCircle","label","valueLabelLabel","SliderValueLabel","children","className","value","classes","cloneElement","Fragment","process","env","NODE_ENV","propTypes","element","isRequired","string","node"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,SAASC,IAAI,IAAIC,KAAjB,QAA8B,mBAA9B;;AACA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAC,KAAK,EAAI;AACpC,MACEC,IADF,GAEID,KAFJ,CACEC,IADF;AAGA,MAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAEV,IAAI,CAACQ,IAAI,IAAIP,aAAa,CAACU,cAAvB,CADS;AAErBC,IAAAA,MAAM,EAAEX,aAAa,CAACY,gBAFD;AAGrBC,IAAAA,KAAK,EAAEb,aAAa,CAACc;AAHA,GAAvB;AAKA,SAAON,cAAP;AACD,CAVD;AAYA;AACA;AACA;;;AACA,eAAe,SAASO,gBAAT,CAA0BT,KAA1B,EAAiC;AAC9C,MACEU,QADF,GAIIV,KAJJ,CACEU,QADF;AAAA,MAEEC,SAFF,GAIIX,KAJJ,CAEEW,SAFF;AAAA,MAGEC,KAHF,GAIIZ,KAJJ,CAGEY,KAHF;AAKA,MAAMC,OAAO,GAAGd,oBAAoB,CAACC,KAAD,CAApC;;AACA,MAAI,CAACU,QAAL,EAAe;AACb,WAAO,IAAP;AACD;;AACD,SAAO,aAAanB,KAAK,CAACuB,YAAN,CAAmBJ,QAAnB,EAA6B;AAC/CC,IAAAA,SAAS,EAAElB,IAAI,CAACiB,QAAQ,CAACV,KAAT,CAAeW,SAAhB;AADgC,GAA7B,EAEjB,aAAab,KAAK,CAACP,KAAK,CAACwB,QAAP,EAAiB;AACpCL,IAAAA,QAAQ,EAAE,CAACA,QAAQ,CAACV,KAAT,CAAeU,QAAhB,EAA0B,aAAad,IAAI,CAAC,MAAD,EAAS;AAC5De,MAAAA,SAAS,EAAElB,IAAI,CAACoB,OAAO,CAACV,MAAT,EAAiBQ,SAAjB,CAD6C;AAE5D,qBAAe,IAF6C;AAG5DD,MAAAA,QAAQ,EAAE,aAAad,IAAI,CAAC,MAAD,EAAS;AAClCe,QAAAA,SAAS,EAAEE,OAAO,CAACR,MADe;AAElCK,QAAAA,QAAQ,EAAE,aAAad,IAAI,CAAC,MAAD,EAAS;AAClCe,UAAAA,SAAS,EAAEE,OAAO,CAACN,KADe;AAElCG,UAAAA,QAAQ,EAAEE;AAFwB,SAAT;AAFO,OAAT;AAHiC,KAAT,CAA3C;AAD0B,GAAjB,CAFD,CAApB;AAeD;AACDI,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCT,gBAAgB,CAACU,SAAjB,GAA6B;AACnET,EAAAA,QAAQ,EAAElB,SAAS,CAAC4B,OAAV,CAAkBC,UADuC;AAEnEV,EAAAA,SAAS,EAAEnB,SAAS,CAAC8B,MAF8C;AAGnEV,EAAAA,KAAK,EAAEpB,SAAS,CAAC+B;AAHkD,CAArE,GAII,KAAK,CAJT","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport sliderClasses from './sliderClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useValueLabelClasses = props => {\n  const {\n    open\n  } = props;\n  const utilityClasses = {\n    offset: clsx(open && sliderClasses.valueLabelOpen),\n    circle: sliderClasses.valueLabelCircle,\n    label: sliderClasses.valueLabelLabel\n  };\n  return utilityClasses;\n};\n\n/**\n * @ignore - internal component.\n */\nexport default function SliderValueLabel(props) {\n  const {\n    children,\n    className,\n    value\n  } = props;\n  const classes = useValueLabelClasses(props);\n  if (!children) {\n    return null;\n  }\n  return /*#__PURE__*/React.cloneElement(children, {\n    className: clsx(children.props.className)\n  }, /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [children.props.children, /*#__PURE__*/_jsx(\"span\", {\n      className: clsx(classes.offset, className),\n      \"aria-hidden\": true,\n      children: /*#__PURE__*/_jsx(\"span\", {\n        className: classes.circle,\n        children: /*#__PURE__*/_jsx(\"span\", {\n          className: classes.label,\n          children: value\n        })\n      })\n    })]\n  }));\n}\nprocess.env.NODE_ENV !== \"production\" ? SliderValueLabel.propTypes = {\n  children: PropTypes.element.isRequired,\n  className: PropTypes.string,\n  value: PropTypes.node\n} : void 0;"]},"metadata":{},"sourceType":"module"}