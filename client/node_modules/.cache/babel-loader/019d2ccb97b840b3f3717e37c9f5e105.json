{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { ListActionTypes } from './listActions.types';\n/**\n * Looks up the next valid item to highlight within the list.\n *\n * @param currentIndex The index of the start of the search.\n * @param lookupDirection Whether to look for the next or previous item.\n * @param items The array of items to search.\n * @param includeDisabledItems Whether to include disabled items in the search.\n * @param isItemDisabled A function that determines whether an item is disabled.\n * @param wrapAround Whether to wrap around the list when searching.\n * @returns The index of the next valid item to highlight or -1 if no valid item is found.\n */\n\nfunction findValidItemToHighlight(currentIndex, lookupDirection, items, includeDisabledItems, isItemDisabled, wrapAround) {\n  if (items.length === 0 || !includeDisabledItems && items.every((item, itemIndex) => isItemDisabled(item, itemIndex))) {\n    return -1;\n  }\n\n  let nextFocus = currentIndex;\n\n  for (;;) {\n    // No valid items found\n    if (!wrapAround && lookupDirection === 'next' && nextFocus === items.length || !wrapAround && lookupDirection === 'previous' && nextFocus === -1) {\n      return -1;\n    }\n\n    const nextFocusDisabled = includeDisabledItems ? false : isItemDisabled(items[nextFocus], nextFocus);\n\n    if (nextFocusDisabled) {\n      nextFocus += lookupDirection === 'next' ? 1 : -1;\n\n      if (wrapAround) {\n        nextFocus = (nextFocus + items.length) % items.length;\n      }\n    } else {\n      return nextFocus;\n    }\n  }\n}\n/**\n * Gets the next item to highlight based on the current highlighted item and the search direction.\n *\n * @param previouslyHighlightedValue The item from which to start the search for the next candidate.\n * @param offset The offset from the previously highlighted item to search for the next candidate or a special named value ('reset', 'start', 'end').\n * @param context The list action context.\n *\n * @returns The next item to highlight or null if no item is valid.\n */\n\n\nexport function moveHighlight(previouslyHighlightedValue, offset, context) {\n  var _items$nextIndex;\n\n  const {\n    items,\n    isItemDisabled,\n    disableListWrap,\n    disabledItemsFocusable,\n    itemComparer,\n    focusManagement\n  } = context; // TODO: make this configurable\n  // The always should be an item highlighted when focus is managed by the DOM\n  // so that it's accessible by the `tab` key.\n\n  const defaultHighlightedIndex = focusManagement === 'DOM' ? 0 : -1;\n  const maxIndex = items.length - 1;\n  const previouslyHighlightedIndex = previouslyHighlightedValue == null ? -1 : items.findIndex(item => itemComparer(item, previouslyHighlightedValue));\n  let nextIndexCandidate;\n  let lookupDirection;\n  let wrapAround = !disableListWrap;\n\n  switch (offset) {\n    case 'reset':\n      if (defaultHighlightedIndex === -1) {\n        return null;\n      }\n\n      nextIndexCandidate = 0;\n      lookupDirection = 'next';\n      wrapAround = false;\n      break;\n\n    case 'start':\n      nextIndexCandidate = 0;\n      lookupDirection = 'next';\n      wrapAround = false;\n      break;\n\n    case 'end':\n      nextIndexCandidate = maxIndex;\n      lookupDirection = 'previous';\n      wrapAround = false;\n      break;\n\n    default:\n      {\n        const newIndex = previouslyHighlightedIndex + offset;\n\n        if (newIndex < 0) {\n          if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(offset) > 1) {\n            nextIndexCandidate = 0;\n            lookupDirection = 'next';\n          } else {\n            nextIndexCandidate = maxIndex;\n            lookupDirection = 'previous';\n          }\n        } else if (newIndex > maxIndex) {\n          if (!wrapAround || Math.abs(offset) > 1) {\n            nextIndexCandidate = maxIndex;\n            lookupDirection = 'previous';\n          } else {\n            nextIndexCandidate = 0;\n            lookupDirection = 'next';\n          }\n        } else {\n          nextIndexCandidate = newIndex;\n          lookupDirection = offset >= 0 ? 'next' : 'previous';\n        }\n      }\n  }\n\n  const nextIndex = findValidItemToHighlight(nextIndexCandidate, lookupDirection, items, disabledItemsFocusable, isItemDisabled, wrapAround); // If there are no valid items to highlight, return the previously highlighted item (if it's still valid).\n\n  if (nextIndex === -1 && previouslyHighlightedValue !== null && !isItemDisabled(previouslyHighlightedValue, previouslyHighlightedIndex)) {\n    return previouslyHighlightedValue;\n  }\n\n  return (_items$nextIndex = items[nextIndex]) != null ? _items$nextIndex : null;\n}\n/**\n * Toggles the selection of an item.\n *\n * @param item Item to toggle.\n * @param selectedValues Already selected items.\n * @param selectionMode The number of items that can be simultanously selected.\n * @param itemComparer A custom item comparer function.\n *\n * @returns The new array of selected items.\n */\n\nexport function toggleSelection(item, selectedValues, selectionMode, itemComparer) {\n  if (selectionMode === 'none') {\n    return [];\n  }\n\n  if (selectionMode === 'single') {\n    // if the item to select has already been selected, return the original array\n    if (itemComparer(selectedValues[0], item)) {\n      return selectedValues;\n    }\n\n    return [item];\n  } // The toggled item is selected; remove it from the selection.\n\n\n  if (selectedValues.some(sv => itemComparer(sv, item))) {\n    return selectedValues.filter(sv => !itemComparer(sv, item));\n  } // The toggled item is not selected - add it to the selection.\n\n\n  return [...selectedValues, item];\n}\n\nfunction handleItemSelection(item, state, context) {\n  const {\n    itemComparer,\n    isItemDisabled,\n    selectionMode,\n    items\n  } = context;\n  const {\n    selectedValues\n  } = state;\n  const itemIndex = items.findIndex(i => itemComparer(item, i));\n\n  if (isItemDisabled(item, itemIndex)) {\n    return state;\n  } // if the item is already selected, remove it from the selection, otherwise add it\n\n\n  const newSelectedValues = toggleSelection(item, selectedValues, selectionMode, itemComparer);\n  return _extends({}, state, {\n    selectedValues: newSelectedValues,\n    highlightedValue: item\n  });\n}\n\nfunction handleKeyDown(key, state, context) {\n  const previouslySelectedValue = state.highlightedValue;\n  const {\n    orientation,\n    pageSize\n  } = context;\n\n  switch (key) {\n    case 'Home':\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, 'start', context)\n      });\n\n    case 'End':\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, 'end', context)\n      });\n\n    case 'PageUp':\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, -pageSize, context)\n      });\n\n    case 'PageDown':\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, pageSize, context)\n      });\n\n    case 'ArrowUp':\n      if (orientation !== 'vertical') {\n        break;\n      }\n\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, -1, context)\n      });\n\n    case 'ArrowDown':\n      if (orientation !== 'vertical') {\n        break;\n      }\n\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, 1, context)\n      });\n\n    case 'ArrowLeft':\n      {\n        if (orientation === 'vertical') {\n          break;\n        }\n\n        const offset = orientation === 'horizontal-ltr' ? -1 : 1;\n        return _extends({}, state, {\n          highlightedValue: moveHighlight(previouslySelectedValue, offset, context)\n        });\n      }\n\n    case 'ArrowRight':\n      {\n        if (orientation === 'vertical') {\n          break;\n        }\n\n        const offset = orientation === 'horizontal-ltr' ? 1 : -1;\n        return _extends({}, state, {\n          highlightedValue: moveHighlight(previouslySelectedValue, offset, context)\n        });\n      }\n\n    case 'Enter':\n    case ' ':\n      if (state.highlightedValue === null) {\n        return state;\n      }\n\n      return handleItemSelection(state.highlightedValue, state, context);\n\n    default:\n      break;\n  }\n\n  return state;\n}\n\nfunction handleBlur(state, context) {\n  if (context.focusManagement === 'DOM') {\n    return state;\n  }\n\n  return _extends({}, state, {\n    highlightedValue: null\n  });\n}\n\nfunction textCriteriaMatches(nextFocus, searchString, stringifyItem) {\n  var _stringifyItem;\n\n  const text = (_stringifyItem = stringifyItem(nextFocus)) == null ? void 0 : _stringifyItem.trim().toLowerCase();\n\n  if (!text || text.length === 0) {\n    // Make item not navigable if stringification fails or results in empty string.\n    return false;\n  }\n\n  return text.indexOf(searchString) === 0;\n}\n\nfunction handleTextNavigation(state, searchString, context) {\n  const {\n    items,\n    isItemDisabled,\n    disabledItemsFocusable,\n    getItemAsString\n  } = context;\n  const startWithCurrentItem = searchString.length > 1;\n  let nextItem = startWithCurrentItem ? state.highlightedValue : moveHighlight(state.highlightedValue, 1, context);\n\n  for (let index = 0; index < items.length; index += 1) {\n    // Return un-mutated state if looped back to the currently highlighted value\n    if (!nextItem || !startWithCurrentItem && state.highlightedValue === nextItem) {\n      return state;\n    }\n\n    if (textCriteriaMatches(nextItem, searchString, getItemAsString) && (!isItemDisabled(nextItem, items.indexOf(nextItem)) || disabledItemsFocusable)) {\n      // The nextItem is the element to be highlighted\n      return _extends({}, state, {\n        highlightedValue: nextItem\n      });\n    } // Move to the next element.\n\n\n    nextItem = moveHighlight(nextItem, 1, context);\n  } // No item matches the text search criteria\n\n\n  return state;\n}\n\nfunction handleItemsChange(items, previousItems, state, context) {\n  var _state$selectedValues;\n\n  const {\n    itemComparer,\n    focusManagement\n  } = context;\n  let newHighlightedValue = null;\n\n  if (state.highlightedValue != null) {\n    var _items$find;\n\n    newHighlightedValue = (_items$find = items.find(item => itemComparer(item, state.highlightedValue))) != null ? _items$find : null;\n  } else if (focusManagement === 'DOM' && previousItems.length === 0) {\n    newHighlightedValue = moveHighlight(null, 'reset', context);\n  } // exclude selected values that are no longer in the items list\n\n\n  const selectedValues = (_state$selectedValues = state.selectedValues) != null ? _state$selectedValues : [];\n  const newSelectedValues = selectedValues.filter(selectedValue => items.some(item => itemComparer(item, selectedValue)));\n  return _extends({}, state, {\n    highlightedValue: newHighlightedValue,\n    selectedValues: newSelectedValues\n  });\n}\n\nfunction handleResetHighlight(state, context) {\n  return _extends({}, state, {\n    highlightedValue: moveHighlight(null, 'reset', context)\n  });\n}\n\nexport function listReducer(state, action) {\n  const {\n    type,\n    context\n  } = action;\n\n  switch (type) {\n    case ListActionTypes.keyDown:\n      return handleKeyDown(action.key, state, context);\n\n    case ListActionTypes.itemClick:\n      return handleItemSelection(action.item, state, context);\n\n    case ListActionTypes.blur:\n      return handleBlur(state, context);\n\n    case ListActionTypes.textNavigation:\n      return handleTextNavigation(state, action.searchString, context);\n\n    case ListActionTypes.itemsChange:\n      return handleItemsChange(action.items, action.previousItems, state, context);\n\n    case ListActionTypes.resetHighlight:\n      return handleResetHighlight(state, context);\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@mui/base/useList/listReducer.js"],"names":["_extends","ListActionTypes","findValidItemToHighlight","currentIndex","lookupDirection","items","includeDisabledItems","isItemDisabled","wrapAround","length","every","item","itemIndex","nextFocus","nextFocusDisabled","moveHighlight","previouslyHighlightedValue","offset","context","_items$nextIndex","disableListWrap","disabledItemsFocusable","itemComparer","focusManagement","defaultHighlightedIndex","maxIndex","previouslyHighlightedIndex","findIndex","nextIndexCandidate","newIndex","Math","abs","nextIndex","toggleSelection","selectedValues","selectionMode","some","sv","filter","handleItemSelection","state","i","newSelectedValues","highlightedValue","handleKeyDown","key","previouslySelectedValue","orientation","pageSize","handleBlur","textCriteriaMatches","searchString","stringifyItem","_stringifyItem","text","trim","toLowerCase","indexOf","handleTextNavigation","getItemAsString","startWithCurrentItem","nextItem","index","handleItemsChange","previousItems","_state$selectedValues","newHighlightedValue","_items$find","find","selectedValue","handleResetHighlight","listReducer","action","type","keyDown","itemClick","blur","textNavigation","itemsChange","resetHighlight"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { ListActionTypes } from './listActions.types';\n/**\n * Looks up the next valid item to highlight within the list.\n *\n * @param currentIndex The index of the start of the search.\n * @param lookupDirection Whether to look for the next or previous item.\n * @param items The array of items to search.\n * @param includeDisabledItems Whether to include disabled items in the search.\n * @param isItemDisabled A function that determines whether an item is disabled.\n * @param wrapAround Whether to wrap around the list when searching.\n * @returns The index of the next valid item to highlight or -1 if no valid item is found.\n */\nfunction findValidItemToHighlight(currentIndex, lookupDirection, items, includeDisabledItems, isItemDisabled, wrapAround) {\n  if (items.length === 0 || !includeDisabledItems && items.every((item, itemIndex) => isItemDisabled(item, itemIndex))) {\n    return -1;\n  }\n  let nextFocus = currentIndex;\n  for (;;) {\n    // No valid items found\n    if (!wrapAround && lookupDirection === 'next' && nextFocus === items.length || !wrapAround && lookupDirection === 'previous' && nextFocus === -1) {\n      return -1;\n    }\n    const nextFocusDisabled = includeDisabledItems ? false : isItemDisabled(items[nextFocus], nextFocus);\n    if (nextFocusDisabled) {\n      nextFocus += lookupDirection === 'next' ? 1 : -1;\n      if (wrapAround) {\n        nextFocus = (nextFocus + items.length) % items.length;\n      }\n    } else {\n      return nextFocus;\n    }\n  }\n}\n\n/**\n * Gets the next item to highlight based on the current highlighted item and the search direction.\n *\n * @param previouslyHighlightedValue The item from which to start the search for the next candidate.\n * @param offset The offset from the previously highlighted item to search for the next candidate or a special named value ('reset', 'start', 'end').\n * @param context The list action context.\n *\n * @returns The next item to highlight or null if no item is valid.\n */\nexport function moveHighlight(previouslyHighlightedValue, offset, context) {\n  var _items$nextIndex;\n  const {\n    items,\n    isItemDisabled,\n    disableListWrap,\n    disabledItemsFocusable,\n    itemComparer,\n    focusManagement\n  } = context;\n\n  // TODO: make this configurable\n  // The always should be an item highlighted when focus is managed by the DOM\n  // so that it's accessible by the `tab` key.\n  const defaultHighlightedIndex = focusManagement === 'DOM' ? 0 : -1;\n  const maxIndex = items.length - 1;\n  const previouslyHighlightedIndex = previouslyHighlightedValue == null ? -1 : items.findIndex(item => itemComparer(item, previouslyHighlightedValue));\n  let nextIndexCandidate;\n  let lookupDirection;\n  let wrapAround = !disableListWrap;\n  switch (offset) {\n    case 'reset':\n      if (defaultHighlightedIndex === -1) {\n        return null;\n      }\n      nextIndexCandidate = 0;\n      lookupDirection = 'next';\n      wrapAround = false;\n      break;\n    case 'start':\n      nextIndexCandidate = 0;\n      lookupDirection = 'next';\n      wrapAround = false;\n      break;\n    case 'end':\n      nextIndexCandidate = maxIndex;\n      lookupDirection = 'previous';\n      wrapAround = false;\n      break;\n    default:\n      {\n        const newIndex = previouslyHighlightedIndex + offset;\n        if (newIndex < 0) {\n          if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(offset) > 1) {\n            nextIndexCandidate = 0;\n            lookupDirection = 'next';\n          } else {\n            nextIndexCandidate = maxIndex;\n            lookupDirection = 'previous';\n          }\n        } else if (newIndex > maxIndex) {\n          if (!wrapAround || Math.abs(offset) > 1) {\n            nextIndexCandidate = maxIndex;\n            lookupDirection = 'previous';\n          } else {\n            nextIndexCandidate = 0;\n            lookupDirection = 'next';\n          }\n        } else {\n          nextIndexCandidate = newIndex;\n          lookupDirection = offset >= 0 ? 'next' : 'previous';\n        }\n      }\n  }\n  const nextIndex = findValidItemToHighlight(nextIndexCandidate, lookupDirection, items, disabledItemsFocusable, isItemDisabled, wrapAround);\n\n  // If there are no valid items to highlight, return the previously highlighted item (if it's still valid).\n  if (nextIndex === -1 && previouslyHighlightedValue !== null && !isItemDisabled(previouslyHighlightedValue, previouslyHighlightedIndex)) {\n    return previouslyHighlightedValue;\n  }\n  return (_items$nextIndex = items[nextIndex]) != null ? _items$nextIndex : null;\n}\n\n/**\n * Toggles the selection of an item.\n *\n * @param item Item to toggle.\n * @param selectedValues Already selected items.\n * @param selectionMode The number of items that can be simultanously selected.\n * @param itemComparer A custom item comparer function.\n *\n * @returns The new array of selected items.\n */\nexport function toggleSelection(item, selectedValues, selectionMode, itemComparer) {\n  if (selectionMode === 'none') {\n    return [];\n  }\n  if (selectionMode === 'single') {\n    // if the item to select has already been selected, return the original array\n    if (itemComparer(selectedValues[0], item)) {\n      return selectedValues;\n    }\n    return [item];\n  }\n\n  // The toggled item is selected; remove it from the selection.\n  if (selectedValues.some(sv => itemComparer(sv, item))) {\n    return selectedValues.filter(sv => !itemComparer(sv, item));\n  }\n\n  // The toggled item is not selected - add it to the selection.\n  return [...selectedValues, item];\n}\nfunction handleItemSelection(item, state, context) {\n  const {\n    itemComparer,\n    isItemDisabled,\n    selectionMode,\n    items\n  } = context;\n  const {\n    selectedValues\n  } = state;\n  const itemIndex = items.findIndex(i => itemComparer(item, i));\n  if (isItemDisabled(item, itemIndex)) {\n    return state;\n  }\n\n  // if the item is already selected, remove it from the selection, otherwise add it\n  const newSelectedValues = toggleSelection(item, selectedValues, selectionMode, itemComparer);\n  return _extends({}, state, {\n    selectedValues: newSelectedValues,\n    highlightedValue: item\n  });\n}\nfunction handleKeyDown(key, state, context) {\n  const previouslySelectedValue = state.highlightedValue;\n  const {\n    orientation,\n    pageSize\n  } = context;\n  switch (key) {\n    case 'Home':\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, 'start', context)\n      });\n    case 'End':\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, 'end', context)\n      });\n    case 'PageUp':\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, -pageSize, context)\n      });\n    case 'PageDown':\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, pageSize, context)\n      });\n    case 'ArrowUp':\n      if (orientation !== 'vertical') {\n        break;\n      }\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, -1, context)\n      });\n    case 'ArrowDown':\n      if (orientation !== 'vertical') {\n        break;\n      }\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, 1, context)\n      });\n    case 'ArrowLeft':\n      {\n        if (orientation === 'vertical') {\n          break;\n        }\n        const offset = orientation === 'horizontal-ltr' ? -1 : 1;\n        return _extends({}, state, {\n          highlightedValue: moveHighlight(previouslySelectedValue, offset, context)\n        });\n      }\n    case 'ArrowRight':\n      {\n        if (orientation === 'vertical') {\n          break;\n        }\n        const offset = orientation === 'horizontal-ltr' ? 1 : -1;\n        return _extends({}, state, {\n          highlightedValue: moveHighlight(previouslySelectedValue, offset, context)\n        });\n      }\n    case 'Enter':\n    case ' ':\n      if (state.highlightedValue === null) {\n        return state;\n      }\n      return handleItemSelection(state.highlightedValue, state, context);\n    default:\n      break;\n  }\n  return state;\n}\nfunction handleBlur(state, context) {\n  if (context.focusManagement === 'DOM') {\n    return state;\n  }\n  return _extends({}, state, {\n    highlightedValue: null\n  });\n}\nfunction textCriteriaMatches(nextFocus, searchString, stringifyItem) {\n  var _stringifyItem;\n  const text = (_stringifyItem = stringifyItem(nextFocus)) == null ? void 0 : _stringifyItem.trim().toLowerCase();\n  if (!text || text.length === 0) {\n    // Make item not navigable if stringification fails or results in empty string.\n    return false;\n  }\n  return text.indexOf(searchString) === 0;\n}\nfunction handleTextNavigation(state, searchString, context) {\n  const {\n    items,\n    isItemDisabled,\n    disabledItemsFocusable,\n    getItemAsString\n  } = context;\n  const startWithCurrentItem = searchString.length > 1;\n  let nextItem = startWithCurrentItem ? state.highlightedValue : moveHighlight(state.highlightedValue, 1, context);\n  for (let index = 0; index < items.length; index += 1) {\n    // Return un-mutated state if looped back to the currently highlighted value\n    if (!nextItem || !startWithCurrentItem && state.highlightedValue === nextItem) {\n      return state;\n    }\n    if (textCriteriaMatches(nextItem, searchString, getItemAsString) && (!isItemDisabled(nextItem, items.indexOf(nextItem)) || disabledItemsFocusable)) {\n      // The nextItem is the element to be highlighted\n      return _extends({}, state, {\n        highlightedValue: nextItem\n      });\n    }\n    // Move to the next element.\n    nextItem = moveHighlight(nextItem, 1, context);\n  }\n\n  // No item matches the text search criteria\n  return state;\n}\nfunction handleItemsChange(items, previousItems, state, context) {\n  var _state$selectedValues;\n  const {\n    itemComparer,\n    focusManagement\n  } = context;\n  let newHighlightedValue = null;\n  if (state.highlightedValue != null) {\n    var _items$find;\n    newHighlightedValue = (_items$find = items.find(item => itemComparer(item, state.highlightedValue))) != null ? _items$find : null;\n  } else if (focusManagement === 'DOM' && previousItems.length === 0) {\n    newHighlightedValue = moveHighlight(null, 'reset', context);\n  }\n\n  // exclude selected values that are no longer in the items list\n  const selectedValues = (_state$selectedValues = state.selectedValues) != null ? _state$selectedValues : [];\n  const newSelectedValues = selectedValues.filter(selectedValue => items.some(item => itemComparer(item, selectedValue)));\n  return _extends({}, state, {\n    highlightedValue: newHighlightedValue,\n    selectedValues: newSelectedValues\n  });\n}\nfunction handleResetHighlight(state, context) {\n  return _extends({}, state, {\n    highlightedValue: moveHighlight(null, 'reset', context)\n  });\n}\nexport function listReducer(state, action) {\n  const {\n    type,\n    context\n  } = action;\n  switch (type) {\n    case ListActionTypes.keyDown:\n      return handleKeyDown(action.key, state, context);\n    case ListActionTypes.itemClick:\n      return handleItemSelection(action.item, state, context);\n    case ListActionTypes.blur:\n      return handleBlur(state, context);\n    case ListActionTypes.textNavigation:\n      return handleTextNavigation(state, action.searchString, context);\n    case ListActionTypes.itemsChange:\n      return handleItemsChange(action.items, action.previousItems, state, context);\n    case ListActionTypes.resetHighlight:\n      return handleResetHighlight(state, context);\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}