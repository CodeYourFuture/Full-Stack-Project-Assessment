{"ast":null,"code":"var _jsxFileName = \"/home/coder/Documents/CYF/Back-End/Full-Stack-Project-Assessment/client/src/component/ShowingVideos.jsx\",\n    _s = $RefreshSig$();\n\n// import React, { useState } from \"react\";\n// function ShowingVideos(props) {\n//   const [videos, setVideos] = useState(props.result);\n//   function convertToEmbedUrl(url) {\n//     const videoId = url.split(\"v=\")[1];\n//     return `https://www.youtube.com/embed/${videoId}`;\n//   }\n//   function deleteVideo(id) {\n//     const updatedVideos = videos.filter((video) => video.id !== id);\n//     setVideos(updatedVideos);\n//   }\n//   function handleRating(id, type) {\n//     const updatedVideos = videos.map((video) => {\n//       if (video.id === id) {\n//         if (type === \"thumbs-up\") {\n//           return { ...video, rating: video.rating + 1 };\n//         } else if (type === \"thumbs-down\") {\n//           return { ...video, rating: video.rating - 1 };\n//         }\n//       }\n//       return video;\n//     });\n//     setVideos(updatedVideos);\n//   }\n//   // Sort videos based on rating in descending order\n//   const sortedVideos = [...videos].sort((a, b) => b.rating - a.rating);\n//   return (\n//     <div className=\"ShowingVideos\">\n//       {sortedVideos.map((video) => (\n//         <div className=\"videos\" key={video.id}>\n//           <p>{video.title}</p>\n//           <div className=\"buttons\">\n//             <i\n//               className=\"fa-solid fa-thumbs-up\"\n//               onClick={() => handleRating(video.id, \"thumbs-up\")}\n//             ></i>\n//             <h4>{video.rating}</h4>\n//             <i\n//               className=\"fa-solid fa-thumbs-down\"\n//               onClick={() => handleRating(video.id, \"thumbs-down\")}\n//             ></i>\n//           </div>\n//           <iframe\n//             className=\"allVideos\"\n//             width=\"300\"\n//             height=\"220\"\n//             src={convertToEmbedUrl(video.url)}\n//             title={video.title}\n//             frameBorder=\"0\"\n//             allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n//             allowFullScreen\n//           ></iframe>\n//           <button onClick={() => deleteVideo(video.id)}>Delete</button>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n// export default ShowingVideos;\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const initialVideos = [// Your initial video data here\n  ];\n  const [videos, setVideos] = useState(initialVideos);\n  const [newVideo, setNewVideo] = useState({\n    title: \"\",\n    url: \"\"\n  });\n\n  const handleInputChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setNewVideo({ ...newVideo,\n      [name]: value\n    });\n  };\n\n  const addVideo = () => {\n    if (newVideo.title && newVideo.url) {\n      setVideos([...videos, { ...newVideo,\n        rating: 0\n      }]);\n      setNewVideo({\n        title: \"\",\n        url: \"\"\n      });\n    }\n  };\n\n  const upvoteVideo = id => {\n    const updatedVideos = videos.map(video => video.id === id ? { ...video,\n      rating: video.rating + 1\n    } : video);\n    setVideos(updatedVideos);\n  };\n\n  const downvoteVideo = id => {\n    const updatedVideos = videos.map(video => video.id === id ? { ...video,\n      rating: video.rating - 1\n    } : video);\n    setVideos(updatedVideos);\n  };\n\n  const removeVideo = id => {\n    const updatedVideos = videos.filter(video => video.id !== id);\n    setVideos(updatedVideos);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Video Library\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add a Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"title\",\n        placeholder: \"Title\",\n        value: newVideo.title,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"url\",\n        placeholder: \"URL\",\n        value: newVideo.url,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addVideo,\n        children: \"Add Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Videos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: videos.map(video => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: video.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n            title: video.title,\n            width: \"560\",\n            height: \"315\",\n            src: `https://www.youtube.com/embed/${getYouTubeVideoId(video.url)}`,\n            frameBorder: \"0\",\n            allowFullScreen: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Rating: \", video.rating]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => upvoteVideo(video.id),\n            children: \"Up Vote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => downvoteVideo(video.id),\n            children: \"Down Vote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => removeVideo(video.id),\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this)]\n        }, video.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n} // Function to extract the video ID from a YouTube URL\n\n\n_s(App, \"t4YjNEPfq24JeV7NPfqRv1GWEnQ=\");\n\n_c = App;\n\nfunction getYouTubeVideoId(url) {\n  const videoIdMatch = url.match(/(?:\\/|v=)([A-Za-z0-9_-]{11})(?=&|$)/);\n\n  if (videoIdMatch) {\n    return videoIdMatch[1];\n  }\n\n  return \"\"; // Return an empty string if the URL doesn't match the expected format\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/coder/Documents/CYF/Back-End/Full-Stack-Project-Assessment/client/src/component/ShowingVideos.jsx"],"names":["React","useState","App","initialVideos","videos","setVideos","newVideo","setNewVideo","title","url","handleInputChange","event","name","value","target","addVideo","rating","upvoteVideo","id","updatedVideos","map","video","downvoteVideo","removeVideo","filter","getYouTubeVideoId","videoIdMatch","match"],"mappings":"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","sourcesContent":["// import React, { useState } from \"react\";\n\n// function ShowingVideos(props) {\n//   const [videos, setVideos] = useState(props.result);\n\n//   function convertToEmbedUrl(url) {\n//     const videoId = url.split(\"v=\")[1];\n//     return `https://www.youtube.com/embed/${videoId}`;\n//   }\n\n//   function deleteVideo(id) {\n//     const updatedVideos = videos.filter((video) => video.id !== id);\n//     setVideos(updatedVideos);\n//   }\n\n//   function handleRating(id, type) {\n//     const updatedVideos = videos.map((video) => {\n//       if (video.id === id) {\n//         if (type === \"thumbs-up\") {\n//           return { ...video, rating: video.rating + 1 };\n//         } else if (type === \"thumbs-down\") {\n//           return { ...video, rating: video.rating - 1 };\n//         }\n//       }\n//       return video;\n//     });\n\n//     setVideos(updatedVideos);\n//   }\n\n//   // Sort videos based on rating in descending order\n//   const sortedVideos = [...videos].sort((a, b) => b.rating - a.rating);\n\n//   return (\n//     <div className=\"ShowingVideos\">\n//       {sortedVideos.map((video) => (\n//         <div className=\"videos\" key={video.id}>\n//           <p>{video.title}</p>\n//           <div className=\"buttons\">\n//             <i\n//               className=\"fa-solid fa-thumbs-up\"\n//               onClick={() => handleRating(video.id, \"thumbs-up\")}\n//             ></i>\n//             <h4>{video.rating}</h4>\n//             <i\n//               className=\"fa-solid fa-thumbs-down\"\n//               onClick={() => handleRating(video.id, \"thumbs-down\")}\n//             ></i>\n//           </div>\n\n//           <iframe\n//             className=\"allVideos\"\n//             width=\"300\"\n//             height=\"220\"\n//             src={convertToEmbedUrl(video.url)}\n//             title={video.title}\n//             frameBorder=\"0\"\n//             allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n//             allowFullScreen\n//           ></iframe>\n//           <button onClick={() => deleteVideo(video.id)}>Delete</button>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default ShowingVideos;\nimport React, { useState } from \"react\";\n\nfunction App() {\n  const initialVideos = [\n    // Your initial video data here\n  ];\n\n  const [videos, setVideos] = useState(initialVideos);\n  const [newVideo, setNewVideo] = useState({ title: \"\", url: \"\" });\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setNewVideo({ ...newVideo, [name]: value });\n  };\n\n  const addVideo = () => {\n    if (newVideo.title && newVideo.url) {\n      setVideos([...videos, { ...newVideo, rating: 0 }]);\n      setNewVideo({ title: \"\", url: \"\" });\n    }\n  };\n\n  const upvoteVideo = (id) => {\n    const updatedVideos = videos.map((video) =>\n      video.id === id ? { ...video, rating: video.rating + 1 } : video\n    );\n    setVideos(updatedVideos);\n  };\n\n  const downvoteVideo = (id) => {\n    const updatedVideos = videos.map((video) =>\n      video.id === id ? { ...video, rating: video.rating - 1 } : video\n    );\n    setVideos(updatedVideos);\n  };\n\n  const removeVideo = (id) => {\n    const updatedVideos = videos.filter((video) => video.id !== id);\n    setVideos(updatedVideos);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Video Library</h1>\n      <div>\n        <h2>Add a Video</h2>\n        <input\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Title\"\n          value={newVideo.title}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"text\"\n          name=\"url\"\n          placeholder=\"URL\"\n          value={newVideo.url}\n          onChange={handleInputChange}\n        />\n        <button onClick={addVideo}>Add Video</button>\n      </div>\n      <div>\n        <h2>Videos</h2>\n        <ul>\n          {videos.map((video) => (\n            <li key={video.id}>\n              <h3>{video.title}</h3>\n              <iframe\n                title={video.title}\n                width=\"560\"\n                height=\"315\"\n                src={`https://www.youtube.com/embed/${getYouTubeVideoId(\n                  video.url\n                )}`}\n                frameBorder=\"0\"\n                allowFullScreen\n              ></iframe>\n              <p>Rating: {video.rating}</p>\n              <button onClick={() => upvoteVideo(video.id)}>Up Vote</button>\n              <button onClick={() => downvoteVideo(video.id)}>Down Vote</button>\n              <button onClick={() => removeVideo(video.id)}>Remove</button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\n// Function to extract the video ID from a YouTube URL\nfunction getYouTubeVideoId(url) {\n  const videoIdMatch = url.match(/(?:\\/|v=)([A-Za-z0-9_-]{11})(?=&|$)/);\n  if (videoIdMatch) {\n    return videoIdMatch[1];\n  }\n  return \"\"; // Return an empty string if the URL doesn't match the expected format\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}