{"ast":null,"code":"// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","map":{"version":3,"sources":["/home/baki/Desktop/codeyourfuture/Full-Stack-Project-Assessment/client/node_modules/uuid/dist/esm-browser/rng.js"],"names":["getRandomValues","rnds8","Uint8Array","rng","crypto","bind","Error"],"mappings":"AAAA;AACA;AACA;AACA,IAAIA,eAAJ;AACA,MAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAe,EAAf,CAAd;AACA,eAAe,SAASC,GAAT,GAAe;AAC5B;AACA,MAAI,CAACH,eAAL,EAAsB;AACpB;AACAA,IAAAA,eAAe,GAAG,OAAOI,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACJ,eAAxC,IAA2DI,MAAM,CAACJ,eAAP,CAAuBK,IAAvB,CAA4BD,MAA5B,CAA7E;;AAEA,QAAI,CAACJ,eAAL,EAAsB;AACpB,YAAM,IAAIM,KAAJ,CAAU,0GAAV,CAAN;AACD;AACF;;AAED,SAAON,eAAe,CAACC,KAAD,CAAtB;AACD","sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}"]},"metadata":{},"sourceType":"module"}