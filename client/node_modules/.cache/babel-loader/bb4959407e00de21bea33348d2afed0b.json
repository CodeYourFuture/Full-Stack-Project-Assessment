{"ast":null,"code":"var _jsxFileName = \"/home/mele/CodeYourFuture/Directory/htmlcssweek4/Full-Stack-Project-Assessment/client/src/AllVideoDisplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n/*function VideoComponent({ elements }) {\n  // Rest of your code remains unchanged\n  return (\n    <div>\n      <div id=\"ascendingButton\">\n        <button class=\"btn btn-light customBackground1\">Ascending</button>\n        <button class=\"btn btn-light customBackground1\">Descending</button>\n      </div>\n\n      <div class=\"container\">\n        <div class=\"videoDisplayContainer\">\n          {elements.map((element, index) => (\n            <VideoDisplay key={index} element={element} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction VideoDisplay({ element, onLike, onDislike, onDelete }) {\n  // Rest of your code remains unchanged\n  return (\n    <div key={element.id} class=\"displayGrid\">\n      <h5>{element.title}</h5>\n\n      <iframe\n        width=\"330\"\n        height=\"200\"\n        src={element.url}\n        title={element.title}\n        border=\"none\"\n        border-radius=\"103px\"\n        frameborder=\"0\"\n        allowfullscreen\n        align=\"center\"\n      ></iframe>\n      <div class=\"likedislikeBtn\">\n        <button\n          videoId={element.id}\n          class=\"btn btn-light customBackground5\"\n          onClick={() => onLike(element.id) /*() => setScore((s) => s + 1)}*/\n\n/*     >\n          Like\n        </button>\n        <span>Votes:&nbsp;{element.rating}</span>\n\n        <button\n          videoId={element.id}\n          class=\"btn btn-light customBackground5\"\n          onClick={() => onDislike(element.id) /*() => setScore((s) => s - 1)}*/\n\n/*     >\n          Dislike\n        </button>\n      </div>\n      <button\n        class=\"btn btn-light deleteBtn\"\n        onClick={() => onDelete(element.id)}\n      >\n        Delete\n      </button>\n    </div>\n  );\n}\n\nexport default function AllVideoDisplay() {\n  const [videoData, setVideoData] = useState([]);\n\n  useEffect(() => {\n    fetch(\"/videos\")\n      .then((response) => response.json())\n      .then((updatedData) => {\n        setVideoData(updatedData);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n      });\n  }, []);\n\n  const handleLike = (videoId) => {\n    fetch(`/videos/${videoId}/like`, { method: \"POST\" })\n    .then(response => response.json())\n    .then(updatedVideo => {\n      setVideoData(prevData => {\n        return prevData.map(video => {\n          if (video.id === updatedVideo.id) {\n            return { ...video, rating: updatedVideo.rating };\n          }\n          return video;\n        });\n      });\n    })\n    .catch(error => {\n      console.error(\"Error updating like:\", error);\n    });\n//************************************************8 */\n// // Update frontend state optimistically\n// const updatedVideos = videoData.map((video) => {\n//   if (video.id === videoId) {\n//     return { ...video, rating: video.rating + 1 };\n//   }\n//   return video;\n// });\n// setVideoData(updatedVideos);\n// // Send API request to update card's vote count\n// fetch(`/videos/${videoId}/like`, { method: \"POST\" });\n//*****************************************************8 */\n\n/* };\n\n  const handleDislike = (videoId) => {\n    fetch(`/videos/${videoId}/dislike`, { method: \"POST\" })\n    .then(response => response.json())\n    .then(updatedVideo => {\n      setVideoData(prevData => {\n        return prevData.map(video => {\n          if (video.id === updatedVideo.id) {\n            return { ...video, rating: updatedVideo.rating };\n          }\n          return video;\n        });\n      });\n    })\n    .catch(error => {\n      console.error(\"Error updating dislike:\", error);\n    });\n//*********************************************** */\n// // Update frontend state optimistically\n// const updatedVideos = videoData.map((video) => {\n//   if (video.id === videoId) {\n//     return { ...video, rating: Math.max(video.rating - 1, 0) };\n//   }\n//   return video;\n// });\n// setVideoData(updatedVideos);\n// // Send API request to update card's vote count\n// fetch(`/videos/${videoId}/dislike`, { method: \"POST\" });\n//*******************************************8 */\n\n/* };\n\n  const handleDelete = async (id) => {\n    try {\n      const response = await fetch(`/videos/${id}`, { method: \"DELETE\" });\n      if (response.ok) {\n        setVideoData(prevData => prevData.filter(element => element.id !== id));\n      } else {\n        console.error(\"Error deleting video.\");\n      }\n    } catch (error) {\n      console.error(\"Error deleting video:\", error);\n    }\n  \n    // try {\n    //   const response = await fetch(`/videos/${id}`, { method: \"DELETE\" });\n    //   if (response.ok) {\n    //     setVideoData(videoData.filter((element) => element.id !== id));\n    //   } else {\n    //     console.error(\"Error deleting video:\");\n    //   }\n    // } catch (error) {\n    //   console.error(\"Error deleting video:\", error);\n    // }\n  };\n\n  return (\n    <VideoComponent\n      elements={videoData.sort((a, b) => b.rating - a.rating)}\n      onLike={handleLike}\n      onDislike={handleDislike}\n      onDelete={handleDelete}\n    />\n  );\n}\n*/\n//console.log(dataVideo)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction VideoComponent(_ref) {\n  let {\n    elements,\n    onLike,\n    onDislike,\n    onDelete\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"ascendingButton\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"btn btn-light customBackground1\",\n        children: \"Ascending\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"btn btn-light customBackground1\",\n        children: \"Descending\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"videoDisplayContainer\",\n        children: /*#__PURE__*/_jsxDEV(VideoDisplay, {\n          elements: elements,\n          onLike: onLike,\n          onDislike: onDislike,\n          onDelete: onDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n}\n\n_c = VideoComponent;\n\nfunction VideoDisplay(_ref2) {\n  let {\n    elements,\n    onLike,\n    onDislike,\n    onDelete\n  } = _ref2;\n  //const [score, setScore] = useState(element.rating);\n  // const [videoData, setVideoData] = useState([]);\n  // useEffect(() => {\n  //   fetch(\"/videos\")\n  //     .then((response) => response.json())\n  //     .then((updatedData) => {\n  //       setVideoData(updatedData);\n  //     })\n  //     .catch((error) => {\n  //       console.error(\"Error fetching data:\", error);\n  //     });\n  // }, []);\n  // ///***************likedislike****************** */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"videoDisplayContainer\",\n    children: [\" \", elements.map(element => /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"displayGrid\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: element.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n        width: \"330\",\n        height: \"200\",\n        src: element.url,\n        title: element.title,\n        border: \"none\",\n        \"border-radius\": \"103px\",\n        frameborder: \"0\",\n        allowfullscreen: true,\n        align: \"center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"likedislikeBtn\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn btn-light customBackground5\",\n          onClick: () => onLike(element.id),\n          children: \"Like\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Votes:\\xA0\", element.rating]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn btn-light customBackground5\",\n          onClick: () => onDislike(element.id),\n          children: \"Dislike\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"btn btn-light deleteBtn\",\n        onClick: () => onDelete(element.id),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }, this)]\n    }, element.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = VideoDisplay;\nexport default function AllVideoDisplay() {\n  _s();\n\n  const [videoData, setVideoData] = useState([]);\n  useEffect(() => {\n    fetch(\"/videos\").then(response => response.json()).then(updatedData => {\n      setVideoData(updatedData);\n    }).catch(error => {\n      console.error(\"Error fetching data:\", error);\n    });\n  }, []);\n\n  const handleLike = videoId => {\n    // Update frontend state optimistically\n    const updatedVideos = videoData.map(video => {\n      if (video.id === videoId) {\n        return { ...video,\n          rating: video.rating + 1\n        };\n      }\n\n      return video;\n    });\n    setVideoData(updatedVideos);\n    console.log(updatedVideos); // Send API request to update card's vote count\n\n    fetch(`/videos/${videoId}/like`, {\n      method: \"POST\"\n    });\n  };\n\n  const handleDislike = videoId => {\n    // Update frontend state optimistically\n    const updatedVideos = videoData.map(video => {\n      if (video.id === videoId) {\n        return { ...video,\n          rating: Math.max(video.rating - 1, 0)\n        };\n      }\n\n      return video;\n    });\n    setVideoData(updatedVideos); // Send API request to update card's vote count\n\n    fetch(`/videos/${videoId}/dislike`, {\n      method: \"POST\"\n    });\n  }; // const handleLike = (videoId) => {\n  //   // Update frontend state optimistically\n  //   fetch(`/videos/${videoId}/dislike`, { method: \"POST\" })\n  //     .then((response) => response.json())\n  //     .then((updatedVideo) => {\n  //       setVideoData((prevData) => {\n  //         return prevData.map((video) => {\n  //           if (video.id === updatedVideo.id) {\n  //             return { ...video, rating: updatedVideo.rating };\n  //           }\n  //           return video;\n  //         });\n  //       });\n  //     })\n  //     .catch((error) => {\n  //       console.error(\"Error updating dislike:\", error);\n  //     });\n  //   fetch(`/videos/${videoId}/dislike`, { method: \"POST\" });\n  // };\n  // // const updatedVideos = videoData.map((video) => {\n  //   if (video.id === videoId) {\n  //     return { ...video, rating: video.rating + 1 };\n  //   }\n  //   return video;\n  // });}\n  // Send API request to update card's vote count\n  //fetch(`/videos/${videoId}/like`, { method: \"POST\" });\n  // const handleDislike = (videoId) => {\n  //   fetch(`/videos/${videoId}/dislike`, { method: \"POST\" })\n  //     .then((response) => response.json())\n  //     .then((updatedVideo) => {\n  //       setVideoData((prevData) => {\n  //         return prevData.map((video) => {\n  //           if (video.id === updatedVideo.id) {\n  //             return { ...video, rating: updatedVideo.rating };\n  //           }\n  //           return video;\n  //         });\n  //       });\n  //     })\n  //     .catch((error) => {\n  //       console.error(\"Error updating dislike:\", error);\n  //     });\n  //   fetch(`/videos/${videoId}/like`, { method: \"POST\" });\n  // };\n  // const handleDislike = (videoId) => {\n  //   // Update frontend state optimistically\n  //   const updatedVideos = videoData.map((video) => {\n  //     if (video.id === videoId) {\n  //       return { ...video, rating: Math.max(video.rating - 1, 0) };\n  //     }\n  //     return video;\n  //   });\n  //   setVideoData(updatedVideos);\n  //   // Send API request to update card's vote count\n  //   fetch(`/videos/${videoId}/dislike`, { method: \"POST\" });\n  // };\n  ///********************************* */\n\n\n  const handleDelete = async id => {\n    try {\n      const response = await fetch(`/videos/${id}`, {\n        method: \"DELETE\"\n      });\n\n      if (response.ok) {\n        setVideoData(videoData => videoData.filter(element => element.id !== id));\n      } else {\n        console.error(\"Error deleting video:\");\n      }\n    } catch (error) {\n      console.error(\"Error deleting video:\", error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(VideoComponent, {\n    elements: videoData.sort((a, b) => b.rating - a.rating),\n    onLike: handleLike,\n    onDislike: handleDislike,\n    onDelete: handleDelete\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 381,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AllVideoDisplay, \"pd8ECZmcLpX3g0awOoF1Hu1zAjg=\");\n\n_c3 = AllVideoDisplay;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"VideoComponent\");\n$RefreshReg$(_c2, \"VideoDisplay\");\n$RefreshReg$(_c3, \"AllVideoDisplay\");","map":{"version":3,"sources":["/home/mele/CodeYourFuture/Directory/htmlcssweek4/Full-Stack-Project-Assessment/client/src/AllVideoDisplay.js"],"names":["React","useEffect","useState","VideoComponent","elements","onLike","onDislike","onDelete","VideoDisplay","map","element","title","url","id","rating","AllVideoDisplay","videoData","setVideoData","fetch","then","response","json","updatedData","catch","error","console","handleLike","videoId","updatedVideos","video","log","method","handleDislike","Math","max","handleDelete","ok","filter","sort","a","b"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,SAASC,cAAT,OAAmE;AAAA,MAA3C;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA,SAApB;AAA+BC,IAAAA;AAA/B,GAA2C;AACjE,sBACE;AAAA,4BACE;AAAK,MAAA,EAAE,EAAC,iBAAR;AAAA,8BACE;AAAQ,QAAA,KAAK,EAAC,iCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,KAAK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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n/*function VideoComponent({ elements }) {\n  // Rest of your code remains unchanged\n  return (\n    <div>\n      <div id=\"ascendingButton\">\n        <button class=\"btn btn-light customBackground1\">Ascending</button>\n        <button class=\"btn btn-light customBackground1\">Descending</button>\n      </div>\n\n      <div class=\"container\">\n        <div class=\"videoDisplayContainer\">\n          {elements.map((element, index) => (\n            <VideoDisplay key={index} element={element} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction VideoDisplay({ element, onLike, onDislike, onDelete }) {\n  // Rest of your code remains unchanged\n  return (\n    <div key={element.id} class=\"displayGrid\">\n      <h5>{element.title}</h5>\n\n      <iframe\n        width=\"330\"\n        height=\"200\"\n        src={element.url}\n        title={element.title}\n        border=\"none\"\n        border-radius=\"103px\"\n        frameborder=\"0\"\n        allowfullscreen\n        align=\"center\"\n      ></iframe>\n      <div class=\"likedislikeBtn\">\n        <button\n          videoId={element.id}\n          class=\"btn btn-light customBackground5\"\n          onClick={() => onLike(element.id) /*() => setScore((s) => s + 1)}*/\n/*     >\n          Like\n        </button>\n        <span>Votes:&nbsp;{element.rating}</span>\n\n        <button\n          videoId={element.id}\n          class=\"btn btn-light customBackground5\"\n          onClick={() => onDislike(element.id) /*() => setScore((s) => s - 1)}*/\n/*     >\n          Dislike\n        </button>\n      </div>\n      <button\n        class=\"btn btn-light deleteBtn\"\n        onClick={() => onDelete(element.id)}\n      >\n        Delete\n      </button>\n    </div>\n  );\n}\n\nexport default function AllVideoDisplay() {\n  const [videoData, setVideoData] = useState([]);\n\n  useEffect(() => {\n    fetch(\"/videos\")\n      .then((response) => response.json())\n      .then((updatedData) => {\n        setVideoData(updatedData);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n      });\n  }, []);\n\n  const handleLike = (videoId) => {\n    fetch(`/videos/${videoId}/like`, { method: \"POST\" })\n    .then(response => response.json())\n    .then(updatedVideo => {\n      setVideoData(prevData => {\n        return prevData.map(video => {\n          if (video.id === updatedVideo.id) {\n            return { ...video, rating: updatedVideo.rating };\n          }\n          return video;\n        });\n      });\n    })\n    .catch(error => {\n      console.error(\"Error updating like:\", error);\n    });\n//************************************************8 */\n// // Update frontend state optimistically\n// const updatedVideos = videoData.map((video) => {\n//   if (video.id === videoId) {\n//     return { ...video, rating: video.rating + 1 };\n//   }\n//   return video;\n// });\n// setVideoData(updatedVideos);\n// // Send API request to update card's vote count\n// fetch(`/videos/${videoId}/like`, { method: \"POST\" });\n//*****************************************************8 */\n/* };\n\n  const handleDislike = (videoId) => {\n    fetch(`/videos/${videoId}/dislike`, { method: \"POST\" })\n    .then(response => response.json())\n    .then(updatedVideo => {\n      setVideoData(prevData => {\n        return prevData.map(video => {\n          if (video.id === updatedVideo.id) {\n            return { ...video, rating: updatedVideo.rating };\n          }\n          return video;\n        });\n      });\n    })\n    .catch(error => {\n      console.error(\"Error updating dislike:\", error);\n    });\n//*********************************************** */\n// // Update frontend state optimistically\n// const updatedVideos = videoData.map((video) => {\n//   if (video.id === videoId) {\n//     return { ...video, rating: Math.max(video.rating - 1, 0) };\n//   }\n//   return video;\n// });\n// setVideoData(updatedVideos);\n\n// // Send API request to update card's vote count\n// fetch(`/videos/${videoId}/dislike`, { method: \"POST\" });\n//*******************************************8 */\n/* };\n\n  const handleDelete = async (id) => {\n    try {\n      const response = await fetch(`/videos/${id}`, { method: \"DELETE\" });\n      if (response.ok) {\n        setVideoData(prevData => prevData.filter(element => element.id !== id));\n      } else {\n        console.error(\"Error deleting video.\");\n      }\n    } catch (error) {\n      console.error(\"Error deleting video:\", error);\n    }\n  \n    // try {\n    //   const response = await fetch(`/videos/${id}`, { method: \"DELETE\" });\n    //   if (response.ok) {\n    //     setVideoData(videoData.filter((element) => element.id !== id));\n    //   } else {\n    //     console.error(\"Error deleting video:\");\n    //   }\n    // } catch (error) {\n    //   console.error(\"Error deleting video:\", error);\n    // }\n  };\n\n  return (\n    <VideoComponent\n      elements={videoData.sort((a, b) => b.rating - a.rating)}\n      onLike={handleLike}\n      onDislike={handleDislike}\n      onDelete={handleDelete}\n    />\n  );\n}\n*/\n//console.log(dataVideo)\nfunction VideoComponent({ elements, onLike, onDislike, onDelete }) {\n  return (\n    <div>\n      <div id=\"ascendingButton\">\n        <button class=\"btn btn-light customBackground1\">Ascending</button>\n        <button class=\"btn btn-light customBackground1\">Descending</button>\n      </div>\n\n      <div class=\"container\">\n        <div class=\"videoDisplayContainer\">\n          <VideoDisplay\n            elements={elements}\n            onLike={onLike}\n            onDislike={onDislike}\n            onDelete={onDelete}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction VideoDisplay({ elements, onLike, onDislike, onDelete }) {\n  //const [score, setScore] = useState(element.rating);\n  // const [videoData, setVideoData] = useState([]);\n\n  // useEffect(() => {\n  //   fetch(\"/videos\")\n  //     .then((response) => response.json())\n  //     .then((updatedData) => {\n  //       setVideoData(updatedData);\n  //     })\n  //     .catch((error) => {\n  //       console.error(\"Error fetching data:\", error);\n  //     });\n  // }, []);\n  // ///***************likedislike****************** */\n\n  return (\n    <div class=\"videoDisplayContainer\">\n      {\" \"}\n      {elements.map((element) => (\n        <div key={element.id} class=\"displayGrid\">\n          <h5>{element.title}</h5>\n\n          <iframe\n            width=\"330\"\n            height=\"200\"\n            src={element.url}\n            title={element.title}\n            border=\"none\"\n            border-radius=\"103px\"\n            frameborder=\"0\"\n            allowfullscreen\n            align=\"center\"\n          ></iframe>\n          <div class=\"likedislikeBtn\">\n            <button\n              class=\"btn btn-light customBackground5\"\n              onClick={() => onLike(element.id)}\n            >\n              Like\n            </button>\n            <span>Votes:&nbsp;{element.rating}</span>\n\n            <button\n              class=\"btn btn-light customBackground5\"\n              onClick={() => onDislike(element.id)}\n            >\n              Dislike\n            </button>\n          </div>\n          <button\n            class=\"btn btn-light deleteBtn\"\n            onClick={() => onDelete(element.id)}\n          >\n            Delete\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default function AllVideoDisplay() {\n  const [videoData, setVideoData] = useState([]);\n\n  useEffect(() => {\n    fetch(\"/videos\")\n      .then((response) => response.json())\n      .then((updatedData) => {\n        setVideoData(updatedData);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n      });\n  }, []);\n  const handleLike = (videoId) => {\n    // Update frontend state optimistically\n    const updatedVideos = videoData.map((video) => {\n      if (video.id === videoId) {\n        return { ...video, rating: video.rating + 1 };\n      }\n      return video;\n    });\n    setVideoData(updatedVideos);\n    console.log(updatedVideos);\n    // Send API request to update card's vote count\n    fetch(`/videos/${videoId}/like`, { method: \"POST\" });\n  };\n\n  const handleDislike = (videoId) => {\n    // Update frontend state optimistically\n    const updatedVideos = videoData.map((video) => {\n      if (video.id === videoId) {\n        return { ...video, rating: Math.max(video.rating - 1, 0) };\n      }\n      return video;\n    });\n    setVideoData(updatedVideos);\n\n    // Send API request to update card's vote count\n    fetch(`/videos/${videoId}/dislike`, { method: \"POST\" });\n  };\n\n  // const handleLike = (videoId) => {\n  //   // Update frontend state optimistically\n  //   fetch(`/videos/${videoId}/dislike`, { method: \"POST\" })\n  //     .then((response) => response.json())\n  //     .then((updatedVideo) => {\n  //       setVideoData((prevData) => {\n  //         return prevData.map((video) => {\n  //           if (video.id === updatedVideo.id) {\n  //             return { ...video, rating: updatedVideo.rating };\n  //           }\n  //           return video;\n  //         });\n  //       });\n  //     })\n  //     .catch((error) => {\n  //       console.error(\"Error updating dislike:\", error);\n  //     });\n  //   fetch(`/videos/${videoId}/dislike`, { method: \"POST\" });\n  // };\n  // // const updatedVideos = videoData.map((video) => {\n  //   if (video.id === videoId) {\n  //     return { ...video, rating: video.rating + 1 };\n  //   }\n  //   return video;\n  // });}\n  // Send API request to update card's vote count\n  //fetch(`/videos/${videoId}/like`, { method: \"POST\" });\n\n  // const handleDislike = (videoId) => {\n  //   fetch(`/videos/${videoId}/dislike`, { method: \"POST\" })\n  //     .then((response) => response.json())\n  //     .then((updatedVideo) => {\n  //       setVideoData((prevData) => {\n  //         return prevData.map((video) => {\n  //           if (video.id === updatedVideo.id) {\n  //             return { ...video, rating: updatedVideo.rating };\n  //           }\n  //           return video;\n  //         });\n  //       });\n  //     })\n  //     .catch((error) => {\n  //       console.error(\"Error updating dislike:\", error);\n  //     });\n  //   fetch(`/videos/${videoId}/like`, { method: \"POST\" });\n  // };\n\n  // const handleDislike = (videoId) => {\n  //   // Update frontend state optimistically\n  //   const updatedVideos = videoData.map((video) => {\n  //     if (video.id === videoId) {\n  //       return { ...video, rating: Math.max(video.rating - 1, 0) };\n  //     }\n  //     return video;\n  //   });\n  //   setVideoData(updatedVideos);\n\n  //   // Send API request to update card's vote count\n  //   fetch(`/videos/${videoId}/dislike`, { method: \"POST\" });\n  // };\n\n  ///********************************* */\n  const handleDelete = async (id) => {\n    try {\n      const response = await fetch(`/videos/${id}`, { method: \"DELETE\" });\n      if (response.ok) {\n        setVideoData((videoData) =>\n          videoData.filter((element) => element.id !== id)\n        );\n      } else {\n        console.error(\"Error deleting video:\");\n      }\n    } catch (error) {\n      console.error(\"Error deleting video:\", error);\n    }\n  };\n\n  return (\n    <VideoComponent\n      elements={videoData.sort((a, b) => b.rating - a.rating)}\n      onLike={handleLike}\n      onDislike={handleDislike}\n      onDelete={handleDelete}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}