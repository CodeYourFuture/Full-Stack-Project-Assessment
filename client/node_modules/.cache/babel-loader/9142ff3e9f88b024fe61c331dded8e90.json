{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { useControllableReducer } from '../utils/useControllableReducer';\nimport { DropdownActionTypes } from './useDropdown.types';\nimport { dropdownReducer } from './dropdownReducer';\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useDropdown API](https://mui.com/base-ui/react-menu/hooks-api/#use-dropdown)\n */\n\nexport function useDropdown() {\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    defaultOpen,\n    onOpenChange,\n    open: openProp\n  } = parameters;\n  const [popupId, setPopupId] = React.useState('');\n  const [triggerElement, setTriggerElement] = React.useState(null);\n  const lastActionType = React.useRef(null);\n  const handleStateChange = React.useCallback((event, field, value, reason) => {\n    if (field === 'open') {\n      onOpenChange == null ? void 0 : onOpenChange(event, value);\n    }\n\n    lastActionType.current = reason;\n  }, [onOpenChange]);\n  const controlledProps = React.useMemo(() => openProp !== undefined ? {\n    open: openProp\n  } : {}, [openProp]);\n  const [state, dispatch] = useControllableReducer({\n    controlledProps,\n    initialState: defaultOpen ? {\n      open: true\n    } : {\n      open: false\n    },\n    onStateChange: handleStateChange,\n    reducer: dropdownReducer\n  });\n  React.useEffect(() => {\n    if (!state.open && lastActionType.current !== null && lastActionType.current !== DropdownActionTypes.blur) {\n      triggerElement == null ? void 0 : triggerElement.focus();\n    }\n  }, [state.open, triggerElement]);\n  const contextValue = {\n    state,\n    dispatch,\n    popupId,\n    registerPopup: setPopupId,\n    registerTrigger: setTriggerElement,\n    triggerElement\n  };\n  return {\n    contextValue,\n    open: state.open\n  };\n}","map":{"version":3,"sources":["/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@mui/base/useDropdown/useDropdown.js"],"names":["React","useControllableReducer","DropdownActionTypes","dropdownReducer","useDropdown","parameters","defaultOpen","onOpenChange","open","openProp","popupId","setPopupId","useState","triggerElement","setTriggerElement","lastActionType","useRef","handleStateChange","useCallback","event","field","value","reason","current","controlledProps","useMemo","undefined","state","dispatch","initialState","onStateChange","reducer","useEffect","blur","focus","contextValue","registerPopup","registerTrigger"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,sBAAT,QAAuC,iCAAvC;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,GAAsC;AAAA,MAAjBC,UAAiB,uEAAJ,EAAI;AAC3C,QAAM;AACJC,IAAAA,WADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,IAAI,EAAEC;AAHF,MAIFJ,UAJJ;AAKA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBX,KAAK,CAACY,QAAN,CAAe,EAAf,CAA9B;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCd,KAAK,CAACY,QAAN,CAAe,IAAf,CAA5C;AACA,QAAMG,cAAc,GAAGf,KAAK,CAACgB,MAAN,CAAa,IAAb,CAAvB;AACA,QAAMC,iBAAiB,GAAGjB,KAAK,CAACkB,WAAN,CAAkB,CAACC,KAAD,EAAQC,KAAR,EAAeC,KAAf,EAAsBC,MAAtB,KAAiC;AAC3E,QAAIF,KAAK,KAAK,MAAd,EAAsB;AACpBb,MAAAA,YAAY,IAAI,IAAhB,GAAuB,KAAK,CAA5B,GAAgCA,YAAY,CAACY,KAAD,EAAQE,KAAR,CAA5C;AACD;;AACDN,IAAAA,cAAc,CAACQ,OAAf,GAAyBD,MAAzB;AACD,GALyB,EAKvB,CAACf,YAAD,CALuB,CAA1B;AAMA,QAAMiB,eAAe,GAAGxB,KAAK,CAACyB,OAAN,CAAc,MAAMhB,QAAQ,KAAKiB,SAAb,GAAyB;AACnElB,IAAAA,IAAI,EAAEC;AAD6D,GAAzB,GAExC,EAFoB,EAEhB,CAACA,QAAD,CAFgB,CAAxB;AAGA,QAAM,CAACkB,KAAD,EAAQC,QAAR,IAAoB3B,sBAAsB,CAAC;AAC/CuB,IAAAA,eAD+C;AAE/CK,IAAAA,YAAY,EAAEvB,WAAW,GAAG;AAC1BE,MAAAA,IAAI,EAAE;AADoB,KAAH,GAErB;AACFA,MAAAA,IAAI,EAAE;AADJ,KAJ2C;AAO/CsB,IAAAA,aAAa,EAAEb,iBAPgC;AAQ/Cc,IAAAA,OAAO,EAAE5B;AARsC,GAAD,CAAhD;AAUAH,EAAAA,KAAK,CAACgC,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACL,KAAK,CAACnB,IAAP,IAAeO,cAAc,CAACQ,OAAf,KAA2B,IAA1C,IAAkDR,cAAc,CAACQ,OAAf,KAA2BrB,mBAAmB,CAAC+B,IAArG,EAA2G;AACzGpB,MAAAA,cAAc,IAAI,IAAlB,GAAyB,KAAK,CAA9B,GAAkCA,cAAc,CAACqB,KAAf,EAAlC;AACD;AACF,GAJD,EAIG,CAACP,KAAK,CAACnB,IAAP,EAAaK,cAAb,CAJH;AAKA,QAAMsB,YAAY,GAAG;AACnBR,IAAAA,KADmB;AAEnBC,IAAAA,QAFmB;AAGnBlB,IAAAA,OAHmB;AAInB0B,IAAAA,aAAa,EAAEzB,UAJI;AAKnB0B,IAAAA,eAAe,EAAEvB,iBALE;AAMnBD,IAAAA;AANmB,GAArB;AAQA,SAAO;AACLsB,IAAAA,YADK;AAEL3B,IAAAA,IAAI,EAAEmB,KAAK,CAACnB;AAFP,GAAP;AAID","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { useControllableReducer } from '../utils/useControllableReducer';\nimport { DropdownActionTypes } from './useDropdown.types';\nimport { dropdownReducer } from './dropdownReducer';\n\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useDropdown API](https://mui.com/base-ui/react-menu/hooks-api/#use-dropdown)\n */\nexport function useDropdown(parameters = {}) {\n  const {\n    defaultOpen,\n    onOpenChange,\n    open: openProp\n  } = parameters;\n  const [popupId, setPopupId] = React.useState('');\n  const [triggerElement, setTriggerElement] = React.useState(null);\n  const lastActionType = React.useRef(null);\n  const handleStateChange = React.useCallback((event, field, value, reason) => {\n    if (field === 'open') {\n      onOpenChange == null ? void 0 : onOpenChange(event, value);\n    }\n    lastActionType.current = reason;\n  }, [onOpenChange]);\n  const controlledProps = React.useMemo(() => openProp !== undefined ? {\n    open: openProp\n  } : {}, [openProp]);\n  const [state, dispatch] = useControllableReducer({\n    controlledProps,\n    initialState: defaultOpen ? {\n      open: true\n    } : {\n      open: false\n    },\n    onStateChange: handleStateChange,\n    reducer: dropdownReducer\n  });\n  React.useEffect(() => {\n    if (!state.open && lastActionType.current !== null && lastActionType.current !== DropdownActionTypes.blur) {\n      triggerElement == null ? void 0 : triggerElement.focus();\n    }\n  }, [state.open, triggerElement]);\n  const contextValue = {\n    state,\n    dispatch,\n    popupId,\n    registerPopup: setPopupId,\n    registerTrigger: setTriggerElement,\n    triggerElement\n  };\n  return {\n    contextValue,\n    open: state.open\n  };\n}"]},"metadata":{},"sourceType":"module"}