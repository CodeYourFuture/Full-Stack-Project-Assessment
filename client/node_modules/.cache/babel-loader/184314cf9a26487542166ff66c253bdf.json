{"ast":null,"code":"'use client';\n\nimport PropTypes from 'prop-types';\nimport { createContainer } from '@mui/system';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nconst Container = createContainer({\n  createStyledComponent: styled('div', {\n    name: 'MuiContainer',\n    slot: 'Root',\n    overridesResolver: (props, styles) => {\n      const {\n        ownerState\n      } = props;\n      return [styles.root, styles[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];\n    }\n  }),\n  useThemeProps: inProps => useThemeProps({\n    props: inProps,\n    name: 'MuiContainer'\n  })\n});\nprocess.env.NODE_ENV !== \"production\" ? Container.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   * @default false\n   */\n  fixed: PropTypes.bool,\n\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   * @default 'lg'\n   */\n  maxWidth: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Container;","map":{"version":3,"sources":["/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@mui/material/Container/Container.js"],"names":["PropTypes","createContainer","capitalize","styled","useThemeProps","Container","createStyledComponent","name","slot","overridesResolver","props","styles","ownerState","root","String","maxWidth","fixed","disableGutters","inProps","process","env","NODE_ENV","propTypes","children","node","classes","object","component","elementType","bool","oneOfType","oneOf","string","sx","arrayOf","func"],"mappings":"AAAA;;AAEA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,eAAT,QAAgC,aAAhC;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,MAAMC,SAAS,GAAGJ,eAAe,CAAC;AAChCK,EAAAA,qBAAqB,EAAEH,MAAM,CAAC,KAAD,EAAQ;AACnCI,IAAAA,IAAI,EAAE,cAD6B;AAEnCC,IAAAA,IAAI,EAAE,MAF6B;AAGnCC,IAAAA,iBAAiB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpC,YAAM;AACJC,QAAAA;AADI,UAEFF,KAFJ;AAGA,aAAO,CAACC,MAAM,CAACE,IAAR,EAAcF,MAAM,CAAE,WAAUT,UAAU,CAACY,MAAM,CAACF,UAAU,CAACG,QAAZ,CAAP,CAA8B,EAApD,CAApB,EAA4EH,UAAU,CAACI,KAAX,IAAoBL,MAAM,CAACK,KAAvG,EAA8GJ,UAAU,CAACK,cAAX,IAA6BN,MAAM,CAACM,cAAlJ,CAAP;AACD;AARkC,GAAR,CADG;AAWhCb,EAAAA,aAAa,EAAEc,OAAO,IAAId,aAAa,CAAC;AACtCM,IAAAA,KAAK,EAAEQ,OAD+B;AAEtCX,IAAAA,IAAI,EAAE;AAFgC,GAAD;AAXP,CAAD,CAAjC;AAgBAY,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwChB,SAAS,CAACiB;AAAU;AAApB,EAA6C;AACnF;AACA;AACA;AACA;;AACA;AACF;AACA;AACEC,EAAAA,QAAQ,EAAEvB,SAAS,CAACwB,IAR+D;;AASnF;AACF;AACA;AACEC,EAAAA,OAAO,EAAEzB,SAAS,CAAC0B,MAZgE;;AAanF;AACF;AACA;AACA;AACEC,EAAAA,SAAS,EAAE3B,SAAS,CAAC4B,WAjB8D;;AAkBnF;AACF;AACA;AACA;AACEX,EAAAA,cAAc,EAAEjB,SAAS,CAAC6B,IAtByD;;AAuBnF;AACF;AACA;AACA;AACA;AACA;AACA;AACEb,EAAAA,KAAK,EAAEhB,SAAS,CAAC6B,IA9BkE;;AA+BnF;AACF;AACA;AACA;AACA;AACA;AACEd,EAAAA,QAAQ,EAAEf;AAAU;AAAD,GAAuC8B,SAAhD,CAA0D,CAAC9B,SAAS,CAAC+B,KAAV,CAAgB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,KAA/B,CAAhB,CAAD,EAAyD/B,SAAS,CAACgC,MAAnE,CAA1D,CArCyE;;AAsCnF;AACF;AACA;AACEC,EAAAA,EAAE,EAAEjC,SAAS,CAAC8B,SAAV,CAAoB,CAAC9B,SAAS,CAACkC,OAAV,CAAkBlC,SAAS,CAAC8B,SAAV,CAAoB,CAAC9B,SAAS,CAACmC,IAAX,EAAiBnC,SAAS,CAAC0B,MAA3B,EAAmC1B,SAAS,CAAC6B,IAA7C,CAApB,CAAlB,CAAD,EAA6F7B,SAAS,CAACmC,IAAvG,EAA6GnC,SAAS,CAAC0B,MAAvH,CAApB;AAzC+E,CAArF,GA0CI,KAAK,CA1CT;AA2CA,eAAerB,SAAf","sourcesContent":["'use client';\n\nimport PropTypes from 'prop-types';\nimport { createContainer } from '@mui/system';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nconst Container = createContainer({\n  createStyledComponent: styled('div', {\n    name: 'MuiContainer',\n    slot: 'Root',\n    overridesResolver: (props, styles) => {\n      const {\n        ownerState\n      } = props;\n      return [styles.root, styles[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];\n    }\n  }),\n  useThemeProps: inProps => useThemeProps({\n    props: inProps,\n    name: 'MuiContainer'\n  })\n});\nprocess.env.NODE_ENV !== \"production\" ? Container.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   * @default false\n   */\n  fixed: PropTypes.bool,\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   * @default 'lg'\n   */\n  maxWidth: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Container;"]},"metadata":{},"sourceType":"module"}