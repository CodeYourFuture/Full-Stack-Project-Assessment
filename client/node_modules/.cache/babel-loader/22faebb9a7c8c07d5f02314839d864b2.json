{"ast":null,"code":"import { useState } from 'react';\nimport useEffect from './useIsomorphicEffect';\nconst targetMap = new WeakMap();\nlet resizeObserver;\n\nfunction getResizeObserver() {\n  // eslint-disable-next-line no-return-assign\n  return resizeObserver = resizeObserver || new window.ResizeObserver(entries => {\n    entries.forEach(entry => {\n      const handler = targetMap.get(entry.target);\n      if (handler) handler(entry.contentRect);\n    });\n  });\n}\n/**\n * Efficiently observe size changes on an element. Depends on the `ResizeObserver` api,\n * and polyfills are needed in older browsers.\n *\n * ```ts\n * const [ref, attachRef] = useCallbackRef(null);\n *\n * const rect = useResizeObserver(ref);\n *\n * return (\n *  <div ref={attachRef}>\n *    {JSON.stringify(rect)}\n *  </div>\n * )\n * ```\n *\n * @param element The DOM element to observe\n */\n\n\nexport default function useResizeObserver(element) {\n  const [rect, setRect] = useState(null);\n  useEffect(() => {\n    if (!element) return;\n    getResizeObserver().observe(element);\n    setRect(element.getBoundingClientRect());\n    targetMap.set(element, rect => {\n      setRect(rect);\n    });\n    return () => {\n      targetMap.delete(element);\n    };\n  }, [element]);\n  return rect;\n}","map":{"version":3,"sources":["/home/coder/CYF/react-learn/Full-Stack-Project-Assessment/client/node_modules/@restart/hooks/esm/useResizeObserver.js"],"names":["useState","useEffect","targetMap","WeakMap","resizeObserver","getResizeObserver","window","ResizeObserver","entries","forEach","entry","handler","get","target","contentRect","useResizeObserver","element","rect","setRect","observe","getBoundingClientRect","set","delete"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,MAAMC,SAAS,GAAG,IAAIC,OAAJ,EAAlB;AACA,IAAIC,cAAJ;;AACA,SAASC,iBAAT,GAA6B;AAC3B;AACA,SAAOD,cAAc,GAAGA,cAAc,IAAI,IAAIE,MAAM,CAACC,cAAX,CAA0BC,OAAO,IAAI;AAC7EA,IAAAA,OAAO,CAACC,OAAR,CAAgBC,KAAK,IAAI;AACvB,YAAMC,OAAO,GAAGT,SAAS,CAACU,GAAV,CAAcF,KAAK,CAACG,MAApB,CAAhB;AACA,UAAIF,OAAJ,EAAaA,OAAO,CAACD,KAAK,CAACI,WAAP,CAAP;AACd,KAHD;AAID,GALyC,CAA1C;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASC,iBAAT,CAA2BC,OAA3B,EAAoC;AACjD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,CAAC,IAAD,CAAhC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACe,OAAL,EAAc;AACdX,IAAAA,iBAAiB,GAAGc,OAApB,CAA4BH,OAA5B;AACAE,IAAAA,OAAO,CAACF,OAAO,CAACI,qBAAR,EAAD,CAAP;AACAlB,IAAAA,SAAS,CAACmB,GAAV,CAAcL,OAAd,EAAuBC,IAAI,IAAI;AAC7BC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KAFD;AAGA,WAAO,MAAM;AACXf,MAAAA,SAAS,CAACoB,MAAV,CAAiBN,OAAjB;AACD,KAFD;AAGD,GAVQ,EAUN,CAACA,OAAD,CAVM,CAAT;AAWA,SAAOC,IAAP;AACD","sourcesContent":["import { useState } from 'react';\nimport useEffect from './useIsomorphicEffect';\nconst targetMap = new WeakMap();\nlet resizeObserver;\nfunction getResizeObserver() {\n  // eslint-disable-next-line no-return-assign\n  return resizeObserver = resizeObserver || new window.ResizeObserver(entries => {\n    entries.forEach(entry => {\n      const handler = targetMap.get(entry.target);\n      if (handler) handler(entry.contentRect);\n    });\n  });\n}\n\n/**\n * Efficiently observe size changes on an element. Depends on the `ResizeObserver` api,\n * and polyfills are needed in older browsers.\n *\n * ```ts\n * const [ref, attachRef] = useCallbackRef(null);\n *\n * const rect = useResizeObserver(ref);\n *\n * return (\n *  <div ref={attachRef}>\n *    {JSON.stringify(rect)}\n *  </div>\n * )\n * ```\n *\n * @param element The DOM element to observe\n */\nexport default function useResizeObserver(element) {\n  const [rect, setRect] = useState(null);\n  useEffect(() => {\n    if (!element) return;\n    getResizeObserver().observe(element);\n    setRect(element.getBoundingClientRect());\n    targetMap.set(element, rect => {\n      setRect(rect);\n    });\n    return () => {\n      targetMap.delete(element);\n    };\n  }, [element]);\n  return rect;\n}"]},"metadata":{},"sourceType":"module"}