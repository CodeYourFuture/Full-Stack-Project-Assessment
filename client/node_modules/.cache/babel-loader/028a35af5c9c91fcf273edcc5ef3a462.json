{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"defaultValue\", \"children\", \"disabled\", \"error\", \"onChange\", \"required\", \"slotProps\", \"slots\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nimport { FormControlContext } from './FormControlContext';\nimport { getFormControlUtilityClass } from './formControlClasses';\nimport { useSlotProps } from '../utils';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction hasValue(value) {\n  return value != null && !(Array.isArray(value) && value.length === 0) && value !== '';\n}\n\nfunction useUtilityClasses(ownerState) {\n  const {\n    disabled,\n    error,\n    filled,\n    focused,\n    required\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focused && 'focused', error && 'error', filled && 'filled', required && 'required']\n  };\n  return composeClasses(slots, useClassNamesOverride(getFormControlUtilityClass));\n}\n/**\r\n * Provides context such as filled/focused/error/required for form inputs.\r\n * Relying on the context provides high flexibility and ensures that the state always stays\r\n * consistent across the children of the `FormControl`.\r\n * This context is used by the following components:\r\n *\r\n * *   FormLabel\r\n * *   FormHelperText\r\n * *   Input\r\n * *   InputLabel\r\n *\r\n * You can find one composition example below and more going to [the demos](https://mui.com/material-ui/react-text-field/#components).\r\n *\r\n * ```jsx\r\n * <FormControl>\r\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\r\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\r\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\r\n * </FormControl>\r\n * ```\r\n *\r\n * ⚠️ Only one `Input` can be used within a FormControl because it create visual inconsistencies.\r\n * For instance, only one input can be focused at the same time, the state shouldn't be shared.\r\n *\r\n * Demos:\r\n *\r\n * - [Form Control](https://mui.com/base-ui/react-form-control/)\r\n * - [Input](https://mui.com/joy-ui/react-input/)\r\n * - [Checkbox](https://mui.com/material-ui/react-checkbox/)\r\n * - [Radio Group](https://mui.com/material-ui/react-radio-button/)\r\n * - [Switch](https://mui.com/material-ui/react-switch/)\r\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\r\n *\r\n * API:\r\n *\r\n * - [FormControl API](https://mui.com/base-ui/react-form-control/components-api/#form-control)\r\n */\n\n\nconst FormControl = /*#__PURE__*/React.forwardRef(function FormControl(props, forwardedRef) {\n  var _slots$root;\n\n  const {\n    defaultValue,\n    children,\n    disabled = false,\n    error = false,\n    onChange,\n    required = false,\n    slotProps = {},\n    slots = {},\n    value: incomingValue\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const [value, setValue] = useControlled({\n    controlled: incomingValue,\n    default: defaultValue,\n    name: 'FormControl',\n    state: 'value'\n  });\n  const filled = hasValue(value);\n  const [focusedState, setFocused] = React.useState(false);\n  const focused = focusedState && !disabled;\n  React.useEffect(() => setFocused(isFocused => disabled ? false : isFocused), [disabled]);\n\n  const ownerState = _extends({}, props, {\n    disabled,\n    error,\n    filled,\n    focused,\n    required\n  });\n\n  const childContext = React.useMemo(() => {\n    return {\n      disabled,\n      error,\n      filled,\n      focused,\n      onBlur: () => {\n        setFocused(false);\n      },\n      onChange: event => {\n        setValue(event.target.value);\n        onChange == null ? void 0 : onChange(event);\n      },\n      onFocus: () => {\n        setFocused(true);\n      },\n      required,\n      value: value != null ? value : ''\n    };\n  }, [disabled, error, filled, focused, onChange, required, setValue, value]);\n  const classes = useUtilityClasses(ownerState);\n\n  const renderChildren = () => {\n    if (typeof children === 'function') {\n      return children(childContext);\n    }\n\n    return children;\n  };\n\n  const Root = (_slots$root = slots.root) != null ? _slots$root : 'div';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef,\n      children: renderChildren()\n    },\n    ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(FormControlContext.Provider, {\n    value: childContext,\n    children: /*#__PURE__*/_jsx(Root, _extends({}, rootProps))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControl.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.node, PropTypes.func]),\n\n  /**\r\n   * Class name applied to the root element.\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * @ignore\r\n   */\n  defaultValue: PropTypes.any,\n\n  /**\r\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\r\n   * @default false\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * If `true`, the label is displayed in an error state.\r\n   * @default false\r\n   */\n  error: PropTypes.bool,\n\n  /**\r\n   * Callback fired when the form element's value is modified.\r\n   */\n  onChange: PropTypes.func,\n\n  /**\r\n   * If `true`, the label will indicate that the `input` is required.\r\n   * @default false\r\n   */\n  required: PropTypes.bool,\n\n  /**\r\n   * The props used for each slot inside the FormControl.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\r\n   * The components used for each slot inside the FormControl.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n\n  /**\r\n   * The value of the form element.\r\n   */\n  value: PropTypes.any\n} : void 0;\nexport { FormControl };","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/@mui/base/FormControl/FormControl.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","unstable_useControlled","useControlled","FormControlContext","getFormControlUtilityClass","useSlotProps","unstable_composeClasses","composeClasses","useClassNamesOverride","jsx","_jsx","hasValue","value","Array","isArray","length","useUtilityClasses","ownerState","disabled","error","filled","focused","required","slots","root","FormControl","forwardRef","props","forwardedRef","_slots$root","defaultValue","children","onChange","slotProps","incomingValue","other","setValue","controlled","default","name","state","focusedState","setFocused","useState","useEffect","isFocused","childContext","useMemo","onBlur","event","target","onFocus","classes","renderChildren","Root","rootProps","elementType","externalSlotProps","externalForwardedProps","additionalProps","ref","className","Provider","process","env","NODE_ENV","propTypes","oneOfType","node","func","string","any","bool","shape","object"],"mappings":"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","sourcesContent":["'use client';\r\n\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nconst _excluded = [\"defaultValue\", \"children\", \"disabled\", \"error\", \"onChange\", \"required\", \"slotProps\", \"slots\", \"value\"];\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { unstable_useControlled as useControlled } from '@mui/utils';\r\nimport { FormControlContext } from './FormControlContext';\r\nimport { getFormControlUtilityClass } from './formControlClasses';\r\nimport { useSlotProps } from '../utils';\r\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\r\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nfunction hasValue(value) {\r\n  return value != null && !(Array.isArray(value) && value.length === 0) && value !== '';\r\n}\r\nfunction useUtilityClasses(ownerState) {\r\n  const {\r\n    disabled,\r\n    error,\r\n    filled,\r\n    focused,\r\n    required\r\n  } = ownerState;\r\n  const slots = {\r\n    root: ['root', disabled && 'disabled', focused && 'focused', error && 'error', filled && 'filled', required && 'required']\r\n  };\r\n  return composeClasses(slots, useClassNamesOverride(getFormControlUtilityClass));\r\n}\r\n\r\n/**\r\n * Provides context such as filled/focused/error/required for form inputs.\r\n * Relying on the context provides high flexibility and ensures that the state always stays\r\n * consistent across the children of the `FormControl`.\r\n * This context is used by the following components:\r\n *\r\n * *   FormLabel\r\n * *   FormHelperText\r\n * *   Input\r\n * *   InputLabel\r\n *\r\n * You can find one composition example below and more going to [the demos](https://mui.com/material-ui/react-text-field/#components).\r\n *\r\n * ```jsx\r\n * <FormControl>\r\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\r\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\r\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\r\n * </FormControl>\r\n * ```\r\n *\r\n * ⚠️ Only one `Input` can be used within a FormControl because it create visual inconsistencies.\r\n * For instance, only one input can be focused at the same time, the state shouldn't be shared.\r\n *\r\n * Demos:\r\n *\r\n * - [Form Control](https://mui.com/base-ui/react-form-control/)\r\n * - [Input](https://mui.com/joy-ui/react-input/)\r\n * - [Checkbox](https://mui.com/material-ui/react-checkbox/)\r\n * - [Radio Group](https://mui.com/material-ui/react-radio-button/)\r\n * - [Switch](https://mui.com/material-ui/react-switch/)\r\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\r\n *\r\n * API:\r\n *\r\n * - [FormControl API](https://mui.com/base-ui/react-form-control/components-api/#form-control)\r\n */\r\nconst FormControl = /*#__PURE__*/React.forwardRef(function FormControl(props, forwardedRef) {\r\n  var _slots$root;\r\n  const {\r\n      defaultValue,\r\n      children,\r\n      disabled = false,\r\n      error = false,\r\n      onChange,\r\n      required = false,\r\n      slotProps = {},\r\n      slots = {},\r\n      value: incomingValue\r\n    } = props,\r\n    other = _objectWithoutPropertiesLoose(props, _excluded);\r\n  const [value, setValue] = useControlled({\r\n    controlled: incomingValue,\r\n    default: defaultValue,\r\n    name: 'FormControl',\r\n    state: 'value'\r\n  });\r\n  const filled = hasValue(value);\r\n  const [focusedState, setFocused] = React.useState(false);\r\n  const focused = focusedState && !disabled;\r\n  React.useEffect(() => setFocused(isFocused => disabled ? false : isFocused), [disabled]);\r\n  const ownerState = _extends({}, props, {\r\n    disabled,\r\n    error,\r\n    filled,\r\n    focused,\r\n    required\r\n  });\r\n  const childContext = React.useMemo(() => {\r\n    return {\r\n      disabled,\r\n      error,\r\n      filled,\r\n      focused,\r\n      onBlur: () => {\r\n        setFocused(false);\r\n      },\r\n      onChange: event => {\r\n        setValue(event.target.value);\r\n        onChange == null ? void 0 : onChange(event);\r\n      },\r\n      onFocus: () => {\r\n        setFocused(true);\r\n      },\r\n      required,\r\n      value: value != null ? value : ''\r\n    };\r\n  }, [disabled, error, filled, focused, onChange, required, setValue, value]);\r\n  const classes = useUtilityClasses(ownerState);\r\n  const renderChildren = () => {\r\n    if (typeof children === 'function') {\r\n      return children(childContext);\r\n    }\r\n    return children;\r\n  };\r\n  const Root = (_slots$root = slots.root) != null ? _slots$root : 'div';\r\n  const rootProps = useSlotProps({\r\n    elementType: Root,\r\n    externalSlotProps: slotProps.root,\r\n    externalForwardedProps: other,\r\n    additionalProps: {\r\n      ref: forwardedRef,\r\n      children: renderChildren()\r\n    },\r\n    ownerState,\r\n    className: classes.root\r\n  });\r\n  return /*#__PURE__*/_jsx(FormControlContext.Provider, {\r\n    value: childContext,\r\n    children: /*#__PURE__*/_jsx(Root, _extends({}, rootProps))\r\n  });\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? FormControl.propTypes /* remove-proptypes */ = {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\r\n  // ----------------------------------------------------------------------\r\n  /**\r\n   * The content of the component.\r\n   */\r\n  children: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.node, PropTypes.func]),\r\n  /**\r\n   * Class name applied to the root element.\r\n   */\r\n  className: PropTypes.string,\r\n  /**\r\n   * @ignore\r\n   */\r\n  defaultValue: PropTypes.any,\r\n  /**\r\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\r\n   * @default false\r\n   */\r\n  disabled: PropTypes.bool,\r\n  /**\r\n   * If `true`, the label is displayed in an error state.\r\n   * @default false\r\n   */\r\n  error: PropTypes.bool,\r\n  /**\r\n   * Callback fired when the form element's value is modified.\r\n   */\r\n  onChange: PropTypes.func,\r\n  /**\r\n   * If `true`, the label will indicate that the `input` is required.\r\n   * @default false\r\n   */\r\n  required: PropTypes.bool,\r\n  /**\r\n   * The props used for each slot inside the FormControl.\r\n   * @default {}\r\n   */\r\n  slotProps: PropTypes.shape({\r\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\r\n  }),\r\n  /**\r\n   * The components used for each slot inside the FormControl.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\r\n  slots: PropTypes.shape({\r\n    root: PropTypes.elementType\r\n  }),\r\n  /**\r\n   * The value of the form element.\r\n   */\r\n  value: PropTypes.any\r\n} : void 0;\r\nexport { FormControl };"]},"metadata":{},"sourceType":"module"}