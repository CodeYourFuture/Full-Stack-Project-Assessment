{"ast":null,"code":"import { ForwardRef, Memo } from 'react-is'; // Simplified polyfill for IE11 support\n// https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3\n\nconst fnNameMatchRegex = /^\\s*function(?:\\s|\\s*\\/\\*.*\\*\\/\\s*)+([^(\\s/]*)\\s*/;\nexport function getFunctionName(fn) {\n  const match = `${fn}`.match(fnNameMatchRegex);\n  const name = match && match[1];\n  return name || '';\n}\n\nfunction getFunctionComponentName(Component) {\n  let fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return Component.displayName || Component.name || getFunctionName(Component) || fallback;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  const functionName = getFunctionComponentName(innerType);\n  return outerType.displayName || (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName);\n}\n/**\r\n * cherry-pick from\r\n * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js\r\n * originally forked from recompose/getDisplayName with added IE11 support\r\n */\n\n\nexport default function getDisplayName(Component) {\n  if (Component == null) {\n    return undefined;\n  }\n\n  if (typeof Component === 'string') {\n    return Component;\n  }\n\n  if (typeof Component === 'function') {\n    return getFunctionComponentName(Component, 'Component');\n  } // TypeScript can't have components as objects but they exist in the form of `memo` or `Suspense`\n\n\n  if (typeof Component === 'object') {\n    switch (Component.$$typeof) {\n      case ForwardRef:\n        return getWrappedName(Component, Component.render, 'ForwardRef');\n\n      case Memo:\n        return getWrappedName(Component, Component.type, 'memo');\n\n      default:\n        return undefined;\n    }\n  }\n\n  return undefined;\n}","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/@mui/utils/esm/getDisplayName.js"],"names":["ForwardRef","Memo","fnNameMatchRegex","getFunctionName","fn","match","name","getFunctionComponentName","Component","fallback","displayName","getWrappedName","outerType","innerType","wrapperName","functionName","getDisplayName","undefined","$$typeof","render","type"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,QAAiC,UAAjC,C,CAEA;AACA;;AACA,MAAMC,gBAAgB,GAAG,mDAAzB;AACA,OAAO,SAASC,eAAT,CAAyBC,EAAzB,EAA6B;AAClC,QAAMC,KAAK,GAAI,GAAED,EAAG,EAAN,CAAQC,KAAR,CAAcH,gBAAd,CAAd;AACA,QAAMI,IAAI,GAAGD,KAAK,IAAIA,KAAK,CAAC,CAAD,CAA3B;AACA,SAAOC,IAAI,IAAI,EAAf;AACD;;AACD,SAASC,wBAAT,CAAkCC,SAAlC,EAA4D;AAAA,MAAfC,QAAe,uEAAJ,EAAI;AAC1D,SAAOD,SAAS,CAACE,WAAV,IAAyBF,SAAS,CAACF,IAAnC,IAA2CH,eAAe,CAACK,SAAD,CAA1D,IAAyEC,QAAhF;AACD;;AACD,SAASE,cAAT,CAAwBC,SAAxB,EAAmCC,SAAnC,EAA8CC,WAA9C,EAA2D;AACzD,QAAMC,YAAY,GAAGR,wBAAwB,CAACM,SAAD,CAA7C;AACA,SAAOD,SAAS,CAACF,WAAV,KAA0BK,YAAY,KAAK,EAAjB,GAAuB,GAAED,WAAY,IAAGC,YAAa,GAArD,GAA0DD,WAApF,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASE,cAAT,CAAwBR,SAAxB,EAAmC;AAChD,MAAIA,SAAS,IAAI,IAAjB,EAAuB;AACrB,WAAOS,SAAP;AACD;;AACD,MAAI,OAAOT,SAAP,KAAqB,QAAzB,EAAmC;AACjC,WAAOA,SAAP;AACD;;AACD,MAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;AACnC,WAAOD,wBAAwB,CAACC,SAAD,EAAY,WAAZ,CAA/B;AACD,GAT+C,CAWhD;;;AACA,MAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,YAAQA,SAAS,CAACU,QAAlB;AACE,WAAKlB,UAAL;AACE,eAAOW,cAAc,CAACH,SAAD,EAAYA,SAAS,CAACW,MAAtB,EAA8B,YAA9B,CAArB;;AACF,WAAKlB,IAAL;AACE,eAAOU,cAAc,CAACH,SAAD,EAAYA,SAAS,CAACY,IAAtB,EAA4B,MAA5B,CAArB;;AACF;AACE,eAAOH,SAAP;AANJ;AAQD;;AACD,SAAOA,SAAP;AACD","sourcesContent":["import { ForwardRef, Memo } from 'react-is';\r\n\r\n// Simplified polyfill for IE11 support\r\n// https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3\r\nconst fnNameMatchRegex = /^\\s*function(?:\\s|\\s*\\/\\*.*\\*\\/\\s*)+([^(\\s/]*)\\s*/;\r\nexport function getFunctionName(fn) {\r\n  const match = `${fn}`.match(fnNameMatchRegex);\r\n  const name = match && match[1];\r\n  return name || '';\r\n}\r\nfunction getFunctionComponentName(Component, fallback = '') {\r\n  return Component.displayName || Component.name || getFunctionName(Component) || fallback;\r\n}\r\nfunction getWrappedName(outerType, innerType, wrapperName) {\r\n  const functionName = getFunctionComponentName(innerType);\r\n  return outerType.displayName || (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName);\r\n}\r\n\r\n/**\r\n * cherry-pick from\r\n * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js\r\n * originally forked from recompose/getDisplayName with added IE11 support\r\n */\r\nexport default function getDisplayName(Component) {\r\n  if (Component == null) {\r\n    return undefined;\r\n  }\r\n  if (typeof Component === 'string') {\r\n    return Component;\r\n  }\r\n  if (typeof Component === 'function') {\r\n    return getFunctionComponentName(Component, 'Component');\r\n  }\r\n\r\n  // TypeScript can't have components as objects but they exist in the form of `memo` or `Suspense`\r\n  if (typeof Component === 'object') {\r\n    switch (Component.$$typeof) {\r\n      case ForwardRef:\r\n        return getWrappedName(Component, Component.render, 'ForwardRef');\r\n      case Memo:\r\n        return getWrappedName(Component, Component.type, 'memo');\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n  return undefined;\r\n}"]},"metadata":{},"sourceType":"module"}