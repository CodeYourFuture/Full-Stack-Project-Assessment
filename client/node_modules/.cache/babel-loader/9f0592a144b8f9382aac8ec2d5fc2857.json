{"ast":null,"code":"import useMergedRefs from '@restart/hooks/useMergedRefs';\nimport DropdownContext from '@restart/ui/DropdownContext';\nimport { useDropdownToggle } from '@restart/ui/DropdownToggle';\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport Button from './Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport useWrappedRefWithWarning from './useWrappedRefWithWarning';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DropdownToggle = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    bsPrefix,\n    split,\n    className,\n    childBsPrefix,\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = Button,\n    ...props\n  } = _ref;\n  const prefix = useBootstrapPrefix(bsPrefix, 'dropdown-toggle');\n  const dropdownContext = useContext(DropdownContext);\n\n  if (childBsPrefix !== undefined) {\n    props.bsPrefix = childBsPrefix;\n  }\n\n  const [toggleProps] = useDropdownToggle();\n  toggleProps.ref = useMergedRefs(toggleProps.ref, useWrappedRefWithWarning(ref, 'DropdownToggle')); // This intentionally forwards size and variant (if set) to the\n  // underlying component, to allow it to render size and style variants.\n\n  return /*#__PURE__*/_jsx(Component, {\n    className: classNames(className, prefix, split && `${prefix}-split`, (dropdownContext == null ? void 0 : dropdownContext.show) && 'show'),\n    ...toggleProps,\n    ...props\n  });\n});\nDropdownToggle.displayName = 'DropdownToggle';\nexport default DropdownToggle;","map":{"version":3,"sources":["/home/coder/CYF/react-learn/Full-Stack-Project-Assessment/client/node_modules/react-bootstrap/esm/DropdownToggle.js"],"names":["useMergedRefs","DropdownContext","useDropdownToggle","classNames","React","useContext","Button","useBootstrapPrefix","useWrappedRefWithWarning","jsx","_jsx","DropdownToggle","forwardRef","ref","bsPrefix","split","className","childBsPrefix","as","Component","props","prefix","dropdownContext","undefined","toggleProps","show","displayName"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,8BAA1B;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,MAAMC,cAAc,GAAG,aAAaP,KAAK,CAACQ,UAAN,CAAiB,OAQlDC,GARkD,KAQ1C;AAAA,MAR2C;AACpDC,IAAAA,QADoD;AAEpDC,IAAAA,KAFoD;AAGpDC,IAAAA,SAHoD;AAIpDC,IAAAA,aAJoD;AAKpD;AACAC,IAAAA,EAAE,EAAEC,SAAS,GAAGb,MANoC;AAOpD,OAAGc;AAPiD,GAQ3C;AACT,QAAMC,MAAM,GAAGd,kBAAkB,CAACO,QAAD,EAAW,iBAAX,CAAjC;AACA,QAAMQ,eAAe,GAAGjB,UAAU,CAACJ,eAAD,CAAlC;;AACA,MAAIgB,aAAa,KAAKM,SAAtB,EAAiC;AAC/BH,IAAAA,KAAK,CAACN,QAAN,GAAiBG,aAAjB;AACD;;AACD,QAAM,CAACO,WAAD,IAAgBtB,iBAAiB,EAAvC;AACAsB,EAAAA,WAAW,CAACX,GAAZ,GAAkBb,aAAa,CAACwB,WAAW,CAACX,GAAb,EAAkBL,wBAAwB,CAACK,GAAD,EAAM,gBAAN,CAA1C,CAA/B,CAPS,CAST;AACA;;AACA,SAAO,aAAaH,IAAI,CAACS,SAAD,EAAY;AAClCH,IAAAA,SAAS,EAAEb,UAAU,CAACa,SAAD,EAAYK,MAAZ,EAAoBN,KAAK,IAAK,GAAEM,MAAO,QAAvC,EAAgD,CAACC,eAAe,IAAI,IAAnB,GAA0B,KAAK,CAA/B,GAAmCA,eAAe,CAACG,IAApD,KAA6D,MAA7G,CADa;AAElC,OAAGD,WAF+B;AAGlC,OAAGJ;AAH+B,GAAZ,CAAxB;AAKD,CAxBmC,CAApC;AAyBAT,cAAc,CAACe,WAAf,GAA6B,gBAA7B;AACA,eAAef,cAAf","sourcesContent":["import useMergedRefs from '@restart/hooks/useMergedRefs';\nimport DropdownContext from '@restart/ui/DropdownContext';\nimport { useDropdownToggle } from '@restart/ui/DropdownToggle';\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport Button from './Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport useWrappedRefWithWarning from './useWrappedRefWithWarning';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DropdownToggle = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  split,\n  className,\n  childBsPrefix,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = Button,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'dropdown-toggle');\n  const dropdownContext = useContext(DropdownContext);\n  if (childBsPrefix !== undefined) {\n    props.bsPrefix = childBsPrefix;\n  }\n  const [toggleProps] = useDropdownToggle();\n  toggleProps.ref = useMergedRefs(toggleProps.ref, useWrappedRefWithWarning(ref, 'DropdownToggle'));\n\n  // This intentionally forwards size and variant (if set) to the\n  // underlying component, to allow it to render size and style variants.\n  return /*#__PURE__*/_jsx(Component, {\n    className: classNames(className, prefix, split && `${prefix}-split`, (dropdownContext == null ? void 0 : dropdownContext.show) && 'show'),\n    ...toggleProps,\n    ...props\n  });\n});\nDropdownToggle.displayName = 'DropdownToggle';\nexport default DropdownToggle;"]},"metadata":{},"sourceType":"module"}