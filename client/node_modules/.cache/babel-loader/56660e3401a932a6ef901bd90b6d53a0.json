{"ast":null,"code":"import utils from '../utils.js';\nimport httpAdapter from './http.js';\nimport xhrAdapter from './xhr.js';\nimport AxiosError from \"../core/AxiosError.js\";\nconst knownAdapters = {\n  http: httpAdapter,\n  xhr: xhrAdapter\n};\nutils.forEach(knownAdapters, (fn, value) => {\n  if (fn) {\n    try {\n      Object.defineProperty(fn, 'name', {\n        value\n      });\n    } catch (e) {// eslint-disable-next-line no-empty\n    }\n\n    Object.defineProperty(fn, 'adapterName', {\n      value\n    });\n  }\n});\nexport default {\n  getAdapter: adapters => {\n    adapters = utils.isArray(adapters) ? adapters : [adapters];\n    const {\n      length\n    } = adapters;\n    let nameOrAdapter;\n    let adapter;\n\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n\n      if (adapter = utils.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter) {\n        break;\n      }\n    }\n\n    if (!adapter) {\n      if (adapter === false) {\n        throw new AxiosError(`Adapter ${nameOrAdapter} is not supported by the environment`, 'ERR_NOT_SUPPORT');\n      }\n\n      throw new Error(utils.hasOwnProp(knownAdapters, nameOrAdapter) ? `Adapter '${nameOrAdapter}' is not available in the build` : `Unknown adapter '${nameOrAdapter}'`);\n    }\n\n    if (!utils.isFunction(adapter)) {\n      throw new TypeError('adapter is not a function');\n    }\n\n    return adapter;\n  },\n  adapters: knownAdapters\n};","map":{"version":3,"sources":["/Users/anuthapaliya/Documents/GitHub/Full-Stack-Project-Assessment/client/node_modules/axios/lib/adapters/adapters.js"],"names":["utils","httpAdapter","xhrAdapter","AxiosError","knownAdapters","http","xhr","forEach","fn","value","Object","defineProperty","e","getAdapter","adapters","isArray","length","nameOrAdapter","adapter","i","isString","toLowerCase","Error","hasOwnProp","isFunction","TypeError"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,WAAxB;AACA,OAAOC,UAAP,MAAuB,UAAvB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,IAAI,EAAEJ,WADc;AAEpBK,EAAAA,GAAG,EAAEJ;AAFe,CAAtB;AAKAF,KAAK,CAACO,OAAN,CAAcH,aAAd,EAA6B,CAACI,EAAD,EAAKC,KAAL,KAAe;AAC1C,MAAGD,EAAH,EAAO;AACL,QAAI;AACFE,MAAAA,MAAM,CAACC,cAAP,CAAsBH,EAAtB,EAA0B,MAA1B,EAAkC;AAACC,QAAAA;AAAD,OAAlC;AACD,KAFD,CAEE,OAAOG,CAAP,EAAU,CACV;AACD;;AACDF,IAAAA,MAAM,CAACC,cAAP,CAAsBH,EAAtB,EAA0B,aAA1B,EAAyC;AAACC,MAAAA;AAAD,KAAzC;AACD;AACF,CATD;AAWA,eAAe;AACbI,EAAAA,UAAU,EAAGC,QAAD,IAAc;AACxBA,IAAAA,QAAQ,GAAGd,KAAK,CAACe,OAAN,CAAcD,QAAd,IAA0BA,QAA1B,GAAqC,CAACA,QAAD,CAAhD;AAEA,UAAM;AAACE,MAAAA;AAAD,QAAWF,QAAjB;AACA,QAAIG,aAAJ;AACA,QAAIC,OAAJ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAApB,EAA4BG,CAAC,EAA7B,EAAiC;AAC/BF,MAAAA,aAAa,GAAGH,QAAQ,CAACK,CAAD,CAAxB;;AACA,UAAID,OAAO,GAAGlB,KAAK,CAACoB,QAAN,CAAeH,aAAf,IAAgCb,aAAa,CAACa,aAAa,CAACI,WAAd,EAAD,CAA7C,GAA6EJ,aAA3F,EAA2G;AACzG;AACD;AACF;;AAED,QAAI,CAACC,OAAL,EAAc;AACZ,UAAIA,OAAO,KAAK,KAAhB,EAAuB;AACrB,cAAM,IAAIf,UAAJ,CACH,WAAUc,aAAc,sCADrB,EAEJ,iBAFI,CAAN;AAID;;AAED,YAAM,IAAIK,KAAJ,CACJtB,KAAK,CAACuB,UAAN,CAAiBnB,aAAjB,EAAgCa,aAAhC,IACG,YAAWA,aAAc,iCAD5B,GAEG,oBAAmBA,aAAc,GAHhC,CAAN;AAKD;;AAED,QAAI,CAACjB,KAAK,CAACwB,UAAN,CAAiBN,OAAjB,CAAL,EAAgC;AAC9B,YAAM,IAAIO,SAAJ,CAAc,2BAAd,CAAN;AACD;;AAED,WAAOP,OAAP;AACD,GAnCY;AAoCbJ,EAAAA,QAAQ,EAAEV;AApCG,CAAf","sourcesContent":["import utils from '../utils.js';\nimport httpAdapter from './http.js';\nimport xhrAdapter from './xhr.js';\nimport AxiosError from \"../core/AxiosError.js\";\n\nconst knownAdapters = {\n  http: httpAdapter,\n  xhr: xhrAdapter\n}\n\nutils.forEach(knownAdapters, (fn, value) => {\n  if(fn) {\n    try {\n      Object.defineProperty(fn, 'name', {value});\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    Object.defineProperty(fn, 'adapterName', {value});\n  }\n});\n\nexport default {\n  getAdapter: (adapters) => {\n    adapters = utils.isArray(adapters) ? adapters : [adapters];\n\n    const {length} = adapters;\n    let nameOrAdapter;\n    let adapter;\n\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      if((adapter = utils.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter)) {\n        break;\n      }\n    }\n\n    if (!adapter) {\n      if (adapter === false) {\n        throw new AxiosError(\n          `Adapter ${nameOrAdapter} is not supported by the environment`,\n          'ERR_NOT_SUPPORT'\n        );\n      }\n\n      throw new Error(\n        utils.hasOwnProp(knownAdapters, nameOrAdapter) ?\n          `Adapter '${nameOrAdapter}' is not available in the build` :\n          `Unknown adapter '${nameOrAdapter}'`\n      );\n    }\n\n    if (!utils.isFunction(adapter)) {\n      throw new TypeError('adapter is not a function');\n    }\n\n    return adapter;\n  },\n  adapters: knownAdapters\n}\n"]},"metadata":{},"sourceType":"module"}