{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\n/**\n * The basic building block for creating custom snackbar.\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/base-ui/react-snackbar/#hook)\n *\n * API:\n *\n * - [useSnackbar API](https://mui.com/base-ui/react-snackbar/hooks-api/#use-snackbar)\n */\n\nexport function useSnackbar(parameters) {\n  const {\n    autoHideDuration = null,\n    disableWindowBlurListener = false,\n    onClose,\n    open,\n    resumeHideDuration\n  } = parameters;\n  const timerAutoHide = React.useRef();\n  React.useEffect(() => {\n    if (!open) {\n      return undefined;\n    }\n    /**\n     * @param {KeyboardEvent} nativeEvent\n     */\n\n\n    function handleKeyDown(nativeEvent) {\n      if (!nativeEvent.defaultPrevented) {\n        // IE11, Edge (prior to using Blink?) use 'Esc'\n        if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') {\n          // not calling `preventDefault` since we don't know if people may ignore this event e.g. a permanently open snackbar\n          onClose == null ? void 0 : onClose(nativeEvent, 'escapeKeyDown');\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [open, onClose]);\n  const handleClose = useEventCallback((event, reason) => {\n    onClose == null ? void 0 : onClose(event, reason);\n  });\n  const setAutoHideTimer = useEventCallback(autoHideDurationParam => {\n    if (!onClose || autoHideDurationParam == null) {\n      return;\n    }\n\n    clearTimeout(timerAutoHide.current);\n    timerAutoHide.current = setTimeout(() => {\n      handleClose(null, 'timeout');\n    }, autoHideDurationParam);\n  });\n  React.useEffect(() => {\n    if (open) {\n      setAutoHideTimer(autoHideDuration);\n    }\n\n    return () => {\n      clearTimeout(timerAutoHide.current);\n    };\n  }, [open, autoHideDuration, setAutoHideTimer]);\n\n  const handleClickAway = event => {\n    onClose == null ? void 0 : onClose(event, 'clickaway');\n  }; // Pause the timer when the user is interacting with the Snackbar\n  // or when the user hide the window.\n\n\n  const handlePause = () => {\n    clearTimeout(timerAutoHide.current);\n  }; // Restart the timer when the user is no longer interacting with the Snackbar\n  // or when the window is shown back.\n\n\n  const handleResume = React.useCallback(() => {\n    if (autoHideDuration != null) {\n      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);\n    }\n  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);\n\n  const createHandleBlur = otherHandlers => event => {\n    const onBlurCallback = otherHandlers.onBlur;\n    onBlurCallback == null ? void 0 : onBlurCallback(event);\n    handleResume();\n  };\n\n  const createHandleFocus = otherHandlers => event => {\n    const onFocusCallback = otherHandlers.onFocus;\n    onFocusCallback == null ? void 0 : onFocusCallback(event);\n    handlePause();\n  };\n\n  const createMouseEnter = otherHandlers => event => {\n    const onMouseEnterCallback = otherHandlers.onMouseEnter;\n    onMouseEnterCallback == null ? void 0 : onMouseEnterCallback(event);\n    handlePause();\n  };\n\n  const createMouseLeave = otherHandlers => event => {\n    const onMouseLeaveCallback = otherHandlers.onMouseLeave;\n    onMouseLeaveCallback == null ? void 0 : onMouseLeaveCallback(event);\n    handleResume();\n  };\n\n  React.useEffect(() => {\n    // TODO: window global should be refactored here\n    if (!disableWindowBlurListener && open) {\n      window.addEventListener('focus', handleResume);\n      window.addEventListener('blur', handlePause);\n      return () => {\n        window.removeEventListener('focus', handleResume);\n        window.removeEventListener('blur', handlePause);\n      };\n    }\n\n    return undefined;\n  }, [disableWindowBlurListener, handleResume, open]);\n\n  const getRootProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const propsEventHandlers = extractEventHandlers(parameters);\n\n    const externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);\n\n    return _extends({\n      // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.\n      // See https://github.com/mui/material-ui/issues/29080\n      role: 'presentation'\n    }, externalEventHandlers, {\n      onBlur: createHandleBlur(externalEventHandlers),\n      onFocus: createHandleFocus(externalEventHandlers),\n      onMouseEnter: createMouseEnter(externalEventHandlers),\n      onMouseLeave: createMouseLeave(externalEventHandlers)\n    });\n  };\n\n  return {\n    getRootProps,\n    onClickAway: handleClickAway\n  };\n}","map":{"version":3,"sources":["/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@mui/base/useSnackbar/useSnackbar.js"],"names":["_extends","React","unstable_useEventCallback","useEventCallback","extractEventHandlers","useSnackbar","parameters","autoHideDuration","disableWindowBlurListener","onClose","open","resumeHideDuration","timerAutoHide","useRef","useEffect","undefined","handleKeyDown","nativeEvent","defaultPrevented","key","document","addEventListener","removeEventListener","handleClose","event","reason","setAutoHideTimer","autoHideDurationParam","clearTimeout","current","setTimeout","handleClickAway","handlePause","handleResume","useCallback","createHandleBlur","otherHandlers","onBlurCallback","onBlur","createHandleFocus","onFocusCallback","onFocus","createMouseEnter","onMouseEnterCallback","onMouseEnter","createMouseLeave","onMouseLeaveCallback","onMouseLeave","window","getRootProps","propsEventHandlers","externalEventHandlers","role","onClickAway"],"mappings":"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","sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\n\n/**\n * The basic building block for creating custom snackbar.\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/base-ui/react-snackbar/#hook)\n *\n * API:\n *\n * - [useSnackbar API](https://mui.com/base-ui/react-snackbar/hooks-api/#use-snackbar)\n */\nexport function useSnackbar(parameters) {\n  const {\n    autoHideDuration = null,\n    disableWindowBlurListener = false,\n    onClose,\n    open,\n    resumeHideDuration\n  } = parameters;\n  const timerAutoHide = React.useRef();\n  React.useEffect(() => {\n    if (!open) {\n      return undefined;\n    }\n\n    /**\n     * @param {KeyboardEvent} nativeEvent\n     */\n    function handleKeyDown(nativeEvent) {\n      if (!nativeEvent.defaultPrevented) {\n        // IE11, Edge (prior to using Blink?) use 'Esc'\n        if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') {\n          // not calling `preventDefault` since we don't know if people may ignore this event e.g. a permanently open snackbar\n          onClose == null ? void 0 : onClose(nativeEvent, 'escapeKeyDown');\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [open, onClose]);\n  const handleClose = useEventCallback((event, reason) => {\n    onClose == null ? void 0 : onClose(event, reason);\n  });\n  const setAutoHideTimer = useEventCallback(autoHideDurationParam => {\n    if (!onClose || autoHideDurationParam == null) {\n      return;\n    }\n    clearTimeout(timerAutoHide.current);\n    timerAutoHide.current = setTimeout(() => {\n      handleClose(null, 'timeout');\n    }, autoHideDurationParam);\n  });\n  React.useEffect(() => {\n    if (open) {\n      setAutoHideTimer(autoHideDuration);\n    }\n    return () => {\n      clearTimeout(timerAutoHide.current);\n    };\n  }, [open, autoHideDuration, setAutoHideTimer]);\n  const handleClickAway = event => {\n    onClose == null ? void 0 : onClose(event, 'clickaway');\n  };\n\n  // Pause the timer when the user is interacting with the Snackbar\n  // or when the user hide the window.\n  const handlePause = () => {\n    clearTimeout(timerAutoHide.current);\n  };\n\n  // Restart the timer when the user is no longer interacting with the Snackbar\n  // or when the window is shown back.\n  const handleResume = React.useCallback(() => {\n    if (autoHideDuration != null) {\n      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);\n    }\n  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);\n  const createHandleBlur = otherHandlers => event => {\n    const onBlurCallback = otherHandlers.onBlur;\n    onBlurCallback == null ? void 0 : onBlurCallback(event);\n    handleResume();\n  };\n  const createHandleFocus = otherHandlers => event => {\n    const onFocusCallback = otherHandlers.onFocus;\n    onFocusCallback == null ? void 0 : onFocusCallback(event);\n    handlePause();\n  };\n  const createMouseEnter = otherHandlers => event => {\n    const onMouseEnterCallback = otherHandlers.onMouseEnter;\n    onMouseEnterCallback == null ? void 0 : onMouseEnterCallback(event);\n    handlePause();\n  };\n  const createMouseLeave = otherHandlers => event => {\n    const onMouseLeaveCallback = otherHandlers.onMouseLeave;\n    onMouseLeaveCallback == null ? void 0 : onMouseLeaveCallback(event);\n    handleResume();\n  };\n  React.useEffect(() => {\n    // TODO: window global should be refactored here\n    if (!disableWindowBlurListener && open) {\n      window.addEventListener('focus', handleResume);\n      window.addEventListener('blur', handlePause);\n      return () => {\n        window.removeEventListener('focus', handleResume);\n        window.removeEventListener('blur', handlePause);\n      };\n    }\n    return undefined;\n  }, [disableWindowBlurListener, handleResume, open]);\n  const getRootProps = (otherHandlers = {}) => {\n    const propsEventHandlers = extractEventHandlers(parameters);\n    const externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);\n    return _extends({\n      // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.\n      // See https://github.com/mui/material-ui/issues/29080\n      role: 'presentation'\n    }, externalEventHandlers, {\n      onBlur: createHandleBlur(externalEventHandlers),\n      onFocus: createHandleFocus(externalEventHandlers),\n      onMouseEnter: createMouseEnter(externalEventHandlers),\n      onMouseLeave: createMouseLeave(externalEventHandlers)\n    });\n  };\n  return {\n    getRootProps,\n    onClickAway: handleClickAway\n  };\n}"]},"metadata":{},"sourceType":"module"}