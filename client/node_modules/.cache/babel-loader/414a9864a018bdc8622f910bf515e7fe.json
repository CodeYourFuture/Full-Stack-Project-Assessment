{"ast":null,"code":"import $73SJx$react, { useContext as $73SJx$useContext, useState as $73SJx$useState, useMemo as $73SJx$useMemo, useLayoutEffect as $73SJx$useLayoutEffect, useRef as $73SJx$useRef } from \"react\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n// We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is\n// guarded by a check that it only runs on the client side.\n// eslint-disable-next-line rulesdir/useLayoutEffectRule\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\n\nconst $b5e257d569688ac6$var$defaultContext = {\n  prefix: String(Math.round(Math.random() * 10000000000)),\n  current: 0,\n  isSSR: false\n};\nconst $b5e257d569688ac6$var$SSRContext = /*#__PURE__*/(0, $73SJx$react).createContext($b5e257d569688ac6$var$defaultContext); // This is only used in React < 18.\n\nfunction $b5e257d569688ac6$var$LegacySSRProvider(props) {\n  let cur = (0, $73SJx$useContext)($b5e257d569688ac6$var$SSRContext);\n  let counter = $b5e257d569688ac6$var$useCounter(cur === $b5e257d569688ac6$var$defaultContext);\n  let [isSSR, setIsSSR] = (0, $73SJx$useState)(true);\n  let value = (0, $73SJx$useMemo)(() => ({\n    // If this is the first SSRProvider, start with an empty string prefix, otherwise\n    // append and increment the counter.\n    prefix: cur === $b5e257d569688ac6$var$defaultContext ? \"\" : `${cur.prefix}-${counter}`,\n    current: 0,\n    isSSR: isSSR\n  }), [cur, counter, isSSR]); // If on the client, and the component was initially server rendered,\n  // then schedule a layout effect to update the component after hydration.\n\n  if (typeof document !== \"undefined\") // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    (0, $73SJx$useLayoutEffect)(() => {\n      setIsSSR(false);\n    }, []);\n  return /*#__PURE__*/(0, $73SJx$react).createElement($b5e257d569688ac6$var$SSRContext.Provider, {\n    value: value\n  }, props.children);\n}\n\nlet $b5e257d569688ac6$var$warnedAboutSSRProvider = false;\n\nfunction $b5e257d569688ac6$export$9f8ac96af4b1b2ae(props) {\n  if (typeof (0, $73SJx$react)[\"useId\"] === \"function\") {\n    if (process.env.NODE_ENV !== \"test\" && !$b5e257d569688ac6$var$warnedAboutSSRProvider) {\n      console.warn(\"In React 18, SSRProvider is not necessary and is a noop. You can remove it from your app.\");\n      $b5e257d569688ac6$var$warnedAboutSSRProvider = true;\n    }\n\n    return /*#__PURE__*/(0, $73SJx$react).createElement((0, $73SJx$react).Fragment, null, props.children);\n  }\n\n  return /*#__PURE__*/(0, $73SJx$react).createElement($b5e257d569688ac6$var$LegacySSRProvider, props);\n}\n\nlet $b5e257d569688ac6$var$canUseDOM = Boolean(typeof window !== \"undefined\" && window.document && window.document.createElement);\nlet $b5e257d569688ac6$var$componentIds = new WeakMap();\n\nfunction $b5e257d569688ac6$var$useCounter() {\n  let isDisabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  let ctx = (0, $73SJx$useContext)($b5e257d569688ac6$var$SSRContext);\n  let ref = (0, $73SJx$useRef)(null); // eslint-disable-next-line rulesdir/pure-render\n\n  if (ref.current === null && !isDisabled) {\n    var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner; // In strict mode, React renders components twice, and the ref will be reset to null on the second render.\n    // This means our id counter will be incremented twice instead of once. This is a problem because on the\n    // server, components are only rendered once and so ids generated on the server won't match the client.\n    // In React 18, useId was introduced to solve this, but it is not available in older versions. So to solve this\n    // we need to use some React internals to access the underlying Fiber instance, which is stable between renders.\n    // This is exposed as ReactCurrentOwner in development, which is all we need since StrictMode only runs in development.\n    // To ensure that we only increment the global counter once, we store the starting id for this component in\n    // a weak map associated with the Fiber. On the second render, we reset the global counter to this value.\n    // Since React runs the second render immediately after the first, this is safe.\n    // @ts-ignore\n\n\n    let currentOwner = (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = (0, $73SJx$react).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === void 0 ? void 0 : (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner = _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner === void 0 ? void 0 : _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;\n\n    if (currentOwner) {\n      let prevComponentValue = $b5e257d569688ac6$var$componentIds.get(currentOwner);\n      if (prevComponentValue == null) // On the first render, and first call to useId, store the id and state in our weak map.\n        $b5e257d569688ac6$var$componentIds.set(currentOwner, {\n          id: ctx.current,\n          state: currentOwner.memoizedState\n        });else if (currentOwner.memoizedState !== prevComponentValue.state) {\n        // On the second render, the memoizedState gets reset by React.\n        // Reset the counter, and remove from the weak map so we don't\n        // do this for subsequent useId calls.\n        ctx.current = prevComponentValue.id;\n        $b5e257d569688ac6$var$componentIds.delete(currentOwner);\n      }\n    } // eslint-disable-next-line rulesdir/pure-render\n\n\n    ref.current = ++ctx.current;\n  } // eslint-disable-next-line rulesdir/pure-render\n\n\n  return ref.current;\n}\n\nfunction $b5e257d569688ac6$var$useLegacySSRSafeId(defaultId) {\n  let ctx = (0, $73SJx$useContext)($b5e257d569688ac6$var$SSRContext); // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n  // provide a warning to hint to the developer to add one.\n\n  if (ctx === $b5e257d569688ac6$var$defaultContext && !$b5e257d569688ac6$var$canUseDOM) console.warn(\"When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.\");\n  let counter = $b5e257d569688ac6$var$useCounter(!!defaultId);\n  let prefix = ctx === $b5e257d569688ac6$var$defaultContext && process.env.NODE_ENV === \"test\" ? \"react-aria\" : `react-aria${ctx.prefix}`;\n  return defaultId || `${prefix}-${counter}`;\n}\n\nfunction $b5e257d569688ac6$var$useModernSSRSafeId(defaultId) {\n  // @ts-ignore\n  let id = (0, $73SJx$react).useId();\n  let [didSSR] = (0, $73SJx$useState)($b5e257d569688ac6$export$535bd6ca7f90a273());\n  let prefix = didSSR || process.env.NODE_ENV === \"test\" ? \"react-aria\" : `react-aria${$b5e257d569688ac6$var$defaultContext.prefix}`;\n  return defaultId || `${prefix}-${id}`;\n}\n\nconst $b5e257d569688ac6$export$619500959fc48b26 = typeof (0, $73SJx$react)[\"useId\"] === \"function\" ? $b5e257d569688ac6$var$useModernSSRSafeId : $b5e257d569688ac6$var$useLegacySSRSafeId;\n\nfunction $b5e257d569688ac6$var$getSnapshot() {\n  return false;\n}\n\nfunction $b5e257d569688ac6$var$getServerSnapshot() {\n  return true;\n} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nfunction $b5e257d569688ac6$var$subscribe(onStoreChange) {\n  // noop\n  return () => {};\n}\n\nfunction $b5e257d569688ac6$export$535bd6ca7f90a273() {\n  // In React 18, we can use useSyncExternalStore to detect if we're server rendering or hydrating.\n  if (typeof (0, $73SJx$react)[\"useSyncExternalStore\"] === \"function\") return (0, $73SJx$react)[\"useSyncExternalStore\"]($b5e257d569688ac6$var$subscribe, $b5e257d569688ac6$var$getSnapshot, $b5e257d569688ac6$var$getServerSnapshot); // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  let cur = (0, $73SJx$useContext)($b5e257d569688ac6$var$SSRContext);\n  return cur.isSSR;\n}\n\nexport { $b5e257d569688ac6$export$9f8ac96af4b1b2ae as SSRProvider, $b5e257d569688ac6$export$619500959fc48b26 as useSSRSafeId, $b5e257d569688ac6$export$535bd6ca7f90a273 as useIsSSR };","map":{"version":3,"sources":["/home/coder/CYF/react-learn/Full-Stack-Project-Assessment/client/packages/@react-aria/ssr/src/index.ts","/home/coder/CYF/react-learn/Full-Stack-Project-Assessment/client/packages/@react-aria/ssr/src/SSRProvider.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nexport {SSRProvider, useSSRSafeId, useIsSSR} from './SSRProvider';\nexport type {SSRProviderProps} from './SSRProvider';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is\n// guarded by a check that it only runs on the client side.\n// eslint-disable-next-line rulesdir/useLayoutEffectRule\nimport React, {ReactNode, useContext, useLayoutEffect, useMemo, useRef, useState} from 'react';\n\n// To support SSR, the auto incrementing id counter is stored in a context. This allows\n// it to be reset on every request to ensure the client and server are consistent.\n// There is also a prefix string that is used to support async loading components\n// Each async boundary must be wrapped in an SSR provider, which appends to the prefix\n// and resets the current id counter. This ensures that async loaded components have\n// consistent ids regardless of the loading order.\ninterface SSRContextValue {\n  prefix: string,\n  current: number,\n  isSSR: boolean\n}\n\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\nconst defaultContext: SSRContextValue = {\n  prefix: String(Math.round(Math.random() * 10000000000)),\n  current: 0,\n  isSSR: false\n};\n\nconst SSRContext = React.createContext<SSRContextValue>(defaultContext);\n\nexport interface SSRProviderProps {\n  /** Your application here. */\n  children: ReactNode\n}\n\n// This is only used in React < 18.\nfunction LegacySSRProvider(props: SSRProviderProps): JSX.Element {\n  let cur = useContext(SSRContext);\n  let counter = useCounter(cur === defaultContext);\n  let [isSSR, setIsSSR] = useState(true);\n  let value: SSRContextValue = useMemo(() => ({\n    // If this is the first SSRProvider, start with an empty string prefix, otherwise\n    // append and increment the counter.\n    prefix: cur === defaultContext ? '' : `${cur.prefix}-${counter}`,\n    current: 0,\n    isSSR\n  }), [cur, counter, isSSR]);\n\n  // If on the client, and the component was initially server rendered,\n  // then schedule a layout effect to update the component after hydration.\n  if (typeof document !== 'undefined') {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useLayoutEffect(() => {\n      setIsSSR(false);\n    }, []);\n  }\n\n  return (\n    <SSRContext.Provider value={value}>\n      {props.children}\n    </SSRContext.Provider>\n  );\n}\n\nlet warnedAboutSSRProvider = false;\n\n/**\n * When using SSR with React Aria in React 16 or 17, applications must be wrapped in an SSRProvider.\n * This ensures that auto generated ids are consistent between the client and server.\n */\nexport function SSRProvider(props: SSRProviderProps): JSX.Element {\n  if (typeof React['useId'] === 'function') {\n    if (process.env.NODE_ENV !== 'test' && !warnedAboutSSRProvider) {\n      console.warn('In React 18, SSRProvider is not necessary and is a noop. You can remove it from your app.');\n      warnedAboutSSRProvider = true;\n    }\n    return <>{props.children}</>;\n  }\n  return <LegacySSRProvider {...props} />;\n}\n\nlet canUseDOM = Boolean(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nlet componentIds = new WeakMap();\n\nfunction useCounter(isDisabled = false) {\n  let ctx = useContext(SSRContext);\n  let ref = useRef<number | null>(null);\n  // eslint-disable-next-line rulesdir/pure-render\n  if (ref.current === null && !isDisabled) {\n    // In strict mode, React renders components twice, and the ref will be reset to null on the second render.\n    // This means our id counter will be incremented twice instead of once. This is a problem because on the\n    // server, components are only rendered once and so ids generated on the server won't match the client.\n    // In React 18, useId was introduced to solve this, but it is not available in older versions. So to solve this\n    // we need to use some React internals to access the underlying Fiber instance, which is stable between renders.\n    // This is exposed as ReactCurrentOwner in development, which is all we need since StrictMode only runs in development.\n    // To ensure that we only increment the global counter once, we store the starting id for this component in\n    // a weak map associated with the Fiber. On the second render, we reset the global counter to this value.\n    // Since React runs the second render immediately after the first, this is safe.\n    // @ts-ignore\n    let currentOwner = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED?.ReactCurrentOwner?.current;\n    if (currentOwner) {\n      let prevComponentValue = componentIds.get(currentOwner);\n      if (prevComponentValue == null) {\n        // On the first render, and first call to useId, store the id and state in our weak map.\n        componentIds.set(currentOwner, {\n          id: ctx.current,\n          state: currentOwner.memoizedState\n        });\n      } else if (currentOwner.memoizedState !== prevComponentValue.state) {\n        // On the second render, the memoizedState gets reset by React.\n        // Reset the counter, and remove from the weak map so we don't\n        // do this for subsequent useId calls.\n        ctx.current = prevComponentValue.id;\n        componentIds.delete(currentOwner);\n      }\n    }\n\n    // eslint-disable-next-line rulesdir/pure-render\n    ref.current = ++ctx.current;\n  }\n\n  // eslint-disable-next-line rulesdir/pure-render\n  return ref.current;\n}\n\nfunction useLegacySSRSafeId(defaultId?: string): string {\n  let ctx = useContext(SSRContext);\n\n  // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n  // provide a warning to hint to the developer to add one.\n  if (ctx === defaultContext && !canUseDOM) {\n    console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');\n  }\n\n  let counter = useCounter(!!defaultId);\n  let prefix = ctx === defaultContext && process.env.NODE_ENV === 'test' ? 'react-aria' : `react-aria${ctx.prefix}`;\n  return defaultId || `${prefix}-${counter}`;\n}\n\nfunction useModernSSRSafeId(defaultId?: string): string {\n  // @ts-ignore\n  let id = React.useId();\n  let [didSSR] = useState(useIsSSR());\n  let prefix = didSSR || process.env.NODE_ENV === 'test' ? 'react-aria' : `react-aria${defaultContext.prefix}`;\n  return defaultId || `${prefix}-${id}`;\n}\n\n// Use React.useId in React 18 if available, otherwise fall back to our old implementation.\n/** @private */\nexport const useSSRSafeId = typeof React['useId'] === 'function' ? useModernSSRSafeId : useLegacySSRSafeId;\n\nfunction getSnapshot() {\n  return false;\n}\n\nfunction getServerSnapshot() {\n  return true;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction subscribe(onStoreChange: () => void): () => void {\n  // noop\n  return () => {};\n}\n\n/**\n * Returns whether the component is currently being server side rendered or\n * hydrated on the client. Can be used to delay browser-specific rendering\n * until after hydration.\n */\nexport function useIsSSR(): boolean {\n  // In React 18, we can use useSyncExternalStore to detect if we're server rendering or hydrating.\n  if (typeof React['useSyncExternalStore'] === 'function') {\n    return React['useSyncExternalStore'](subscribe, getSnapshot, getServerSnapshot);\n  }\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  let cur = useContext(SSRContext);\n  return cur.isSSR;\n}\n"]},"metadata":{},"sourceType":"module"}