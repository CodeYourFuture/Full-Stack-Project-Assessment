{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = value => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n\n    var rejected = value => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n\n    var step = x => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n}; // src/YouTube.tsx\n\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport isEqual from \"fast-deep-equal\";\nimport youTubePlayer from \"youtube-player\";\n\nfunction shouldUpdateVideo(prevProps, props) {\n  var _a, _b;\n\n  if (prevProps.videoId !== props.videoId) {\n    return true;\n  }\n\n  const prevVars = ((_a = prevProps.opts) == null ? void 0 : _a.playerVars) || {};\n  const vars = ((_b = props.opts) == null ? void 0 : _b.playerVars) || {};\n  return prevVars.start !== vars.start || prevVars.end !== vars.end;\n}\n\nfunction filterResetOptions() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return __spreadProps(__spreadValues({}, opts), {\n    height: 0,\n    width: 0,\n    playerVars: __spreadProps(__spreadValues({}, opts.playerVars), {\n      autoplay: 0,\n      start: 0,\n      end: 0\n    })\n  });\n}\n\nfunction shouldResetPlayer(prevProps, props) {\n  return prevProps.videoId !== props.videoId || !isEqual(filterResetOptions(prevProps.opts), filterResetOptions(props.opts));\n}\n\nfunction shouldUpdatePlayer(prevProps, props) {\n  var _a, _b, _c, _d;\n\n  return prevProps.id !== props.id || prevProps.className !== props.className || ((_a = prevProps.opts) == null ? void 0 : _a.width) !== ((_b = props.opts) == null ? void 0 : _b.width) || ((_c = prevProps.opts) == null ? void 0 : _c.height) !== ((_d = props.opts) == null ? void 0 : _d.height) || prevProps.iframeClassName !== props.iframeClassName || prevProps.title !== props.title;\n}\n\nvar defaultProps = {\n  videoId: \"\",\n  id: \"\",\n  className: \"\",\n  iframeClassName: \"\",\n  style: {},\n  title: \"\",\n  loading: void 0,\n  opts: {},\n  onReady: () => {},\n  onError: () => {},\n  onPlay: () => {},\n  onPause: () => {},\n  onEnd: () => {},\n  onStateChange: () => {},\n  onPlaybackRateChange: () => {},\n  onPlaybackQualityChange: () => {}\n};\nvar propTypes = {\n  videoId: PropTypes.string,\n  id: PropTypes.string,\n  className: PropTypes.string,\n  iframeClassName: PropTypes.string,\n  style: PropTypes.object,\n  title: PropTypes.string,\n  loading: PropTypes.oneOf([\"lazy\", \"eager\"]),\n  opts: PropTypes.objectOf(PropTypes.any),\n  onReady: PropTypes.func,\n  onError: PropTypes.func,\n  onPlay: PropTypes.func,\n  onPause: PropTypes.func,\n  onEnd: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onPlaybackRateChange: PropTypes.func,\n  onPlaybackQualityChange: PropTypes.func\n};\n\nvar _YouTube = class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.destroyPlayerPromise = void 0;\n\n    this.onPlayerReady = event => {\n      var _a, _b;\n\n      return (_b = (_a = this.props).onReady) == null ? void 0 : _b.call(_a, event);\n    };\n\n    this.onPlayerError = event => {\n      var _a, _b;\n\n      return (_b = (_a = this.props).onError) == null ? void 0 : _b.call(_a, event);\n    };\n\n    this.onPlayerStateChange = event => {\n      var _a, _b, _c, _d, _e, _f, _g, _h;\n\n      (_b = (_a = this.props).onStateChange) == null ? void 0 : _b.call(_a, event);\n\n      switch (event.data) {\n        case _YouTube.PlayerState.ENDED:\n          (_d = (_c = this.props).onEnd) == null ? void 0 : _d.call(_c, event);\n          break;\n\n        case _YouTube.PlayerState.PLAYING:\n          (_f = (_e = this.props).onPlay) == null ? void 0 : _f.call(_e, event);\n          break;\n\n        case _YouTube.PlayerState.PAUSED:\n          (_h = (_g = this.props).onPause) == null ? void 0 : _h.call(_g, event);\n          break;\n\n        default:\n      }\n    };\n\n    this.onPlayerPlaybackRateChange = event => {\n      var _a, _b;\n\n      return (_b = (_a = this.props).onPlaybackRateChange) == null ? void 0 : _b.call(_a, event);\n    };\n\n    this.onPlayerPlaybackQualityChange = event => {\n      var _a, _b;\n\n      return (_b = (_a = this.props).onPlaybackQualityChange) == null ? void 0 : _b.call(_a, event);\n    };\n\n    this.destroyPlayer = () => {\n      if (this.internalPlayer) {\n        this.destroyPlayerPromise = this.internalPlayer.destroy().then(() => this.destroyPlayerPromise = void 0);\n        return this.destroyPlayerPromise;\n      }\n\n      return Promise.resolve();\n    };\n\n    this.createPlayer = () => {\n      if (typeof document === \"undefined\") return;\n\n      if (this.destroyPlayerPromise) {\n        this.destroyPlayerPromise.then(this.createPlayer);\n        return;\n      }\n\n      const playerOpts = __spreadProps(__spreadValues({}, this.props.opts), {\n        videoId: this.props.videoId\n      });\n\n      this.internalPlayer = youTubePlayer(this.container, playerOpts);\n      this.internalPlayer.on(\"ready\", this.onPlayerReady);\n      this.internalPlayer.on(\"error\", this.onPlayerError);\n      this.internalPlayer.on(\"stateChange\", this.onPlayerStateChange);\n      this.internalPlayer.on(\"playbackRateChange\", this.onPlayerPlaybackRateChange);\n      this.internalPlayer.on(\"playbackQualityChange\", this.onPlayerPlaybackQualityChange);\n\n      if (this.props.title || this.props.loading) {\n        this.internalPlayer.getIframe().then(iframe => {\n          if (this.props.title) iframe.setAttribute(\"title\", this.props.title);\n          if (this.props.loading) iframe.setAttribute(\"loading\", this.props.loading);\n        });\n      }\n    };\n\n    this.resetPlayer = () => this.destroyPlayer().then(this.createPlayer);\n\n    this.updatePlayer = () => {\n      var _a;\n\n      (_a = this.internalPlayer) == null ? void 0 : _a.getIframe().then(iframe => {\n        if (this.props.id) iframe.setAttribute(\"id\", this.props.id);else iframe.removeAttribute(\"id\");\n        if (this.props.iframeClassName) iframe.setAttribute(\"class\", this.props.iframeClassName);else iframe.removeAttribute(\"class\");\n        if (this.props.opts && this.props.opts.width) iframe.setAttribute(\"width\", this.props.opts.width.toString());else iframe.removeAttribute(\"width\");\n        if (this.props.opts && this.props.opts.height) iframe.setAttribute(\"height\", this.props.opts.height.toString());else iframe.removeAttribute(\"height\");\n        if (this.props.title) iframe.setAttribute(\"title\", this.props.title);else iframe.setAttribute(\"title\", \"YouTube video player\");\n        if (this.props.loading) iframe.setAttribute(\"loading\", this.props.loading);else iframe.removeAttribute(\"loading\");\n      });\n    };\n\n    this.getInternalPlayer = () => {\n      return this.internalPlayer;\n    };\n\n    this.updateVideo = () => {\n      var _a, _b, _c, _d;\n\n      if (typeof this.props.videoId === \"undefined\" || this.props.videoId === null) {\n        (_a = this.internalPlayer) == null ? void 0 : _a.stopVideo();\n        return;\n      }\n\n      let autoplay = false;\n      const opts = {\n        videoId: this.props.videoId\n      };\n\n      if ((_b = this.props.opts) == null ? void 0 : _b.playerVars) {\n        autoplay = this.props.opts.playerVars.autoplay === 1;\n\n        if (\"start\" in this.props.opts.playerVars) {\n          opts.startSeconds = this.props.opts.playerVars.start;\n        }\n\n        if (\"end\" in this.props.opts.playerVars) {\n          opts.endSeconds = this.props.opts.playerVars.end;\n        }\n      }\n\n      if (autoplay) {\n        (_c = this.internalPlayer) == null ? void 0 : _c.loadVideoById(opts);\n        return;\n      }\n\n      (_d = this.internalPlayer) == null ? void 0 : _d.cueVideoById(opts);\n    };\n\n    this.refContainer = container => {\n      this.container = container;\n    };\n\n    this.container = null;\n    this.internalPlayer = null;\n  }\n\n  componentDidMount() {\n    this.createPlayer();\n  }\n\n  componentDidUpdate(prevProps) {\n    return __async(this, null, function* () {\n      if (shouldUpdatePlayer(prevProps, this.props)) {\n        this.updatePlayer();\n      }\n\n      if (shouldResetPlayer(prevProps, this.props)) {\n        yield this.resetPlayer();\n      }\n\n      if (shouldUpdateVideo(prevProps, this.props)) {\n        this.updateVideo();\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.destroyPlayer();\n  }\n\n  render() {\n    return /* @__PURE__ */React.createElement(\"div\", {\n      className: this.props.className,\n      style: this.props.style\n    }, /* @__PURE__ */React.createElement(\"div\", {\n      id: this.props.id,\n      className: this.props.iframeClassName,\n      ref: this.refContainer\n    }));\n  }\n\n};\n\nvar YouTube = _YouTube;\nYouTube.propTypes = propTypes;\nYouTube.defaultProps = defaultProps;\nYouTube.PlayerState = {\n  UNSTARTED: -1,\n  ENDED: 0,\n  PLAYING: 1,\n  PAUSED: 2,\n  BUFFERING: 3,\n  CUED: 5\n};\nvar YouTube_default = YouTube;\nexport { YouTube_default as default };","map":{"version":3,"sources":["/home/coder/Documents/CYF/Back-End/Full-Stack-Project-Assessment/client/node_modules/react-youtube/src/YouTube.tsx"],"names":[],"mappings":"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","sourcesContent":["/** @jsxRuntime classic */\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport isEqual from 'fast-deep-equal';\nimport youTubePlayer from 'youtube-player';\nimport type { YouTubePlayer, Options } from 'youtube-player/dist/types';\n\n/**\n * Check whether a `props` change should result in the video being updated.\n */\nfunction shouldUpdateVideo(prevProps: YouTubeProps, props: YouTubeProps) {\n  // A changing video should always trigger an update\n  if (prevProps.videoId !== props.videoId) {\n    return true;\n  }\n\n  // Otherwise, a change in the start/end time playerVars also requires a player\n  // update.\n  const prevVars = prevProps.opts?.playerVars || {};\n  const vars = props.opts?.playerVars || {};\n\n  return prevVars.start !== vars.start || prevVars.end !== vars.end;\n}\n\n/**\n * Neutralize API options that only require a video update, leaving only options\n * that require a player reset. The results can then be compared to see if a\n * player reset is necessary.\n */\nfunction filterResetOptions(opts: Options = {}) {\n  return {\n    ...opts,\n    height: 0,\n    width: 0,\n    playerVars: {\n      ...opts.playerVars,\n      autoplay: 0,\n      start: 0,\n      end: 0,\n    },\n  };\n}\n\n/**\n * Check whether a `props` change should result in the player being reset.\n * The player is reset when the `props.opts` change, except if the only change\n * is in the `start` and `end` playerVars, because a video update can deal with\n * those.\n */\nfunction shouldResetPlayer(prevProps: YouTubeProps, props: YouTubeProps) {\n  return (\n    prevProps.videoId !== props.videoId || !isEqual(filterResetOptions(prevProps.opts), filterResetOptions(props.opts))\n  );\n}\n\n/**\n * Check whether a props change should result in an update of player.\n */\nfunction shouldUpdatePlayer(prevProps: YouTubeProps, props: YouTubeProps) {\n  return (\n    prevProps.id !== props.id ||\n    prevProps.className !== props.className ||\n    prevProps.opts?.width !== props.opts?.width ||\n    prevProps.opts?.height !== props.opts?.height ||\n    prevProps.iframeClassName !== props.iframeClassName ||\n    prevProps.title !== props.title\n  );\n}\n\ntype YoutubePlayerCueVideoOptions = {\n  videoId: string;\n  startSeconds?: number;\n  endSeconds?: number;\n  suggestedQuality?: string;\n};\n\nexport { YouTubePlayer };\n\nexport type YouTubeEvent<T = any> = {\n  data: T;\n  target: YouTubePlayer;\n};\n\nexport type YouTubeProps = {\n  /**\n   * The YouTube video ID.\n   *\n   * Examples\n   * - https://www.youtube.com/watch?v=XxVg_s8xAms (`XxVg_s8xAms` is the ID)\n   * - https://www.youtube.com/embed/-DX3vJiqxm4 (`-DX3vJiqxm4` is the ID)\n   */\n  videoId?: string;\n  /**\n   * Custom ID for the player element\n   */\n  id?: string;\n  /**\n   * Custom class name for the player element\n   */\n  className?: string;\n  /**\n   * Custom class name for the iframe element\n   */\n  iframeClassName?: string;\n  /**\n   * Custom style for the player container element\n   */\n  style?: React.CSSProperties;\n  /**\n   * Title of the video for the iframe's title tag.\n   */\n  title?: React.IframeHTMLAttributes<HTMLIFrameElement>['title'];\n  /**\n   * Indicates how the browser should load the iframe\n   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-loading}\n   */\n  loading?: React.IframeHTMLAttributes<HTMLIFrameElement>['loading'];\n  /**\n   * An object that specifies player options\n   * {@link https://developers.google.com/youtube/iframe_api_reference#Loading_a_Video_Player}\n   */\n  opts?: Options;\n  /**\n   * This event fires whenever a player has finished loading and is ready to begin receiving API calls.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onReady}\n   */\n  onReady?: (event: YouTubeEvent) => void;\n  /**\n   * This event fires if an error occurs in the player.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onError}\n   */\n  onError?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires when the layer's state changes to PlayerState.PLAYING.\n   */\n  onPlay?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires when the layer's state changes to PlayerState.PAUSED.\n   */\n  onPause?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires when the layer's state changes to PlayerState.ENDED.\n   */\n  onEnd?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires whenever the player's state changes.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onStateChange}\n   */\n  onStateChange?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires whenever the video playback quality changes.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onPlaybackRateChange}\n   */\n  onPlaybackRateChange?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires whenever the video playback rate changes.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onPlaybackQualityChange}\n   */\n  onPlaybackQualityChange?: (event: YouTubeEvent<string>) => void;\n};\n\nconst defaultProps: YouTubeProps = {\n  videoId: '',\n  id: '',\n  className: '',\n  iframeClassName: '',\n  style: {},\n  title: '',\n  loading: undefined,\n  opts: {},\n  onReady: () => {},\n  onError: () => {},\n  onPlay: () => {},\n  onPause: () => {},\n  onEnd: () => {},\n  onStateChange: () => {},\n  onPlaybackRateChange: () => {},\n  onPlaybackQualityChange: () => {},\n};\n\nconst propTypes = {\n  videoId: PropTypes.string,\n  id: PropTypes.string,\n  className: PropTypes.string,\n  iframeClassName: PropTypes.string,\n  style: PropTypes.object,\n  title: PropTypes.string,\n  loading: PropTypes.oneOf(['lazy', 'eager']),\n  opts: PropTypes.objectOf(PropTypes.any),\n  onReady: PropTypes.func,\n  onError: PropTypes.func,\n  onPlay: PropTypes.func,\n  onPause: PropTypes.func,\n  onEnd: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onPlaybackRateChange: PropTypes.func,\n  onPlaybackQualityChange: PropTypes.func,\n};\n\nclass YouTube extends React.Component<YouTubeProps> {\n  static propTypes = propTypes;\n  static defaultProps = defaultProps;\n\n  /**\n   * Expose PlayerState constants for convenience. These constants can also be\n   * accessed through the global YT object after the YouTube IFrame API is instantiated.\n   * https://developers.google.com/youtube/iframe_api_reference#onStateChange\n   */\n  static PlayerState = {\n    UNSTARTED: -1,\n    ENDED: 0,\n    PLAYING: 1,\n    PAUSED: 2,\n    BUFFERING: 3,\n    CUED: 5,\n  };\n\n  container: HTMLDivElement | null;\n  internalPlayer: YouTubePlayer | null;\n\n  constructor(props: any) {\n    super(props);\n\n    this.container = null;\n    this.internalPlayer = null;\n  }\n\n  /**\n   * Note: The `youtube-player` package that is used promisifies all YouTube\n   * Player API calls, which introduces a delay of a tick before it actually\n   * gets destroyed.\n   *\n   * The promise to destroy the player is stored here so we can make sure to\n   * only re-create the Player after it's been destroyed.\n   *\n   * See: https://github.com/tjallingt/react-youtube/issues/355\n   */\n  destroyPlayerPromise: Promise<void> | undefined = undefined;\n\n  componentDidMount() {\n    this.createPlayer();\n  }\n\n  async componentDidUpdate(prevProps: YouTubeProps) {\n    if (shouldUpdatePlayer(prevProps, this.props)) {\n      this.updatePlayer();\n    }\n\n    if (shouldResetPlayer(prevProps, this.props)) {\n      await this.resetPlayer();\n    }\n\n    if (shouldUpdateVideo(prevProps, this.props)) {\n      this.updateVideo();\n    }\n  }\n\n  componentWillUnmount() {\n    this.destroyPlayer();\n  }\n\n  /**\n   * This event fires whenever a player has finished loading and is ready to begin receiving API calls.\n   * https://developers.google.com/youtube/iframe_api_reference#onReady\n   */\n  onPlayerReady = (event: YouTubeEvent) => this.props.onReady?.(event);\n\n  /**\n   * This event fires if an error occurs in the player.\n   * https://developers.google.com/youtube/iframe_api_reference#onError\n   */\n  onPlayerError = (event: YouTubeEvent<number>) => this.props.onError?.(event);\n\n  /**\n   * This event fires whenever the video playback quality changes.\n   * https://developers.google.com/youtube/iframe_api_reference#onStateChange\n   */\n  onPlayerStateChange = (event: YouTubeEvent<number>) => {\n    this.props.onStateChange?.(event);\n    // @ts-ignore\n    switch (event.data) {\n      case YouTube.PlayerState.ENDED:\n        this.props.onEnd?.(event);\n        break;\n\n      case YouTube.PlayerState.PLAYING:\n        this.props.onPlay?.(event);\n        break;\n\n      case YouTube.PlayerState.PAUSED:\n        this.props.onPause?.(event);\n        break;\n\n      default:\n    }\n  };\n\n  /**\n   * This event fires whenever the video playback quality changes.\n   * https://developers.google.com/youtube/iframe_api_reference#onPlaybackRateChange\n   */\n  onPlayerPlaybackRateChange = (event: YouTubeEvent<number>) => this.props.onPlaybackRateChange?.(event);\n\n  /**\n   * This event fires whenever the video playback rate changes.\n   * https://developers.google.com/youtube/iframe_api_reference#onPlaybackQualityChange\n   */\n  onPlayerPlaybackQualityChange = (event: YouTubeEvent<string>) => this.props.onPlaybackQualityChange?.(event);\n\n  /**\n   * Destroy the YouTube Player using its async API and store the promise so we\n   * can await before re-creating it.\n   */\n  destroyPlayer = () => {\n    if (this.internalPlayer) {\n      this.destroyPlayerPromise = this.internalPlayer.destroy().then(() => (this.destroyPlayerPromise = undefined));\n      return this.destroyPlayerPromise;\n    }\n    return Promise.resolve();\n  };\n\n  /**\n   * Initialize the YouTube Player API on the container and attach event handlers\n   */\n  createPlayer = () => {\n    // do not attempt to create a player server-side, it won't work\n    if (typeof document === 'undefined') return;\n    if (this.destroyPlayerPromise) {\n      // We need to first await the existing player to be destroyed before\n      // we can re-create it.\n      this.destroyPlayerPromise.then(this.createPlayer);\n      return;\n    }\n    // create player\n    const playerOpts: Options = {\n      ...this.props.opts,\n      // preload the `videoId` video if one is already given\n      videoId: this.props.videoId,\n    };\n    this.internalPlayer = youTubePlayer(this.container!, playerOpts);\n    // attach event handlers\n    this.internalPlayer.on('ready', this.onPlayerReady as any);\n    this.internalPlayer.on('error', this.onPlayerError as any);\n    this.internalPlayer.on('stateChange', this.onPlayerStateChange as any);\n    this.internalPlayer.on('playbackRateChange', this.onPlayerPlaybackRateChange as any);\n    this.internalPlayer.on('playbackQualityChange', this.onPlayerPlaybackQualityChange as any);\n    if (this.props.title || this.props.loading) {\n      this.internalPlayer.getIframe().then((iframe) => {\n        if (this.props.title) iframe.setAttribute('title', this.props.title);\n        if (this.props.loading) iframe.setAttribute('loading', this.props.loading);\n      });\n    }\n  };\n\n  /**\n   * Shorthand for destroying and then re-creating the YouTube Player\n   */\n  resetPlayer = () => this.destroyPlayer().then(this.createPlayer);\n\n  /**\n   * Method to update the id and class of the YouTube Player iframe.\n   * React should update this automatically but since the YouTube Player API\n   * replaced the DIV that is mounted by React we need to do this manually.\n   */\n  updatePlayer = () => {\n    this.internalPlayer?.getIframe().then((iframe) => {\n      if (this.props.id) iframe.setAttribute('id', this.props.id);\n      else iframe.removeAttribute('id');\n      if (this.props.iframeClassName) iframe.setAttribute('class', this.props.iframeClassName);\n      else iframe.removeAttribute('class');\n      if (this.props.opts && this.props.opts.width) iframe.setAttribute('width', this.props.opts.width.toString());\n      else iframe.removeAttribute('width');\n      if (this.props.opts && this.props.opts.height) iframe.setAttribute('height', this.props.opts.height.toString());\n      else iframe.removeAttribute('height');\n      if (this.props.title) iframe.setAttribute('title', this.props.title);\n      else iframe.setAttribute('title', 'YouTube video player');\n      if (this.props.loading) iframe.setAttribute('loading', this.props.loading);\n      else iframe.removeAttribute('loading');\n    });\n  };\n\n  /**\n   *  Method to return the internalPlayer object.\n   */\n  getInternalPlayer = () => {\n    return this.internalPlayer;\n  };\n\n  /**\n   * Call YouTube Player API methods to update the currently playing video.\n   * Depending on the `opts.playerVars.autoplay` this function uses one of two\n   * YouTube Player API methods to update the video.\n   */\n  updateVideo = () => {\n    if (typeof this.props.videoId === 'undefined' || this.props.videoId === null) {\n      this.internalPlayer?.stopVideo();\n      return;\n    }\n\n    // set queueing options\n    let autoplay = false;\n    const opts: YoutubePlayerCueVideoOptions = {\n      videoId: this.props.videoId,\n    };\n\n    if (this.props.opts?.playerVars) {\n      autoplay = this.props.opts.playerVars.autoplay === 1;\n      if ('start' in this.props.opts.playerVars) {\n        opts.startSeconds = this.props.opts.playerVars.start;\n      }\n      if ('end' in this.props.opts.playerVars) {\n        opts.endSeconds = this.props.opts.playerVars.end;\n      }\n    }\n\n    // if autoplay is enabled loadVideoById\n    if (autoplay) {\n      this.internalPlayer?.loadVideoById(opts);\n      return;\n    }\n    // default behaviour just cues the video\n    this.internalPlayer?.cueVideoById(opts);\n  };\n\n  refContainer = (container: HTMLDivElement) => {\n    this.container = container;\n  };\n\n  render() {\n    return (\n      <div className={this.props.className} style={this.props.style}>\n        <div id={this.props.id} className={this.props.iframeClassName} ref={this.refContainer} />\n      </div>\n    );\n  }\n}\n\nexport default YouTube;\n"]},"metadata":{},"sourceType":"module"}