{"ast":null,"code":"'use strict';\n\nfunction oldBrowser() {\n  throw new Error('secure random number generation not supported by this browser\\nuse chrome, FireFox or Internet Explorer 11');\n}\nvar safeBuffer = require('safe-buffer');\nvar randombytes = require('randombytes');\nvar Buffer = safeBuffer.Buffer;\nvar kBufferMaxLength = safeBuffer.kMaxLength;\nvar crypto = global.crypto || global.msCrypto;\nvar kMaxUint32 = Math.pow(2, 32) - 1;\nfunction assertOffset(offset, length) {\n  if (typeof offset !== 'number' || offset !== offset) {\n    // eslint-disable-line no-self-compare\n    throw new TypeError('offset must be a number');\n  }\n  if (offset > kMaxUint32 || offset < 0) {\n    throw new TypeError('offset must be a uint32');\n  }\n  if (offset > kBufferMaxLength || offset > length) {\n    throw new RangeError('offset out of range');\n  }\n}\nfunction assertSize(size, offset, length) {\n  if (typeof size !== 'number' || size !== size) {\n    // eslint-disable-line no-self-compare\n    throw new TypeError('size must be a number');\n  }\n  if (size > kMaxUint32 || size < 0) {\n    throw new TypeError('size must be a uint32');\n  }\n  if (size + offset > length || size > kBufferMaxLength) {\n    throw new RangeError('buffer too small');\n  }\n}\nif (crypto && crypto.getRandomValues || !process.browser) {\n  exports.randomFill = randomFill;\n  exports.randomFillSync = randomFillSync;\n} else {\n  exports.randomFill = oldBrowser;\n  exports.randomFillSync = oldBrowser;\n}\nfunction randomFill(buf, offset, size, cb) {\n  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n    throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array');\n  }\n  if (typeof offset === 'function') {\n    cb = offset;\n    offset = 0;\n    size = buf.length;\n  } else if (typeof size === 'function') {\n    cb = size;\n    size = buf.length - offset;\n  } else if (typeof cb !== 'function') {\n    throw new TypeError('\"cb\" argument must be a function');\n  }\n  assertOffset(offset, buf.length);\n  assertSize(size, offset, buf.length);\n  return actualFill(buf, offset, size, cb);\n}\nfunction actualFill(buf, offset, size, cb) {\n  if (process.browser) {\n    var ourBuf = buf.buffer;\n    var uint = new Uint8Array(ourBuf, offset, size);\n    crypto.getRandomValues(uint);\n    if (cb) {\n      process.nextTick(function () {\n        cb(null, buf);\n      });\n      return;\n    }\n    return buf;\n  }\n  if (cb) {\n    randombytes(size, function (err, bytes) {\n      if (err) {\n        return cb(err);\n      }\n      bytes.copy(buf, offset);\n      cb(null, buf);\n    });\n    return;\n  }\n  var bytes = randombytes(size);\n  bytes.copy(buf, offset);\n  return buf;\n}\nfunction randomFillSync(buf, offset, size) {\n  if (typeof offset === 'undefined') {\n    offset = 0;\n  }\n  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n    throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array');\n  }\n  assertOffset(offset, buf.length);\n  if (size === undefined) size = buf.length - offset;\n  assertSize(size, offset, buf.length);\n  return actualFill(buf, offset, size);\n}","map":null,"metadata":{},"sourceType":"script"}