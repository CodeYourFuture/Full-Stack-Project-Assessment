{"ast":null,"code":"import { useState, useEffect } from 'react';\n/**\n * Fetch and load an image for programatic use such as in a `<canvas>` element.\n *\n * @param imageOrUrl The `HtmlImageElement` or image url to load\n * @param crossOrigin The `crossorigin` attribute to set\n *\n * ```ts\n * const { image, error } = useImage('/static/kittens.png')\n * const ref = useRef<HTMLCanvasElement>()\n *\n * useEffect(() => {\n *   const ctx = ref.current.getContext('2d')\n *\n *   if (image) {\n *     ctx.drawImage(image, 0, 0)\n *   }\n * }, [ref, image])\n *\n * return (\n *   <>\n *     {error && \"there was a problem loading the image\"}\n *     <canvas ref={ref} />\n *   </>\n * ```\n */\n\nexport default function useImage(imageOrUrl, crossOrigin) {\n  const [state, setState] = useState({\n    image: null,\n    error: null\n  });\n  useEffect(() => {\n    if (!imageOrUrl) return undefined;\n    let image;\n\n    if (typeof imageOrUrl === 'string') {\n      image = new Image();\n      if (crossOrigin) image.crossOrigin = crossOrigin;\n      image.src = imageOrUrl;\n    } else {\n      image = imageOrUrl;\n\n      if (image.complete && image.naturalHeight > 0) {\n        setState({\n          image,\n          error: null\n        });\n        return;\n      }\n    }\n\n    function onLoad() {\n      setState({\n        image,\n        error: null\n      });\n    }\n\n    function onError(error) {\n      setState({\n        image,\n        error\n      });\n    }\n\n    image.addEventListener('load', onLoad);\n    image.addEventListener('error', onError);\n    return () => {\n      image.removeEventListener('load', onLoad);\n      image.removeEventListener('error', onError);\n    };\n  }, [imageOrUrl, crossOrigin]);\n  return state;\n}","map":{"version":3,"sources":["/home/coder/CYF/react-learn/Full-Stack-Project-Assessment/client/node_modules/@restart/hooks/esm/useImage.js"],"names":["useState","useEffect","useImage","imageOrUrl","crossOrigin","state","setState","image","error","undefined","Image","src","complete","naturalHeight","onLoad","onError","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,QAAT,CAAkBC,UAAlB,EAA8BC,WAA9B,EAA2C;AACxD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC;AACjCO,IAAAA,KAAK,EAAE,IAD0B;AAEjCC,IAAAA,KAAK,EAAE;AAF0B,GAAD,CAAlC;AAIAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACE,UAAL,EAAiB,OAAOM,SAAP;AACjB,QAAIF,KAAJ;;AACA,QAAI,OAAOJ,UAAP,KAAsB,QAA1B,EAAoC;AAClCI,MAAAA,KAAK,GAAG,IAAIG,KAAJ,EAAR;AACA,UAAIN,WAAJ,EAAiBG,KAAK,CAACH,WAAN,GAAoBA,WAApB;AACjBG,MAAAA,KAAK,CAACI,GAAN,GAAYR,UAAZ;AACD,KAJD,MAIO;AACLI,MAAAA,KAAK,GAAGJ,UAAR;;AACA,UAAII,KAAK,CAACK,QAAN,IAAkBL,KAAK,CAACM,aAAN,GAAsB,CAA5C,EAA+C;AAC7CP,QAAAA,QAAQ,CAAC;AACPC,UAAAA,KADO;AAEPC,UAAAA,KAAK,EAAE;AAFA,SAAD,CAAR;AAIA;AACD;AACF;;AACD,aAASM,MAAT,GAAkB;AAChBR,MAAAA,QAAQ,CAAC;AACPC,QAAAA,KADO;AAEPC,QAAAA,KAAK,EAAE;AAFA,OAAD,CAAR;AAID;;AACD,aAASO,OAAT,CAAiBP,KAAjB,EAAwB;AACtBF,MAAAA,QAAQ,CAAC;AACPC,QAAAA,KADO;AAEPC,QAAAA;AAFO,OAAD,CAAR;AAID;;AACDD,IAAAA,KAAK,CAACS,gBAAN,CAAuB,MAAvB,EAA+BF,MAA/B;AACAP,IAAAA,KAAK,CAACS,gBAAN,CAAuB,OAAvB,EAAgCD,OAAhC;AACA,WAAO,MAAM;AACXR,MAAAA,KAAK,CAACU,mBAAN,CAA0B,MAA1B,EAAkCH,MAAlC;AACAP,MAAAA,KAAK,CAACU,mBAAN,CAA0B,OAA1B,EAAmCF,OAAnC;AACD,KAHD;AAID,GAnCQ,EAmCN,CAACZ,UAAD,EAAaC,WAAb,CAnCM,CAAT;AAoCA,SAAOC,KAAP;AACD","sourcesContent":["import { useState, useEffect } from 'react';\n/**\n * Fetch and load an image for programatic use such as in a `<canvas>` element.\n *\n * @param imageOrUrl The `HtmlImageElement` or image url to load\n * @param crossOrigin The `crossorigin` attribute to set\n *\n * ```ts\n * const { image, error } = useImage('/static/kittens.png')\n * const ref = useRef<HTMLCanvasElement>()\n *\n * useEffect(() => {\n *   const ctx = ref.current.getContext('2d')\n *\n *   if (image) {\n *     ctx.drawImage(image, 0, 0)\n *   }\n * }, [ref, image])\n *\n * return (\n *   <>\n *     {error && \"there was a problem loading the image\"}\n *     <canvas ref={ref} />\n *   </>\n * ```\n */\nexport default function useImage(imageOrUrl, crossOrigin) {\n  const [state, setState] = useState({\n    image: null,\n    error: null\n  });\n  useEffect(() => {\n    if (!imageOrUrl) return undefined;\n    let image;\n    if (typeof imageOrUrl === 'string') {\n      image = new Image();\n      if (crossOrigin) image.crossOrigin = crossOrigin;\n      image.src = imageOrUrl;\n    } else {\n      image = imageOrUrl;\n      if (image.complete && image.naturalHeight > 0) {\n        setState({\n          image,\n          error: null\n        });\n        return;\n      }\n    }\n    function onLoad() {\n      setState({\n        image,\n        error: null\n      });\n    }\n    function onError(error) {\n      setState({\n        image,\n        error\n      });\n    }\n    image.addEventListener('load', onLoad);\n    image.addEventListener('error', onError);\n    return () => {\n      image.removeEventListener('load', onLoad);\n      image.removeEventListener('error', onError);\n    };\n  }, [imageOrUrl, crossOrigin]);\n  return state;\n}"]},"metadata":{},"sourceType":"module"}