{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { DropdownContext } from '../useDropdown/DropdownContext';\nimport { DropdownActionTypes } from '../useDropdown/useDropdown.types';\nimport { useButton } from '../useButton/useButton';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuButton API](https://mui.com/base-ui/react-menu/hooks-api/#use-menu-button)\n */\n\nexport function useMenuButton() {\n  var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _parameters$disabled = parameters.disabled,\n      disabled = _parameters$disabled === void 0 ? false : _parameters$disabled,\n      focusableWhenDisabled = parameters.focusableWhenDisabled,\n      externalRef = parameters.rootRef;\n  var menuContext = React.useContext(DropdownContext);\n\n  if (menuContext === null) {\n    throw new Error('useMenuButton: no menu context available.');\n  }\n\n  var state = menuContext.state,\n      dispatch = menuContext.dispatch,\n      registerTrigger = menuContext.registerTrigger,\n      popupId = menuContext.popupId;\n\n  var _useButton = useButton({\n    disabled: disabled,\n    focusableWhenDisabled: focusableWhenDisabled,\n    rootRef: externalRef\n  }),\n      getButtonRootProps = _useButton.getRootProps,\n      buttonRootRef = _useButton.rootRef,\n      active = _useButton.active;\n\n  var handleRef = useForkRef(buttonRootRef, registerTrigger);\n\n  var createHandleClick = function createHandleClick(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onClic;\n\n      (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n\n      if (event.defaultMuiPrevented) {\n        return;\n      }\n\n      dispatch({\n        type: DropdownActionTypes.toggle,\n        event: event\n      });\n    };\n  };\n\n  var createHandleKeyDown = function createHandleKeyDown(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onKeyD;\n\n      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);\n\n      if (event.defaultMuiPrevented) {\n        return;\n      }\n\n      if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n        event.preventDefault();\n        dispatch({\n          type: DropdownActionTypes.open,\n          event: event\n        });\n      }\n    };\n  };\n\n  var getOwnRootProps = function getOwnRootProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      onClick: createHandleClick(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers)\n    };\n  };\n\n  var getRootProps = function getRootProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var getCombinedProps = combineHooksSlotProps(getButtonRootProps, getOwnRootProps);\n    return _extends({}, getCombinedProps(otherHandlers), {\n      'aria-haspopup': 'menu',\n      'aria-expanded': state.open,\n      'aria-controls': popupId,\n      ref: handleRef\n    });\n  };\n\n  return {\n    active: active,\n    getRootProps: getRootProps,\n    open: state.open,\n    rootRef: handleRef\n  };\n}","map":{"version":3,"sources":["/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@mui/base/useMenuButton/useMenuButton.js"],"names":["_extends","React","unstable_useForkRef","useForkRef","DropdownContext","DropdownActionTypes","useButton","combineHooksSlotProps","useMenuButton","parameters","disabled","focusableWhenDisabled","externalRef","rootRef","menuContext","useContext","Error","state","dispatch","registerTrigger","popupId","getButtonRootProps","getRootProps","buttonRootRef","active","handleRef","createHandleClick","otherHandlers","event","_otherHandlers$onClic","onClick","call","defaultMuiPrevented","type","toggle","createHandleKeyDown","_otherHandlers$onKeyD","onKeyDown","key","preventDefault","open","getOwnRootProps","getCombinedProps","ref"],"mappings":"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","sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { DropdownContext } from '../useDropdown/DropdownContext';\nimport { DropdownActionTypes } from '../useDropdown/useDropdown.types';\nimport { useButton } from '../useButton/useButton';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\n\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuButton API](https://mui.com/base-ui/react-menu/hooks-api/#use-menu-button)\n */\nexport function useMenuButton(parameters = {}) {\n  const {\n    disabled = false,\n    focusableWhenDisabled,\n    rootRef: externalRef\n  } = parameters;\n  const menuContext = React.useContext(DropdownContext);\n  if (menuContext === null) {\n    throw new Error('useMenuButton: no menu context available.');\n  }\n  const {\n    state,\n    dispatch,\n    registerTrigger,\n    popupId\n  } = menuContext;\n  const {\n    getRootProps: getButtonRootProps,\n    rootRef: buttonRootRef,\n    active\n  } = useButton({\n    disabled,\n    focusableWhenDisabled,\n    rootRef: externalRef\n  });\n  const handleRef = useForkRef(buttonRootRef, registerTrigger);\n  const createHandleClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n    (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    dispatch({\n      type: DropdownActionTypes.toggle,\n      event\n    });\n  };\n  const createHandleKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      dispatch({\n        type: DropdownActionTypes.open,\n        event\n      });\n    }\n  };\n  const getOwnRootProps = (otherHandlers = {}) => ({\n    onClick: createHandleClick(otherHandlers),\n    onKeyDown: createHandleKeyDown(otherHandlers)\n  });\n  const getRootProps = (otherHandlers = {}) => {\n    const getCombinedProps = combineHooksSlotProps(getButtonRootProps, getOwnRootProps);\n    return _extends({}, getCombinedProps(otherHandlers), {\n      'aria-haspopup': 'menu',\n      'aria-expanded': state.open,\n      'aria-controls': popupId,\n      ref: handleRef\n    });\n  };\n  return {\n    active,\n    getRootProps,\n    open: state.open,\n    rootRef: handleRef\n  };\n}"]},"metadata":{},"sourceType":"module"}