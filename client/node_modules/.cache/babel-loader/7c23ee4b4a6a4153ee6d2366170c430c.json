{"ast":null,"code":"function simpleClamp(val) {\n  let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MIN_SAFE_INTEGER;\n  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.MAX_SAFE_INTEGER;\n  return Math.max(min, Math.min(val, max));\n}\n\nexport function clamp(val) {\n  let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MIN_SAFE_INTEGER;\n  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.MAX_SAFE_INTEGER;\n  let stepProp = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : NaN;\n\n  if (Number.isNaN(stepProp)) {\n    return simpleClamp(val, min, max);\n  }\n\n  const step = stepProp || 1;\n  const remainder = val % step;\n  const positivity = Math.sign(remainder);\n\n  if (Math.abs(remainder) > step / 2) {\n    return simpleClamp(val + positivity * (step - Math.abs(remainder)), min, max);\n  }\n\n  return simpleClamp(val - positivity * Math.abs(remainder), min, max);\n}\nexport function isNumber(val) {\n  return typeof val === 'number' && !Number.isNaN(val) && Number.isFinite(val);\n}","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/@mui/base/unstable_useNumberInput/utils.js"],"names":["simpleClamp","val","min","Number","MIN_SAFE_INTEGER","max","MAX_SAFE_INTEGER","Math","clamp","stepProp","NaN","isNaN","step","remainder","positivity","sign","abs","isNumber","isFinite"],"mappings":"AAAA,SAASA,WAAT,CAAqBC,GAArB,EAAwF;AAAA,MAA9DC,GAA8D,uEAAxDC,MAAM,CAACC,gBAAiD;AAAA,MAA/BC,GAA+B,uEAAzBF,MAAM,CAACG,gBAAkB;AACtF,SAAOC,IAAI,CAACF,GAAL,CAASH,GAAT,EAAcK,IAAI,CAACL,GAAL,CAASD,GAAT,EAAcI,GAAd,CAAd,CAAP;AACD;;AACD,OAAO,SAASG,KAAT,CAAeP,GAAf,EAAkG;AAAA,MAA9EC,GAA8E,uEAAxEC,MAAM,CAACC,gBAAiE;AAAA,MAA/CC,GAA+C,uEAAzCF,MAAM,CAACG,gBAAkC;AAAA,MAAhBG,QAAgB,uEAALC,GAAK;;AACvG,MAAIP,MAAM,CAACQ,KAAP,CAAaF,QAAb,CAAJ,EAA4B;AAC1B,WAAOT,WAAW,CAACC,GAAD,EAAMC,GAAN,EAAWG,GAAX,CAAlB;AACD;;AACD,QAAMO,IAAI,GAAGH,QAAQ,IAAI,CAAzB;AACA,QAAMI,SAAS,GAAGZ,GAAG,GAAGW,IAAxB;AACA,QAAME,UAAU,GAAGP,IAAI,CAACQ,IAAL,CAAUF,SAAV,CAAnB;;AACA,MAAIN,IAAI,CAACS,GAAL,CAASH,SAAT,IAAsBD,IAAI,GAAG,CAAjC,EAAoC;AAClC,WAAOZ,WAAW,CAACC,GAAG,GAAGa,UAAU,IAAIF,IAAI,GAAGL,IAAI,CAACS,GAAL,CAASH,SAAT,CAAX,CAAjB,EAAkDX,GAAlD,EAAuDG,GAAvD,CAAlB;AACD;;AACD,SAAOL,WAAW,CAACC,GAAG,GAAGa,UAAU,GAAGP,IAAI,CAACS,GAAL,CAASH,SAAT,CAApB,EAAyCX,GAAzC,EAA8CG,GAA9C,CAAlB;AACD;AACD,OAAO,SAASY,QAAT,CAAkBhB,GAAlB,EAAuB;AAC5B,SAAO,OAAOA,GAAP,KAAe,QAAf,IAA2B,CAACE,MAAM,CAACQ,KAAP,CAAaV,GAAb,CAA5B,IAAiDE,MAAM,CAACe,QAAP,CAAgBjB,GAAhB,CAAxD;AACD","sourcesContent":["function simpleClamp(val, min = Number.MIN_SAFE_INTEGER, max = Number.MAX_SAFE_INTEGER) {\r\n  return Math.max(min, Math.min(val, max));\r\n}\r\nexport function clamp(val, min = Number.MIN_SAFE_INTEGER, max = Number.MAX_SAFE_INTEGER, stepProp = NaN) {\r\n  if (Number.isNaN(stepProp)) {\r\n    return simpleClamp(val, min, max);\r\n  }\r\n  const step = stepProp || 1;\r\n  const remainder = val % step;\r\n  const positivity = Math.sign(remainder);\r\n  if (Math.abs(remainder) > step / 2) {\r\n    return simpleClamp(val + positivity * (step - Math.abs(remainder)), min, max);\r\n  }\r\n  return simpleClamp(val - positivity * Math.abs(remainder), min, max);\r\n}\r\nexport function isNumber(val) {\r\n  return typeof val === 'number' && !Number.isNaN(val) && Number.isFinite(val);\r\n}"]},"metadata":{},"sourceType":"module"}