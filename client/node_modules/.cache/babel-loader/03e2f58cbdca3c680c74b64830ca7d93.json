{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@mui/utils';\nimport { DropdownContext } from '../useDropdown/DropdownContext';\nimport { useDropdown } from '../useDropdown/useDropdown';\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/)\n *\n * API:\n *\n * - [Dropdown API](https://mui.com/base-ui/react-menu/components-api/#dropdown)\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction Dropdown(props) {\n  var children = props.children,\n      open = props.open,\n      defaultOpen = props.defaultOpen,\n      onOpenChange = props.onOpenChange;\n\n  var _useDropdown = useDropdown({\n    defaultOpen: defaultOpen,\n    onOpenChange: onOpenChange,\n    open: open\n  }),\n      contextValue = _useDropdown.contextValue;\n\n  return /*#__PURE__*/_jsx(DropdownContext.Provider, {\n    value: contextValue,\n    children: children\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Dropdown.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * If `true`, the dropdown is initially open.\n   */\n  defaultOpen: PropTypes.bool,\n\n  /**\n   * Callback fired when the component requests to be opened or closed.\n   */\n  onOpenChange: PropTypes.func,\n\n  /**\n   * Allows to control whether the dropdown is open.\n   * This is a controlled counterpart of `defaultOpen`.\n   */\n  open: PropTypes.bool\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Dropdown['propTypes' + ''] = exactProp(Dropdown.propTypes);\n}\n\nexport { Dropdown };","map":{"version":3,"sources":["/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@mui/base/Dropdown/Dropdown.js"],"names":["React","PropTypes","exactProp","DropdownContext","useDropdown","jsx","_jsx","Dropdown","props","children","open","defaultOpen","onOpenChange","contextValue","Provider","value","process","env","NODE_ENV","propTypes","node","bool","func"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,MACEC,QADF,GAKID,KALJ,CACEC,QADF;AAAA,MAEEC,IAFF,GAKIF,KALJ,CAEEE,IAFF;AAAA,MAGEC,WAHF,GAKIH,KALJ,CAGEG,WAHF;AAAA,MAIEC,YAJF,GAKIJ,KALJ,CAIEI,YAJF;;AAMA,qBAEIR,WAAW,CAAC;AACdO,IAAAA,WAAW,EAAXA,WADc;AAEdC,IAAAA,YAAY,EAAZA,YAFc;AAGdF,IAAAA,IAAI,EAAJA;AAHc,GAAD,CAFf;AAAA,MACEG,YADF,gBACEA,YADF;;AAOA,SAAO,aAAaP,IAAI,CAACH,eAAe,CAACW,QAAjB,EAA2B;AACjDC,IAAAA,KAAK,EAAEF,YAD0C;AAEjDJ,IAAAA,QAAQ,EAAEA;AAFuC,GAA3B,CAAxB;AAID;;AACDO,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCX,QAAQ,CAACY;AAAU;AAAnB,EAA4C;AAClF;AACA;AACA;AACA;;AACA;AACF;AACA;AACEV,EAAAA,QAAQ,EAAER,SAAS,CAACmB,IAR8D;;AASlF;AACF;AACA;AACET,EAAAA,WAAW,EAAEV,SAAS,CAACoB,IAZ2D;;AAalF;AACF;AACA;AACET,EAAAA,YAAY,EAAEX,SAAS,CAACqB,IAhB0D;;AAiBlF;AACF;AACA;AACA;AACEZ,EAAAA,IAAI,EAAET,SAAS,CAACoB;AArBkE,CAApF,GAsBI,KAAK,CAtBT;;AAuBA,IAAIL,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACAX,EAAAA,QAAQ,CAAC,cAAc,EAAf,CAAR,GAA6BL,SAAS,CAACK,QAAQ,CAACY,SAAV,CAAtC;AACD;;AACD,SAASZ,QAAT","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@mui/utils';\nimport { DropdownContext } from '../useDropdown/DropdownContext';\nimport { useDropdown } from '../useDropdown/useDropdown';\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/)\n *\n * API:\n *\n * - [Dropdown API](https://mui.com/base-ui/react-menu/components-api/#dropdown)\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction Dropdown(props) {\n  const {\n    children,\n    open,\n    defaultOpen,\n    onOpenChange\n  } = props;\n  const {\n    contextValue\n  } = useDropdown({\n    defaultOpen,\n    onOpenChange,\n    open\n  });\n  return /*#__PURE__*/_jsx(DropdownContext.Provider, {\n    value: contextValue,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? Dropdown.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * If `true`, the dropdown is initially open.\n   */\n  defaultOpen: PropTypes.bool,\n  /**\n   * Callback fired when the component requests to be opened or closed.\n   */\n  onOpenChange: PropTypes.func,\n  /**\n   * Allows to control whether the dropdown is open.\n   * This is a controlled counterpart of `defaultOpen`.\n   */\n  open: PropTypes.bool\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Dropdown['propTypes' + ''] = exactProp(Dropdown.propTypes);\n}\nexport { Dropdown };"]},"metadata":{},"sourceType":"module"}