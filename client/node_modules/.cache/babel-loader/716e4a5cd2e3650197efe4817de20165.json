{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId } from '@mui/utils';\nimport { useListItem } from '../useList';\nimport { useCompoundItem } from '../utils/useCompoundItem';\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useOption API](https://mui.com/base-ui/react-select/hooks-api/#use-option)\n */\n\nexport function useOption(params) {\n  const {\n    value,\n    label,\n    disabled,\n    rootRef: optionRefParam,\n    id: idParam\n  } = params;\n  const {\n    getRootProps: getListItemProps,\n    rootRef: listItemRefHandler,\n    highlighted,\n    selected\n  } = useListItem({\n    item: value\n  });\n  const id = useId(idParam);\n  const optionRef = React.useRef(null);\n  const selectOption = React.useMemo(() => ({\n    disabled,\n    label,\n    value,\n    ref: optionRef,\n    id\n  }), [disabled, label, value, id]);\n  const {\n    index\n  } = useCompoundItem(value, selectOption);\n  const handleRef = useForkRef(optionRefParam, optionRef, listItemRefHandler);\n  return {\n    getRootProps: function () {\n      let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _extends({}, otherHandlers, getListItemProps(otherHandlers), {\n        id,\n        ref: handleRef,\n        role: 'option',\n        'aria-selected': selected\n      });\n    },\n    highlighted,\n    index,\n    selected,\n    rootRef: handleRef\n  };\n}","map":{"version":3,"sources":["/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@mui/base/useOption/useOption.js"],"names":["_extends","React","unstable_useForkRef","useForkRef","unstable_useId","useId","useListItem","useCompoundItem","useOption","params","value","label","disabled","rootRef","optionRefParam","id","idParam","getRootProps","getListItemProps","listItemRefHandler","highlighted","selected","item","optionRef","useRef","selectOption","useMemo","ref","index","handleRef","otherHandlers","role"],"mappings":"AAAA;;AAEA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,mBAAmB,IAAIC,UAAhC,EAA4CC,cAAc,IAAIC,KAA9D,QAA2E,YAA3E;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBC,MAAnB,EAA2B;AAChC,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,OAAO,EAAEC,cAJL;AAKJC,IAAAA,EAAE,EAAEC;AALA,MAMFP,MANJ;AAOA,QAAM;AACJQ,IAAAA,YAAY,EAAEC,gBADV;AAEJL,IAAAA,OAAO,EAAEM,kBAFL;AAGJC,IAAAA,WAHI;AAIJC,IAAAA;AAJI,MAKFf,WAAW,CAAC;AACdgB,IAAAA,IAAI,EAAEZ;AADQ,GAAD,CALf;AAQA,QAAMK,EAAE,GAAGV,KAAK,CAACW,OAAD,CAAhB;AACA,QAAMO,SAAS,GAAGtB,KAAK,CAACuB,MAAN,CAAa,IAAb,CAAlB;AACA,QAAMC,YAAY,GAAGxB,KAAK,CAACyB,OAAN,CAAc,OAAO;AACxCd,IAAAA,QADwC;AAExCD,IAAAA,KAFwC;AAGxCD,IAAAA,KAHwC;AAIxCiB,IAAAA,GAAG,EAAEJ,SAJmC;AAKxCR,IAAAA;AALwC,GAAP,CAAd,EAMjB,CAACH,QAAD,EAAWD,KAAX,EAAkBD,KAAlB,EAAyBK,EAAzB,CANiB,CAArB;AAOA,QAAM;AACJa,IAAAA;AADI,MAEFrB,eAAe,CAACG,KAAD,EAAQe,YAAR,CAFnB;AAGA,QAAMI,SAAS,GAAG1B,UAAU,CAACW,cAAD,EAAiBS,SAAjB,EAA4BJ,kBAA5B,CAA5B;AACA,SAAO;AACLF,IAAAA,YAAY,EAAE;AAAA,UAACa,aAAD,uEAAiB,EAAjB;AAAA,aAAwB9B,QAAQ,CAAC,EAAD,EAAK8B,aAAL,EAAoBZ,gBAAgB,CAACY,aAAD,CAApC,EAAqD;AACjGf,QAAAA,EADiG;AAEjGY,QAAAA,GAAG,EAAEE,SAF4F;AAGjGE,QAAAA,IAAI,EAAE,QAH2F;AAIjG,yBAAiBV;AAJgF,OAArD,CAAhC;AAAA,KADT;AAOLD,IAAAA,WAPK;AAQLQ,IAAAA,KARK;AASLP,IAAAA,QATK;AAULR,IAAAA,OAAO,EAAEgB;AAVJ,GAAP;AAYD","sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId } from '@mui/utils';\nimport { useListItem } from '../useList';\nimport { useCompoundItem } from '../utils/useCompoundItem';\n\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useOption API](https://mui.com/base-ui/react-select/hooks-api/#use-option)\n */\nexport function useOption(params) {\n  const {\n    value,\n    label,\n    disabled,\n    rootRef: optionRefParam,\n    id: idParam\n  } = params;\n  const {\n    getRootProps: getListItemProps,\n    rootRef: listItemRefHandler,\n    highlighted,\n    selected\n  } = useListItem({\n    item: value\n  });\n  const id = useId(idParam);\n  const optionRef = React.useRef(null);\n  const selectOption = React.useMemo(() => ({\n    disabled,\n    label,\n    value,\n    ref: optionRef,\n    id\n  }), [disabled, label, value, id]);\n  const {\n    index\n  } = useCompoundItem(value, selectOption);\n  const handleRef = useForkRef(optionRefParam, optionRef, listItemRefHandler);\n  return {\n    getRootProps: (otherHandlers = {}) => _extends({}, otherHandlers, getListItemProps(otherHandlers), {\n      id,\n      ref: handleRef,\n      role: 'option',\n      'aria-selected': selected\n    }),\n    highlighted,\n    index,\n    selected,\n    rootRef: handleRef\n  };\n}"]},"metadata":{},"sourceType":"module"}