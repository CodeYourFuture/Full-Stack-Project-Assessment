{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"colorSchemes\", \"components\"],\n      _excluded2 = [\"light\"];\nimport { deepmerge } from '@mui/utils';\nimport cssVarsParser from './cssVarsParser';\n\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  const {\n    colorSchemes = {}\n  } = theme,\n        otherTheme = _objectWithoutPropertiesLoose(theme, _excluded);\n\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n\n  const {\n    light\n  } = colorSchemes,\n        otherColorSchemes = _objectWithoutPropertiesLoose(colorSchemes, _excluded2);\n\n  Object.entries(otherColorSchemes || {}).forEach(_ref => {\n    let [key, scheme] = _ref;\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n\n  if (light) {\n    // light color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(light, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap.light = {\n      css,\n      vars\n    };\n  }\n\n  const generateCssVars = colorScheme => {\n    if (!colorScheme) {\n      return {\n        css: _extends({}, rootCss),\n        vars: rootVars\n      };\n    }\n\n    return {\n      css: _extends({}, colorSchemesMap[colorScheme].css),\n      vars: colorSchemesMap[colorScheme].vars\n    };\n  };\n\n  return {\n    vars: themeVars,\n    generateCssVars\n  };\n}\n\nexport default prepareCssVars;","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/@mui/system/esm/cssVars/prepareCssVars.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","deepmerge","cssVarsParser","prepareCssVars","theme","parserConfig","colorSchemes","otherTheme","vars","rootVars","css","rootCss","varsWithDefaults","rootVarsWithDefaults","themeVars","colorSchemesMap","light","otherColorSchemes","Object","entries","forEach","key","scheme","generateCssVars","colorScheme"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,MAAMC,SAAS,GAAG,CAAC,cAAD,EAAiB,YAAjB,CAAlB;AAAA,MACEC,UAAU,GAAG,CAAC,OAAD,CADf;AAEA,SAASC,SAAT,QAA0B,YAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,YAA/B,EAA6C;AAC3C;AACA,QAAM;AACFC,IAAAA,YAAY,GAAG;AADb,MAEAF,KAFN;AAAA,QAGEG,UAAU,GAAGT,6BAA6B,CAACM,KAAD,EAAQL,SAAR,CAH5C;;AAIA,QAAM;AACJS,IAAAA,IAAI,EAAEC,QADF;AAEJC,IAAAA,GAAG,EAAEC,OAFD;AAGJC,IAAAA,gBAAgB,EAAEC;AAHd,MAIFX,aAAa,CAACK,UAAD,EAAaF,YAAb,CAJjB;AAKA,MAAIS,SAAS,GAAGD,oBAAhB;AACA,QAAME,eAAe,GAAG,EAAxB;;AACA,QAAM;AACFC,IAAAA;AADE,MAEAV,YAFN;AAAA,QAGEW,iBAAiB,GAAGnB,6BAA6B,CAACQ,YAAD,EAAeN,UAAf,CAHnD;;AAIAkB,EAAAA,MAAM,CAACC,OAAP,CAAeF,iBAAiB,IAAI,EAApC,EAAwCG,OAAxC,CAAgD,QAAmB;AAAA,QAAlB,CAACC,GAAD,EAAMC,MAAN,CAAkB;AACjE,UAAM;AACJd,MAAAA,IADI;AAEJE,MAAAA,GAFI;AAGJE,MAAAA;AAHI,QAIFV,aAAa,CAACoB,MAAD,EAASjB,YAAT,CAJjB;AAKAS,IAAAA,SAAS,GAAGb,SAAS,CAACa,SAAD,EAAYF,gBAAZ,CAArB;AACAG,IAAAA,eAAe,CAACM,GAAD,CAAf,GAAuB;AACrBX,MAAAA,GADqB;AAErBF,MAAAA;AAFqB,KAAvB;AAID,GAXD;;AAYA,MAAIQ,KAAJ,EAAW;AACT;AACA,UAAM;AACJN,MAAAA,GADI;AAEJF,MAAAA,IAFI;AAGJI,MAAAA;AAHI,QAIFV,aAAa,CAACc,KAAD,EAAQX,YAAR,CAJjB;AAKAS,IAAAA,SAAS,GAAGb,SAAS,CAACa,SAAD,EAAYF,gBAAZ,CAArB;AACAG,IAAAA,eAAe,CAACC,KAAhB,GAAwB;AACtBN,MAAAA,GADsB;AAEtBF,MAAAA;AAFsB,KAAxB;AAID;;AACD,QAAMe,eAAe,GAAGC,WAAW,IAAI;AACrC,QAAI,CAACA,WAAL,EAAkB;AAChB,aAAO;AACLd,QAAAA,GAAG,EAAEb,QAAQ,CAAC,EAAD,EAAKc,OAAL,CADR;AAELH,QAAAA,IAAI,EAAEC;AAFD,OAAP;AAID;;AACD,WAAO;AACLC,MAAAA,GAAG,EAAEb,QAAQ,CAAC,EAAD,EAAKkB,eAAe,CAACS,WAAD,CAAf,CAA6Bd,GAAlC,CADR;AAELF,MAAAA,IAAI,EAAEO,eAAe,CAACS,WAAD,CAAf,CAA6BhB;AAF9B,KAAP;AAID,GAXD;;AAYA,SAAO;AACLA,IAAAA,IAAI,EAAEM,SADD;AAELS,IAAAA;AAFK,GAAP;AAID;;AACD,eAAepB,cAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nconst _excluded = [\"colorSchemes\", \"components\"],\r\n  _excluded2 = [\"light\"];\r\nimport { deepmerge } from '@mui/utils';\r\nimport cssVarsParser from './cssVarsParser';\r\nfunction prepareCssVars(theme, parserConfig) {\r\n  // @ts-ignore - ignore components do not exist\r\n  const {\r\n      colorSchemes = {}\r\n    } = theme,\r\n    otherTheme = _objectWithoutPropertiesLoose(theme, _excluded);\r\n  const {\r\n    vars: rootVars,\r\n    css: rootCss,\r\n    varsWithDefaults: rootVarsWithDefaults\r\n  } = cssVarsParser(otherTheme, parserConfig);\r\n  let themeVars = rootVarsWithDefaults;\r\n  const colorSchemesMap = {};\r\n  const {\r\n      light\r\n    } = colorSchemes,\r\n    otherColorSchemes = _objectWithoutPropertiesLoose(colorSchemes, _excluded2);\r\n  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {\r\n    const {\r\n      vars,\r\n      css,\r\n      varsWithDefaults\r\n    } = cssVarsParser(scheme, parserConfig);\r\n    themeVars = deepmerge(themeVars, varsWithDefaults);\r\n    colorSchemesMap[key] = {\r\n      css,\r\n      vars\r\n    };\r\n  });\r\n  if (light) {\r\n    // light color scheme vars should be merged last to set as default\r\n    const {\r\n      css,\r\n      vars,\r\n      varsWithDefaults\r\n    } = cssVarsParser(light, parserConfig);\r\n    themeVars = deepmerge(themeVars, varsWithDefaults);\r\n    colorSchemesMap.light = {\r\n      css,\r\n      vars\r\n    };\r\n  }\r\n  const generateCssVars = colorScheme => {\r\n    if (!colorScheme) {\r\n      return {\r\n        css: _extends({}, rootCss),\r\n        vars: rootVars\r\n      };\r\n    }\r\n    return {\r\n      css: _extends({}, colorSchemesMap[colorScheme].css),\r\n      vars: colorSchemesMap[colorScheme].vars\r\n    };\r\n  };\r\n  return {\r\n    vars: themeVars,\r\n    generateCssVars\r\n  };\r\n}\r\nexport default prepareCssVars;"]},"metadata":{},"sourceType":"module"}