{"ast":null,"code":"'use strict';\n\nimport bind from './helpers/bind.js'; // utils is a library of generic helper functions non-specific to axios\n\nconst {\n  toString\n} = Object.prototype;\nconst {\n  getPrototypeOf\n} = Object;\n\nconst kindOf = (cache => thing => {\n  const str = toString.call(thing);\n  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = type => {\n  type = type.toLowerCase();\n  return thing => kindOf(thing) === type;\n};\n\nconst typeOfTest = type => thing => typeof thing === type;\n/**\r\n * Determine if a value is an Array\r\n *\r\n * @param {Object} val The value to test\r\n *\r\n * @returns {boolean} True if value is an Array, otherwise false\r\n */\n\n\nconst {\n  isArray\n} = Array;\n/**\r\n * Determine if a value is undefined\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if the value is undefined, otherwise false\r\n */\n\nconst isUndefined = typeOfTest('undefined');\n/**\r\n * Determine if a value is a Buffer\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a Buffer, otherwise false\r\n */\n\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n/**\r\n * Determine if a value is an ArrayBuffer\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\r\n */\n\n\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\n/**\r\n * Determine if a value is a view on an ArrayBuffer\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\r\n */\n\nfunction isArrayBufferView(val) {\n  let result;\n\n  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = val && val.buffer && isArrayBuffer(val.buffer);\n  }\n\n  return result;\n}\n/**\r\n * Determine if a value is a String\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a String, otherwise false\r\n */\n\n\nconst isString = typeOfTest('string');\n/**\r\n * Determine if a value is a Function\r\n *\r\n * @param {*} val The value to test\r\n * @returns {boolean} True if value is a Function, otherwise false\r\n */\n\nconst isFunction = typeOfTest('function');\n/**\r\n * Determine if a value is a Number\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a Number, otherwise false\r\n */\n\nconst isNumber = typeOfTest('number');\n/**\r\n * Determine if a value is an Object\r\n *\r\n * @param {*} thing The value to test\r\n *\r\n * @returns {boolean} True if value is an Object, otherwise false\r\n */\n\nconst isObject = thing => thing !== null && typeof thing === 'object';\n/**\r\n * Determine if a value is a Boolean\r\n *\r\n * @param {*} thing The value to test\r\n * @returns {boolean} True if value is a Boolean, otherwise false\r\n */\n\n\nconst isBoolean = thing => thing === true || thing === false;\n/**\r\n * Determine if a value is a plain Object\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a plain Object, otherwise false\r\n */\n\n\nconst isPlainObject = val => {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\n};\n/**\r\n * Determine if a value is a Date\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a Date, otherwise false\r\n */\n\n\nconst isDate = kindOfTest('Date');\n/**\r\n * Determine if a value is a File\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a File, otherwise false\r\n */\n\nconst isFile = kindOfTest('File');\n/**\r\n * Determine if a value is a Blob\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a Blob, otherwise false\r\n */\n\nconst isBlob = kindOfTest('Blob');\n/**\r\n * Determine if a value is a FileList\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a File, otherwise false\r\n */\n\nconst isFileList = kindOfTest('FileList');\n/**\r\n * Determine if a value is a Stream\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a Stream, otherwise false\r\n */\n\nconst isStream = val => isObject(val) && isFunction(val.pipe);\n/**\r\n * Determine if a value is a FormData\r\n *\r\n * @param {*} thing The value to test\r\n *\r\n * @returns {boolean} True if value is an FormData, otherwise false\r\n */\n\n\nconst isFormData = thing => {\n  let kind;\n  return thing && (typeof FormData === 'function' && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === 'formdata' || // detect form-data instance\n  kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]'));\n};\n/**\r\n * Determine if a value is a URLSearchParams object\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\r\n */\n\n\nconst isURLSearchParams = kindOfTest('URLSearchParams');\n/**\r\n * Trim excess whitespace off the beginning and end of a string\r\n *\r\n * @param {String} str The String to trim\r\n *\r\n * @returns {String} The String freed of excess whitespace\r\n */\n\nconst trim = str => str.trim ? str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n/**\r\n * Iterate over an Array or an Object invoking a function for each item.\r\n *\r\n * If `obj` is an Array callback will be called passing\r\n * the value, index, and complete array for each item.\r\n *\r\n * If 'obj' is an Object callback will be called passing\r\n * the value, key, and complete object for each property.\r\n *\r\n * @param {Object|Array} obj The object to iterate\r\n * @param {Function} fn The callback to invoke for each item\r\n *\r\n * @param {Boolean} [allOwnKeys = false]\r\n * @returns {any}\r\n */\n\n\nfunction forEach(obj, fn) {\n  let {\n    allOwnKeys = false\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  let i;\n  let l; // Force an array if not already something iterable\n\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n\nfunction findKey(obj, key) {\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n\n  let _key;\n\n  while (i-- > 0) {\n    _key = keys[i];\n\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n\n  return null;\n}\n\nconst _global = (() => {\n  /*eslint no-undef:0*/\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  return typeof self !== \"undefined\" ? self : typeof window !== 'undefined' ? window : global;\n})();\n\nconst isContextDefined = context => !isUndefined(context) && context !== _global;\n/**\r\n * Accepts varargs expecting each argument to be an object, then\r\n * immutably merges the properties of each object and returns result.\r\n *\r\n * When multiple objects contain the same key the later object in\r\n * the arguments list will take precedence.\r\n *\r\n * Example:\r\n *\r\n * ```js\r\n * var result = merge({foo: 123}, {foo: 456});\r\n * console.log(result.foo); // outputs 456\r\n * ```\r\n *\r\n * @param {Object} obj1 Object to merge\r\n *\r\n * @returns {Object} Result of all merge properties\r\n */\n\n\nfunction\n  /* obj1, obj2, obj3, ... */\nmerge() {\n  const {\n    caseless\n  } = isContextDefined(this) && this || {};\n  const result = {};\n\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  };\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n\n  return result;\n}\n/**\r\n * Extends object a by mutably adding to it the properties of object b.\r\n *\r\n * @param {Object} a The object to be extended\r\n * @param {Object} b The object to copy properties from\r\n * @param {Object} thisArg The object to bind function to\r\n *\r\n * @param {Boolean} [allOwnKeys]\r\n * @returns {Object} The resulting value of object a\r\n */\n\n\nconst extend = function (a, b, thisArg) {\n  let {\n    allOwnKeys\n  } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {\n    allOwnKeys\n  });\n  return a;\n};\n/**\r\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\r\n *\r\n * @param {string} content with BOM\r\n *\r\n * @returns {string} content value without BOM\r\n */\n\n\nconst stripBOM = content => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n\n  return content;\n};\n/**\r\n * Inherit the prototype methods from one constructor into another\r\n * @param {function} constructor\r\n * @param {function} superConstructor\r\n * @param {object} [props]\r\n * @param {object} [descriptors]\r\n *\r\n * @returns {void}\r\n */\n\n\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, 'super', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n};\n/**\r\n * Resolve object with deep prototype chain to a flat object\r\n * @param {Object} sourceObj source object\r\n * @param {Object} [destObj]\r\n * @param {Function|Boolean} [filter]\r\n * @param {Function} [propFilter]\r\n *\r\n * @returns {Object}\r\n */\n\n\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n  destObj = destObj || {}; // eslint-disable-next-line no-eq-null,eqeqeq\n\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n\n    while (i-- > 0) {\n      prop = props[i];\n\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n};\n/**\r\n * Determines whether a string ends with the characters of a specified string\r\n *\r\n * @param {String} str\r\n * @param {String} searchString\r\n * @param {Number} [position= 0]\r\n *\r\n * @returns {boolean}\r\n */\n\n\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n};\n/**\r\n * Returns new array from array like object or null if failed\r\n *\r\n * @param {*} [thing]\r\n *\r\n * @returns {?Array}\r\n */\n\n\nconst toArray = thing => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n\n  return arr;\n};\n/**\r\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\r\n * thing passed in is an instance of Uint8Array\r\n *\r\n * @param {TypedArray}\r\n *\r\n * @returns {Array}\r\n */\n// eslint-disable-next-line func-names\n\n\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\n/**\r\n * For each entry in the object, call the function with the key and value.\r\n *\r\n * @param {Object<any, any>} obj - The object to iterate over.\r\n * @param {Function} fn - The function to call for each entry.\r\n *\r\n * @returns {void}\r\n */\n\n\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[Symbol.iterator];\n  const iterator = generator.call(obj);\n  let result;\n\n  while ((result = iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n};\n/**\r\n * It takes a regular expression and a string, and returns an array of all the matches\r\n *\r\n * @param {string} regExp - The regular expression to match against.\r\n * @param {string} str - The string to search.\r\n *\r\n * @returns {Array<boolean>}\r\n */\n\n\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n};\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\n\n\nconst isHTMLForm = kindOfTest('HTMLFormElement');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g, function replacer(m, p1, p2) {\n    return p1.toUpperCase() + p2;\n  });\n};\n/* Creating a function that will check if an object has a property. */\n\n\nconst hasOwnProperty = (_ref => {\n  let {\n    hasOwnProperty\n  } = _ref;\n  return (obj, prop) => hasOwnProperty.call(obj, prop);\n})(Object.prototype);\n/**\r\n * Determine if a value is a RegExp object\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a RegExp object, otherwise false\r\n */\n\n\nconst isRegExp = kindOfTest('RegExp');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n  forEach(descriptors, (descriptor, name) => {\n    let ret;\n\n    if ((ret = reducer(descriptor, name, obj)) !== false) {\n      reducedDescriptors[name] = ret || descriptor;\n    }\n  });\n  Object.defineProperties(obj, reducedDescriptors);\n};\n/**\r\n * Makes all methods read-only\r\n * @param {Object} obj\r\n */\n\n\nconst freezeMethods = obj => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {\n      return false;\n    }\n\n    const value = obj[name];\n    if (!isFunction(value)) return;\n    descriptor.enumerable = false;\n\n    if ('writable' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error('Can not rewrite read-only method \\'' + name + '\\'');\n      };\n    }\n  });\n};\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = arr => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  };\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n  return obj;\n};\n\nconst noop = () => {};\n\nconst toFiniteNumber = (value, defaultValue) => {\n  value = +value;\n  return Number.isFinite(value) ? value : defaultValue;\n};\n\nconst ALPHA = 'abcdefghijklmnopqrstuvwxyz';\nconst DIGIT = '0123456789';\nconst ALPHABET = {\n  DIGIT,\n  ALPHA,\n  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT\n};\n\nconst generateString = function () {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16;\n  let alphabet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ALPHABET.ALPHA_DIGIT;\n  let str = '';\n  const {\n    length\n  } = alphabet;\n\n  while (size--) {\n    str += alphabet[Math.random() * length | 0];\n  }\n\n  return str;\n};\n/**\r\n * If the thing is a FormData object, return true, otherwise return false.\r\n *\r\n * @param {unknown} thing - The thing to check.\r\n *\r\n * @returns {boolean}\r\n */\n\n\nfunction isSpecCompliantForm(thing) {\n  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);\n}\n\nconst toJSONObject = obj => {\n  const stack = new Array(10);\n\n  const visit = (source, i) => {\n    if (isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n\n      if (!('toJSON' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n        stack[i] = undefined;\n        return target;\n      }\n    }\n\n    return source;\n  };\n\n  return visit(obj, 0);\n};\n\nconst isAsyncFn = kindOfTest('AsyncFunction');\n\nconst isThenable = thing => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);\n\nexport default {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty,\n  // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  ALPHABET,\n  generateString,\n  isSpecCompliantForm,\n  toJSONObject,\n  isAsyncFn,\n  isThenable\n};","map":{"version":3,"sources":["C:/Users/onura/Documents/GitHub/Full-Stack-Project-Assessment/client/node_modules/axios/lib/utils.js"],"names":["bind","toString","Object","prototype","getPrototypeOf","kindOf","cache","thing","str","call","slice","toLowerCase","create","kindOfTest","type","typeOfTest","isArray","Array","isUndefined","isBuffer","val","constructor","isFunction","isArrayBuffer","isArrayBufferView","result","ArrayBuffer","isView","buffer","isString","isNumber","isObject","isBoolean","isPlainObject","Symbol","toStringTag","iterator","isDate","isFile","isBlob","isFileList","isStream","pipe","isFormData","kind","FormData","append","isURLSearchParams","trim","replace","forEach","obj","fn","allOwnKeys","i","l","length","keys","getOwnPropertyNames","len","key","findKey","_key","_global","globalThis","self","window","global","isContextDefined","context","merge","caseless","assignValue","targetKey","arguments","extend","a","b","thisArg","stripBOM","content","charCodeAt","inherits","superConstructor","props","descriptors","defineProperty","value","assign","toFlatObject","sourceObj","destObj","filter","propFilter","prop","merged","endsWith","searchString","position","String","undefined","lastIndex","indexOf","toArray","arr","isTypedArray","TypedArray","Uint8Array","forEachEntry","generator","next","done","pair","matchAll","regExp","matches","exec","push","isHTMLForm","toCamelCase","replacer","m","p1","p2","toUpperCase","hasOwnProperty","isRegExp","reduceDescriptors","reducer","getOwnPropertyDescriptors","reducedDescriptors","descriptor","name","ret","defineProperties","freezeMethods","enumerable","writable","set","Error","toObjectSet","arrayOrString","delimiter","define","split","noop","toFiniteNumber","defaultValue","Number","isFinite","ALPHA","DIGIT","ALPHABET","ALPHA_DIGIT","generateString","size","alphabet","Math","random","isSpecCompliantForm","toJSONObject","stack","visit","source","target","reducedValue","isAsyncFn","isThenable","then","catch","hasOwnProp"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nimport bind from './helpers/bind.js';\r\n\r\n// utils is a library of generic helper functions non-specific to axios\r\n\r\nconst {toString} = Object.prototype;\r\nconst {getPrototypeOf} = Object;\r\n\r\nconst kindOf = (cache => thing => {\r\n    const str = toString.call(thing);\r\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\r\n})(Object.create(null));\r\n\r\nconst kindOfTest = (type) => {\r\n  type = type.toLowerCase();\r\n  return (thing) => kindOf(thing) === type\r\n}\r\n\r\nconst typeOfTest = type => thing => typeof thing === type;\r\n\r\n/**\r\n * Determine if a value is an Array\r\n *\r\n * @param {Object} val The value to test\r\n *\r\n * @returns {boolean} True if value is an Array, otherwise false\r\n */\r\nconst {isArray} = Array;\r\n\r\n/**\r\n * Determine if a value is undefined\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if the value is undefined, otherwise false\r\n */\r\nconst isUndefined = typeOfTest('undefined');\r\n\r\n/**\r\n * Determine if a value is a Buffer\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a Buffer, otherwise false\r\n */\r\nfunction isBuffer(val) {\r\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\r\n    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\r\n}\r\n\r\n/**\r\n * Determine if a value is an ArrayBuffer\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\r\n */\r\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\r\n\r\n\r\n/**\r\n * Determine if a value is a view on an ArrayBuffer\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\r\n */\r\nfunction isArrayBufferView(val) {\r\n  let result;\r\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\r\n    result = ArrayBuffer.isView(val);\r\n  } else {\r\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Determine if a value is a String\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a String, otherwise false\r\n */\r\nconst isString = typeOfTest('string');\r\n\r\n/**\r\n * Determine if a value is a Function\r\n *\r\n * @param {*} val The value to test\r\n * @returns {boolean} True if value is a Function, otherwise false\r\n */\r\nconst isFunction = typeOfTest('function');\r\n\r\n/**\r\n * Determine if a value is a Number\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a Number, otherwise false\r\n */\r\nconst isNumber = typeOfTest('number');\r\n\r\n/**\r\n * Determine if a value is an Object\r\n *\r\n * @param {*} thing The value to test\r\n *\r\n * @returns {boolean} True if value is an Object, otherwise false\r\n */\r\nconst isObject = (thing) => thing !== null && typeof thing === 'object';\r\n\r\n/**\r\n * Determine if a value is a Boolean\r\n *\r\n * @param {*} thing The value to test\r\n * @returns {boolean} True if value is a Boolean, otherwise false\r\n */\r\nconst isBoolean = thing => thing === true || thing === false;\r\n\r\n/**\r\n * Determine if a value is a plain Object\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a plain Object, otherwise false\r\n */\r\nconst isPlainObject = (val) => {\r\n  if (kindOf(val) !== 'object') {\r\n    return false;\r\n  }\r\n\r\n  const prototype = getPrototypeOf(val);\r\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\r\n}\r\n\r\n/**\r\n * Determine if a value is a Date\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a Date, otherwise false\r\n */\r\nconst isDate = kindOfTest('Date');\r\n\r\n/**\r\n * Determine if a value is a File\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a File, otherwise false\r\n */\r\nconst isFile = kindOfTest('File');\r\n\r\n/**\r\n * Determine if a value is a Blob\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a Blob, otherwise false\r\n */\r\nconst isBlob = kindOfTest('Blob');\r\n\r\n/**\r\n * Determine if a value is a FileList\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a File, otherwise false\r\n */\r\nconst isFileList = kindOfTest('FileList');\r\n\r\n/**\r\n * Determine if a value is a Stream\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a Stream, otherwise false\r\n */\r\nconst isStream = (val) => isObject(val) && isFunction(val.pipe);\r\n\r\n/**\r\n * Determine if a value is a FormData\r\n *\r\n * @param {*} thing The value to test\r\n *\r\n * @returns {boolean} True if value is an FormData, otherwise false\r\n */\r\nconst isFormData = (thing) => {\r\n  let kind;\r\n  return thing && (\r\n    (typeof FormData === 'function' && thing instanceof FormData) || (\r\n      isFunction(thing.append) && (\r\n        (kind = kindOf(thing)) === 'formdata' ||\r\n        // detect form-data instance\r\n        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')\r\n      )\r\n    )\r\n  )\r\n}\r\n\r\n/**\r\n * Determine if a value is a URLSearchParams object\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\r\n */\r\nconst isURLSearchParams = kindOfTest('URLSearchParams');\r\n\r\n/**\r\n * Trim excess whitespace off the beginning and end of a string\r\n *\r\n * @param {String} str The String to trim\r\n *\r\n * @returns {String} The String freed of excess whitespace\r\n */\r\nconst trim = (str) => str.trim ?\r\n  str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n\r\n/**\r\n * Iterate over an Array or an Object invoking a function for each item.\r\n *\r\n * If `obj` is an Array callback will be called passing\r\n * the value, index, and complete array for each item.\r\n *\r\n * If 'obj' is an Object callback will be called passing\r\n * the value, key, and complete object for each property.\r\n *\r\n * @param {Object|Array} obj The object to iterate\r\n * @param {Function} fn The callback to invoke for each item\r\n *\r\n * @param {Boolean} [allOwnKeys = false]\r\n * @returns {any}\r\n */\r\nfunction forEach(obj, fn, {allOwnKeys = false} = {}) {\r\n  // Don't bother if no value provided\r\n  if (obj === null || typeof obj === 'undefined') {\r\n    return;\r\n  }\r\n\r\n  let i;\r\n  let l;\r\n\r\n  // Force an array if not already something iterable\r\n  if (typeof obj !== 'object') {\r\n    /*eslint no-param-reassign:0*/\r\n    obj = [obj];\r\n  }\r\n\r\n  if (isArray(obj)) {\r\n    // Iterate over array values\r\n    for (i = 0, l = obj.length; i < l; i++) {\r\n      fn.call(null, obj[i], i, obj);\r\n    }\r\n  } else {\r\n    // Iterate over object keys\r\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\r\n    const len = keys.length;\r\n    let key;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      key = keys[i];\r\n      fn.call(null, obj[key], key, obj);\r\n    }\r\n  }\r\n}\r\n\r\nfunction findKey(obj, key) {\r\n  key = key.toLowerCase();\r\n  const keys = Object.keys(obj);\r\n  let i = keys.length;\r\n  let _key;\r\n  while (i-- > 0) {\r\n    _key = keys[i];\r\n    if (key === _key.toLowerCase()) {\r\n      return _key;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nconst _global = (() => {\r\n  /*eslint no-undef:0*/\r\n  if (typeof globalThis !== \"undefined\") return globalThis;\r\n  return typeof self !== \"undefined\" ? self : (typeof window !== 'undefined' ? window : global)\r\n})();\r\n\r\nconst isContextDefined = (context) => !isUndefined(context) && context !== _global;\r\n\r\n/**\r\n * Accepts varargs expecting each argument to be an object, then\r\n * immutably merges the properties of each object and returns result.\r\n *\r\n * When multiple objects contain the same key the later object in\r\n * the arguments list will take precedence.\r\n *\r\n * Example:\r\n *\r\n * ```js\r\n * var result = merge({foo: 123}, {foo: 456});\r\n * console.log(result.foo); // outputs 456\r\n * ```\r\n *\r\n * @param {Object} obj1 Object to merge\r\n *\r\n * @returns {Object} Result of all merge properties\r\n */\r\nfunction merge(/* obj1, obj2, obj3, ... */) {\r\n  const {caseless} = isContextDefined(this) && this || {};\r\n  const result = {};\r\n  const assignValue = (val, key) => {\r\n    const targetKey = caseless && findKey(result, key) || key;\r\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\r\n      result[targetKey] = merge(result[targetKey], val);\r\n    } else if (isPlainObject(val)) {\r\n      result[targetKey] = merge({}, val);\r\n    } else if (isArray(val)) {\r\n      result[targetKey] = val.slice();\r\n    } else {\r\n      result[targetKey] = val;\r\n    }\r\n  }\r\n\r\n  for (let i = 0, l = arguments.length; i < l; i++) {\r\n    arguments[i] && forEach(arguments[i], assignValue);\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Extends object a by mutably adding to it the properties of object b.\r\n *\r\n * @param {Object} a The object to be extended\r\n * @param {Object} b The object to copy properties from\r\n * @param {Object} thisArg The object to bind function to\r\n *\r\n * @param {Boolean} [allOwnKeys]\r\n * @returns {Object} The resulting value of object a\r\n */\r\nconst extend = (a, b, thisArg, {allOwnKeys}= {}) => {\r\n  forEach(b, (val, key) => {\r\n    if (thisArg && isFunction(val)) {\r\n      a[key] = bind(val, thisArg);\r\n    } else {\r\n      a[key] = val;\r\n    }\r\n  }, {allOwnKeys});\r\n  return a;\r\n}\r\n\r\n/**\r\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\r\n *\r\n * @param {string} content with BOM\r\n *\r\n * @returns {string} content value without BOM\r\n */\r\nconst stripBOM = (content) => {\r\n  if (content.charCodeAt(0) === 0xFEFF) {\r\n    content = content.slice(1);\r\n  }\r\n  return content;\r\n}\r\n\r\n/**\r\n * Inherit the prototype methods from one constructor into another\r\n * @param {function} constructor\r\n * @param {function} superConstructor\r\n * @param {object} [props]\r\n * @param {object} [descriptors]\r\n *\r\n * @returns {void}\r\n */\r\nconst inherits = (constructor, superConstructor, props, descriptors) => {\r\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\r\n  constructor.prototype.constructor = constructor;\r\n  Object.defineProperty(constructor, 'super', {\r\n    value: superConstructor.prototype\r\n  });\r\n  props && Object.assign(constructor.prototype, props);\r\n}\r\n\r\n/**\r\n * Resolve object with deep prototype chain to a flat object\r\n * @param {Object} sourceObj source object\r\n * @param {Object} [destObj]\r\n * @param {Function|Boolean} [filter]\r\n * @param {Function} [propFilter]\r\n *\r\n * @returns {Object}\r\n */\r\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\r\n  let props;\r\n  let i;\r\n  let prop;\r\n  const merged = {};\r\n\r\n  destObj = destObj || {};\r\n  // eslint-disable-next-line no-eq-null,eqeqeq\r\n  if (sourceObj == null) return destObj;\r\n\r\n  do {\r\n    props = Object.getOwnPropertyNames(sourceObj);\r\n    i = props.length;\r\n    while (i-- > 0) {\r\n      prop = props[i];\r\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\r\n        destObj[prop] = sourceObj[prop];\r\n        merged[prop] = true;\r\n      }\r\n    }\r\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\r\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\r\n\r\n  return destObj;\r\n}\r\n\r\n/**\r\n * Determines whether a string ends with the characters of a specified string\r\n *\r\n * @param {String} str\r\n * @param {String} searchString\r\n * @param {Number} [position= 0]\r\n *\r\n * @returns {boolean}\r\n */\r\nconst endsWith = (str, searchString, position) => {\r\n  str = String(str);\r\n  if (position === undefined || position > str.length) {\r\n    position = str.length;\r\n  }\r\n  position -= searchString.length;\r\n  const lastIndex = str.indexOf(searchString, position);\r\n  return lastIndex !== -1 && lastIndex === position;\r\n}\r\n\r\n\r\n/**\r\n * Returns new array from array like object or null if failed\r\n *\r\n * @param {*} [thing]\r\n *\r\n * @returns {?Array}\r\n */\r\nconst toArray = (thing) => {\r\n  if (!thing) return null;\r\n  if (isArray(thing)) return thing;\r\n  let i = thing.length;\r\n  if (!isNumber(i)) return null;\r\n  const arr = new Array(i);\r\n  while (i-- > 0) {\r\n    arr[i] = thing[i];\r\n  }\r\n  return arr;\r\n}\r\n\r\n/**\r\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\r\n * thing passed in is an instance of Uint8Array\r\n *\r\n * @param {TypedArray}\r\n *\r\n * @returns {Array}\r\n */\r\n// eslint-disable-next-line func-names\r\nconst isTypedArray = (TypedArray => {\r\n  // eslint-disable-next-line func-names\r\n  return thing => {\r\n    return TypedArray && thing instanceof TypedArray;\r\n  };\r\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\r\n\r\n/**\r\n * For each entry in the object, call the function with the key and value.\r\n *\r\n * @param {Object<any, any>} obj - The object to iterate over.\r\n * @param {Function} fn - The function to call for each entry.\r\n *\r\n * @returns {void}\r\n */\r\nconst forEachEntry = (obj, fn) => {\r\n  const generator = obj && obj[Symbol.iterator];\r\n\r\n  const iterator = generator.call(obj);\r\n\r\n  let result;\r\n\r\n  while ((result = iterator.next()) && !result.done) {\r\n    const pair = result.value;\r\n    fn.call(obj, pair[0], pair[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * It takes a regular expression and a string, and returns an array of all the matches\r\n *\r\n * @param {string} regExp - The regular expression to match against.\r\n * @param {string} str - The string to search.\r\n *\r\n * @returns {Array<boolean>}\r\n */\r\nconst matchAll = (regExp, str) => {\r\n  let matches;\r\n  const arr = [];\r\n\r\n  while ((matches = regExp.exec(str)) !== null) {\r\n    arr.push(matches);\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\r\nconst isHTMLForm = kindOfTest('HTMLFormElement');\r\n\r\nconst toCamelCase = str => {\r\n  return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g,\r\n    function replacer(m, p1, p2) {\r\n      return p1.toUpperCase() + p2;\r\n    }\r\n  );\r\n};\r\n\r\n/* Creating a function that will check if an object has a property. */\r\nconst hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\r\n\r\n/**\r\n * Determine if a value is a RegExp object\r\n *\r\n * @param {*} val The value to test\r\n *\r\n * @returns {boolean} True if value is a RegExp object, otherwise false\r\n */\r\nconst isRegExp = kindOfTest('RegExp');\r\n\r\nconst reduceDescriptors = (obj, reducer) => {\r\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\r\n  const reducedDescriptors = {};\r\n\r\n  forEach(descriptors, (descriptor, name) => {\r\n    let ret;\r\n    if ((ret = reducer(descriptor, name, obj)) !== false) {\r\n      reducedDescriptors[name] = ret || descriptor;\r\n    }\r\n  });\r\n\r\n  Object.defineProperties(obj, reducedDescriptors);\r\n}\r\n\r\n/**\r\n * Makes all methods read-only\r\n * @param {Object} obj\r\n */\r\n\r\nconst freezeMethods = (obj) => {\r\n  reduceDescriptors(obj, (descriptor, name) => {\r\n    // skip restricted props in strict mode\r\n    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {\r\n      return false;\r\n    }\r\n\r\n    const value = obj[name];\r\n\r\n    if (!isFunction(value)) return;\r\n\r\n    descriptor.enumerable = false;\r\n\r\n    if ('writable' in descriptor) {\r\n      descriptor.writable = false;\r\n      return;\r\n    }\r\n\r\n    if (!descriptor.set) {\r\n      descriptor.set = () => {\r\n        throw Error('Can not rewrite read-only method \\'' + name + '\\'');\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\nconst toObjectSet = (arrayOrString, delimiter) => {\r\n  const obj = {};\r\n\r\n  const define = (arr) => {\r\n    arr.forEach(value => {\r\n      obj[value] = true;\r\n    });\r\n  }\r\n\r\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\r\n\r\n  return obj;\r\n}\r\n\r\nconst noop = () => {}\r\n\r\nconst toFiniteNumber = (value, defaultValue) => {\r\n  value = +value;\r\n  return Number.isFinite(value) ? value : defaultValue;\r\n}\r\n\r\nconst ALPHA = 'abcdefghijklmnopqrstuvwxyz'\r\n\r\nconst DIGIT = '0123456789';\r\n\r\nconst ALPHABET = {\r\n  DIGIT,\r\n  ALPHA,\r\n  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT\r\n}\r\n\r\nconst generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {\r\n  let str = '';\r\n  const {length} = alphabet;\r\n  while (size--) {\r\n    str += alphabet[Math.random() * length|0]\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n/**\r\n * If the thing is a FormData object, return true, otherwise return false.\r\n *\r\n * @param {unknown} thing - The thing to check.\r\n *\r\n * @returns {boolean}\r\n */\r\nfunction isSpecCompliantForm(thing) {\r\n  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);\r\n}\r\n\r\nconst toJSONObject = (obj) => {\r\n  const stack = new Array(10);\r\n\r\n  const visit = (source, i) => {\r\n\r\n    if (isObject(source)) {\r\n      if (stack.indexOf(source) >= 0) {\r\n        return;\r\n      }\r\n\r\n      if(!('toJSON' in source)) {\r\n        stack[i] = source;\r\n        const target = isArray(source) ? [] : {};\r\n\r\n        forEach(source, (value, key) => {\r\n          const reducedValue = visit(value, i + 1);\r\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\r\n        });\r\n\r\n        stack[i] = undefined;\r\n\r\n        return target;\r\n      }\r\n    }\r\n\r\n    return source;\r\n  }\r\n\r\n  return visit(obj, 0);\r\n}\r\n\r\nconst isAsyncFn = kindOfTest('AsyncFunction');\r\n\r\nconst isThenable = (thing) =>\r\n  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);\r\n\r\nexport default {\r\n  isArray,\r\n  isArrayBuffer,\r\n  isBuffer,\r\n  isFormData,\r\n  isArrayBufferView,\r\n  isString,\r\n  isNumber,\r\n  isBoolean,\r\n  isObject,\r\n  isPlainObject,\r\n  isUndefined,\r\n  isDate,\r\n  isFile,\r\n  isBlob,\r\n  isRegExp,\r\n  isFunction,\r\n  isStream,\r\n  isURLSearchParams,\r\n  isTypedArray,\r\n  isFileList,\r\n  forEach,\r\n  merge,\r\n  extend,\r\n  trim,\r\n  stripBOM,\r\n  inherits,\r\n  toFlatObject,\r\n  kindOf,\r\n  kindOfTest,\r\n  endsWith,\r\n  toArray,\r\n  forEachEntry,\r\n  matchAll,\r\n  isHTMLForm,\r\n  hasOwnProperty,\r\n  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection\r\n  reduceDescriptors,\r\n  freezeMethods,\r\n  toObjectSet,\r\n  toCamelCase,\r\n  noop,\r\n  toFiniteNumber,\r\n  findKey,\r\n  global: _global,\r\n  isContextDefined,\r\n  ALPHABET,\r\n  generateString,\r\n  isSpecCompliantForm,\r\n  toJSONObject,\r\n  isAsyncFn,\r\n  isThenable\r\n};\r\n"]},"metadata":{},"sourceType":"module"}