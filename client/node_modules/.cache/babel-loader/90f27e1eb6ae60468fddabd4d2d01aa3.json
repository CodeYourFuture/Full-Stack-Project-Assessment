{"ast":null,"code":"// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function () {\n  var resolvedPath = '',\n    resolvedAbsolute = false;\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = i >= 0 ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function (path) {\n  var isAbsolute = exports.isAbsolute(path),\n    trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function (p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function (path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function () {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function (p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n// path.relative(from, to)\n// posix version\nexports.relative = function (from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n  return outputParts.join('/');\n};\nexports.sep = '/';\nexports.delimiter = ':';\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n      if (!matchedSlash) {\n        end = i;\n        break;\n      }\n    } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now\n      if (!matchedSlash) {\n        start = i + 1;\n        break;\n      }\n    } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now\n      if (!matchedSlash) {\n        startPart = i + 1;\n        break;\n      }\n      continue;\n    }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n      // If this is our first dot, mark it as the start of our extension\n      if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n  if (startDot === -1 || end === -1 ||\n  // We saw a non-dot character immediately before the dot\n  preDotState === 0 ||\n  // The (right-most) trimmed path component is exactly '..'\n  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\nfunction filter(xs, f) {\n  if (xs.filter) return xs.filter(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    if (f(xs[i], i, xs)) res.push(xs[i]);\n  }\n  return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {\n  return str.substr(start, len);\n} : function (str, start, len) {\n  if (start < 0) start = str.length + start;\n  return str.substr(start, len);\n};","map":{"version":3,"names":["normalizeArray","parts","allowAboveRoot","up","i","length","last","splice","unshift","exports","resolve","resolvedPath","resolvedAbsolute","arguments","path","process","cwd","TypeError","charAt","filter","split","p","join","normalize","isAbsolute","trailingSlash","substr","paths","Array","prototype","slice","call","index","relative","from","to","trim","arr","start","end","fromParts","toParts","Math","min","samePartsLength","outputParts","push","concat","sep","delimiter","dirname","code","charCodeAt","hasRoot","matchedSlash","basename","ext","f","extname","startDot","startPart","preDotState","xs","res","str","len"],"sources":["/Users/admin/Desktop/Newsletter-Signup/Full-Stack-Project-Assessment/client/node_modules/path-browserify/index.js"],"sourcesContent":["// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}