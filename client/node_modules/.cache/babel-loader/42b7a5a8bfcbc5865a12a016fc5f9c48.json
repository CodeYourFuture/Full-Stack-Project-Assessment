{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { ListActionTypes, listReducer } from '../useList';\nexport function menuReducer(state, action) {\n  if (action.type === ListActionTypes.itemHover) {\n    return state;\n  }\n\n  const newState = listReducer(state, action); // make sure an item is always highlighted\n\n  if (newState.highlightedValue === null && action.context.items.length > 0) {\n    return _extends({}, newState, {\n      highlightedValue: action.context.items[0]\n    });\n  }\n\n  if (action.type === ListActionTypes.keyDown) {\n    if (action.event.key === 'Escape') {\n      return _extends({}, newState, {\n        open: false\n      });\n    }\n  }\n\n  if (action.type === ListActionTypes.blur) {\n    var _action$context$listb;\n\n    if (!((_action$context$listb = action.context.listboxRef.current) != null && _action$context$listb.contains(action.event.relatedTarget))) {\n      var _action$context$listb2, _action$event$related; // To prevent the menu from closing when the focus leaves the menu to the button.\n      // For more details, see https://github.com/mui/material-ui/pull/36917#issuecomment-1566992698\n\n\n      const listboxId = (_action$context$listb2 = action.context.listboxRef.current) == null ? void 0 : _action$context$listb2.getAttribute('id');\n      const controlledBy = (_action$event$related = action.event.relatedTarget) == null ? void 0 : _action$event$related.getAttribute('aria-controls');\n\n      if (listboxId && controlledBy && listboxId === controlledBy) {\n        return newState;\n      }\n\n      return _extends({}, newState, {\n        open: false,\n        highlightedValue: action.context.items[0]\n      });\n    }\n  }\n\n  return newState;\n}","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/@mui/base/useMenu/menuReducer.js"],"names":["_extends","ListActionTypes","listReducer","menuReducer","state","action","type","itemHover","newState","highlightedValue","context","items","length","keyDown","event","key","open","blur","_action$context$listb","listboxRef","current","contains","relatedTarget","_action$context$listb2","_action$event$related","listboxId","getAttribute","controlledBy"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,YAA7C;AACA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AACzC,MAAIA,MAAM,CAACC,IAAP,KAAgBL,eAAe,CAACM,SAApC,EAA+C;AAC7C,WAAOH,KAAP;AACD;;AACD,QAAMI,QAAQ,GAAGN,WAAW,CAACE,KAAD,EAAQC,MAAR,CAA5B,CAJyC,CAMzC;;AACA,MAAIG,QAAQ,CAACC,gBAAT,KAA8B,IAA9B,IAAsCJ,MAAM,CAACK,OAAP,CAAeC,KAAf,CAAqBC,MAArB,GAA8B,CAAxE,EAA2E;AACzE,WAAOZ,QAAQ,CAAC,EAAD,EAAKQ,QAAL,EAAe;AAC5BC,MAAAA,gBAAgB,EAAEJ,MAAM,CAACK,OAAP,CAAeC,KAAf,CAAqB,CAArB;AADU,KAAf,CAAf;AAGD;;AACD,MAAIN,MAAM,CAACC,IAAP,KAAgBL,eAAe,CAACY,OAApC,EAA6C;AAC3C,QAAIR,MAAM,CAACS,KAAP,CAAaC,GAAb,KAAqB,QAAzB,EAAmC;AACjC,aAAOf,QAAQ,CAAC,EAAD,EAAKQ,QAAL,EAAe;AAC5BQ,QAAAA,IAAI,EAAE;AADsB,OAAf,CAAf;AAGD;AACF;;AACD,MAAIX,MAAM,CAACC,IAAP,KAAgBL,eAAe,CAACgB,IAApC,EAA0C;AACxC,QAAIC,qBAAJ;;AACA,QAAI,EAAE,CAACA,qBAAqB,GAAGb,MAAM,CAACK,OAAP,CAAeS,UAAf,CAA0BC,OAAnD,KAA+D,IAA/D,IAAuEF,qBAAqB,CAACG,QAAtB,CAA+BhB,MAAM,CAACS,KAAP,CAAaQ,aAA5C,CAAzE,CAAJ,EAA0I;AACxI,UAAIC,sBAAJ,EAA4BC,qBAA5B,CADwI,CAExI;AACA;;;AACA,YAAMC,SAAS,GAAG,CAACF,sBAAsB,GAAGlB,MAAM,CAACK,OAAP,CAAeS,UAAf,CAA0BC,OAApD,KAAgE,IAAhE,GAAuE,KAAK,CAA5E,GAAgFG,sBAAsB,CAACG,YAAvB,CAAoC,IAApC,CAAlG;AACA,YAAMC,YAAY,GAAG,CAACH,qBAAqB,GAAGnB,MAAM,CAACS,KAAP,CAAaQ,aAAtC,KAAwD,IAAxD,GAA+D,KAAK,CAApE,GAAwEE,qBAAqB,CAACE,YAAtB,CAAmC,eAAnC,CAA7F;;AACA,UAAID,SAAS,IAAIE,YAAb,IAA6BF,SAAS,KAAKE,YAA/C,EAA6D;AAC3D,eAAOnB,QAAP;AACD;;AACD,aAAOR,QAAQ,CAAC,EAAD,EAAKQ,QAAL,EAAe;AAC5BQ,QAAAA,IAAI,EAAE,KADsB;AAE5BP,QAAAA,gBAAgB,EAAEJ,MAAM,CAACK,OAAP,CAAeC,KAAf,CAAqB,CAArB;AAFU,OAAf,CAAf;AAID;AACF;;AACD,SAAOH,QAAP;AACD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport { ListActionTypes, listReducer } from '../useList';\r\nexport function menuReducer(state, action) {\r\n  if (action.type === ListActionTypes.itemHover) {\r\n    return state;\r\n  }\r\n  const newState = listReducer(state, action);\r\n\r\n  // make sure an item is always highlighted\r\n  if (newState.highlightedValue === null && action.context.items.length > 0) {\r\n    return _extends({}, newState, {\r\n      highlightedValue: action.context.items[0]\r\n    });\r\n  }\r\n  if (action.type === ListActionTypes.keyDown) {\r\n    if (action.event.key === 'Escape') {\r\n      return _extends({}, newState, {\r\n        open: false\r\n      });\r\n    }\r\n  }\r\n  if (action.type === ListActionTypes.blur) {\r\n    var _action$context$listb;\r\n    if (!((_action$context$listb = action.context.listboxRef.current) != null && _action$context$listb.contains(action.event.relatedTarget))) {\r\n      var _action$context$listb2, _action$event$related;\r\n      // To prevent the menu from closing when the focus leaves the menu to the button.\r\n      // For more details, see https://github.com/mui/material-ui/pull/36917#issuecomment-1566992698\r\n      const listboxId = (_action$context$listb2 = action.context.listboxRef.current) == null ? void 0 : _action$context$listb2.getAttribute('id');\r\n      const controlledBy = (_action$event$related = action.event.relatedTarget) == null ? void 0 : _action$event$related.getAttribute('aria-controls');\r\n      if (listboxId && controlledBy && listboxId === controlledBy) {\r\n        return newState;\r\n      }\r\n      return _extends({}, newState, {\r\n        open: false,\r\n        highlightedValue: action.context.items[0]\r\n      });\r\n    }\r\n  }\r\n  return newState;\r\n}"]},"metadata":{},"sourceType":"module"}