{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport setRef from '../setRef';\nexport default function useForkRef() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  /**\r\n   * This will create a new function if the refs passed to this hook change and are all defined.\r\n   * This means react will call the old forkRef with `null` and the new forkRef\r\n   * with the ref. Cleanup naturally emerges from this behavior.\r\n   */\n  return React.useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n\n    return instance => {\n      refs.forEach(ref => {\n        setRef(ref, instance);\n      });\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}","map":{"version":3,"sources":["C:/Users/User/OneDrive/Documents/CYF/Full-Stack-Project-Assessment/client/node_modules/@mui/utils/esm/useForkRef/useForkRef.js"],"names":["React","setRef","useForkRef","refs","useMemo","every","ref","instance","forEach"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,eAAe,SAASC,UAAT,GAA6B;AAAA,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAC1C;AACF;AACA;AACA;AACA;AACE,SAAOH,KAAK,CAACI,OAAN,CAAc,MAAM;AACzB,QAAID,IAAI,CAACE,KAAL,CAAWC,GAAG,IAAIA,GAAG,IAAI,IAAzB,CAAJ,EAAoC;AAClC,aAAO,IAAP;AACD;;AACD,WAAOC,QAAQ,IAAI;AACjBJ,MAAAA,IAAI,CAACK,OAAL,CAAaF,GAAG,IAAI;AAClBL,QAAAA,MAAM,CAACK,GAAD,EAAMC,QAAN,CAAN;AACD,OAFD;AAGD,KAJD,CAJyB,CASzB;AACD,GAVM,EAUJJ,IAVI,CAAP;AAWD","sourcesContent":["'use client';\r\n\r\nimport * as React from 'react';\r\nimport setRef from '../setRef';\r\nexport default function useForkRef(...refs) {\r\n  /**\r\n   * This will create a new function if the refs passed to this hook change and are all defined.\r\n   * This means react will call the old forkRef with `null` and the new forkRef\r\n   * with the ref. Cleanup naturally emerges from this behavior.\r\n   */\r\n  return React.useMemo(() => {\r\n    if (refs.every(ref => ref == null)) {\r\n      return null;\r\n    }\r\n    return instance => {\r\n      refs.forEach(ref => {\r\n        setRef(ref, instance);\r\n      });\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, refs);\r\n}"]},"metadata":{},"sourceType":"module"}