{"ast":null,"code":"/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar createError = require('http-errors');\n\nvar getBody = require('raw-body');\n\nvar iconv = require('iconv-lite');\n\nvar onFinished = require('on-finished');\n\nvar zlib = require('zlib');\n/**\n * Module exports.\n */\n\n\nmodule.exports = read;\n/**\n * Read a request into a buffer and parse.\n *\n * @param {object} req\n * @param {object} res\n * @param {function} next\n * @param {function} parse\n * @param {function} debug\n * @param {object} options\n * @private\n */\n\nfunction read(req, res, next, parse, debug, options) {\n  var length;\n  var opts = options;\n  var stream; // flag as parsed\n\n  req._body = true; // read options\n\n  var encoding = opts.encoding !== null ? opts.encoding : null;\n  var verify = opts.verify;\n\n  try {\n    // get the content stream\n    stream = contentstream(req, debug, opts.inflate);\n    length = stream.length;\n    stream.length = undefined;\n  } catch (err) {\n    return next(err);\n  } // set raw-body options\n\n\n  opts.length = length;\n  opts.encoding = verify ? null : encoding; // assert charset is supported\n\n  if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {\n    return next(createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n      charset: encoding.toLowerCase(),\n      type: 'charset.unsupported'\n    }));\n  } // read body\n\n\n  debug('read body');\n  getBody(stream, opts, function (error, body) {\n    if (error) {\n      var _error;\n\n      if (error.type === 'encoding.unsupported') {\n        // echo back charset\n        _error = createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n          charset: encoding.toLowerCase(),\n          type: 'charset.unsupported'\n        });\n      } else {\n        // set status code on error\n        _error = createError(400, error);\n      } // read off entire request\n\n\n      stream.resume();\n      onFinished(req, function onfinished() {\n        next(createError(400, _error));\n      });\n      return;\n    } // verify\n\n\n    if (verify) {\n      try {\n        debug('verify body');\n        verify(req, res, body, encoding);\n      } catch (err) {\n        next(createError(403, err, {\n          body: body,\n          type: err.type || 'entity.verify.failed'\n        }));\n        return;\n      }\n    } // parse\n\n\n    var str = body;\n\n    try {\n      debug('parse body');\n      str = typeof body !== 'string' && encoding !== null ? iconv.decode(body, encoding) : body;\n      req.body = parse(str);\n    } catch (err) {\n      next(createError(400, err, {\n        body: str,\n        type: err.type || 'entity.parse.failed'\n      }));\n      return;\n    }\n\n    next();\n  });\n}\n/**\n * Get the content stream of the request.\n *\n * @param {object} req\n * @param {function} debug\n * @param {boolean} [inflate=true]\n * @return {object}\n * @api private\n */\n\n\nfunction contentstream(req, debug, inflate) {\n  var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase();\n  var length = req.headers['content-length'];\n  var stream;\n  debug('content-encoding \"%s\"', encoding);\n\n  if (inflate === false && encoding !== 'identity') {\n    throw createError(415, 'content encoding unsupported', {\n      encoding: encoding,\n      type: 'encoding.unsupported'\n    });\n  }\n\n  switch (encoding) {\n    case 'deflate':\n      stream = zlib.createInflate();\n      debug('inflate body');\n      req.pipe(stream);\n      break;\n\n    case 'gzip':\n      stream = zlib.createGunzip();\n      debug('gunzip body');\n      req.pipe(stream);\n      break;\n\n    case 'identity':\n      stream = req;\n      stream.length = length;\n      break;\n\n    default:\n      throw createError(415, 'unsupported content encoding \"' + encoding + '\"', {\n        encoding: encoding,\n        type: 'encoding.unsupported'\n      });\n  }\n\n  return stream;\n}","map":{"version":3,"sources":["/Users/admin/Desktop/Newsletter-Signup/Full-Stack-Project-Assessment/client/node_modules/body-parser/lib/read.js"],"names":["createError","require","getBody","iconv","onFinished","zlib","module","exports","read","req","res","next","parse","debug","options","length","opts","stream","_body","encoding","verify","contentstream","inflate","undefined","err","encodingExists","toUpperCase","charset","toLowerCase","type","error","body","_error","resume","onfinished","str","decode","headers","createInflate","pipe","createGunzip"],"mappings":"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","sourcesContent":["/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar createError = require('http-errors')\nvar getBody = require('raw-body')\nvar iconv = require('iconv-lite')\nvar onFinished = require('on-finished')\nvar zlib = require('zlib')\n\n/**\n * Module exports.\n */\n\nmodule.exports = read\n\n/**\n * Read a request into a buffer and parse.\n *\n * @param {object} req\n * @param {object} res\n * @param {function} next\n * @param {function} parse\n * @param {function} debug\n * @param {object} options\n * @private\n */\n\nfunction read (req, res, next, parse, debug, options) {\n  var length\n  var opts = options\n  var stream\n\n  // flag as parsed\n  req._body = true\n\n  // read options\n  var encoding = opts.encoding !== null\n    ? opts.encoding\n    : null\n  var verify = opts.verify\n\n  try {\n    // get the content stream\n    stream = contentstream(req, debug, opts.inflate)\n    length = stream.length\n    stream.length = undefined\n  } catch (err) {\n    return next(err)\n  }\n\n  // set raw-body options\n  opts.length = length\n  opts.encoding = verify\n    ? null\n    : encoding\n\n  // assert charset is supported\n  if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {\n    return next(createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n      charset: encoding.toLowerCase(),\n      type: 'charset.unsupported'\n    }))\n  }\n\n  // read body\n  debug('read body')\n  getBody(stream, opts, function (error, body) {\n    if (error) {\n      var _error\n\n      if (error.type === 'encoding.unsupported') {\n        // echo back charset\n        _error = createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n          charset: encoding.toLowerCase(),\n          type: 'charset.unsupported'\n        })\n      } else {\n        // set status code on error\n        _error = createError(400, error)\n      }\n\n      // read off entire request\n      stream.resume()\n      onFinished(req, function onfinished () {\n        next(createError(400, _error))\n      })\n      return\n    }\n\n    // verify\n    if (verify) {\n      try {\n        debug('verify body')\n        verify(req, res, body, encoding)\n      } catch (err) {\n        next(createError(403, err, {\n          body: body,\n          type: err.type || 'entity.verify.failed'\n        }))\n        return\n      }\n    }\n\n    // parse\n    var str = body\n    try {\n      debug('parse body')\n      str = typeof body !== 'string' && encoding !== null\n        ? iconv.decode(body, encoding)\n        : body\n      req.body = parse(str)\n    } catch (err) {\n      next(createError(400, err, {\n        body: str,\n        type: err.type || 'entity.parse.failed'\n      }))\n      return\n    }\n\n    next()\n  })\n}\n\n/**\n * Get the content stream of the request.\n *\n * @param {object} req\n * @param {function} debug\n * @param {boolean} [inflate=true]\n * @return {object}\n * @api private\n */\n\nfunction contentstream (req, debug, inflate) {\n  var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase()\n  var length = req.headers['content-length']\n  var stream\n\n  debug('content-encoding \"%s\"', encoding)\n\n  if (inflate === false && encoding !== 'identity') {\n    throw createError(415, 'content encoding unsupported', {\n      encoding: encoding,\n      type: 'encoding.unsupported'\n    })\n  }\n\n  switch (encoding) {\n    case 'deflate':\n      stream = zlib.createInflate()\n      debug('inflate body')\n      req.pipe(stream)\n      break\n    case 'gzip':\n      stream = zlib.createGunzip()\n      debug('gunzip body')\n      req.pipe(stream)\n      break\n    case 'identity':\n      stream = req\n      stream.length = length\n      break\n    default:\n      throw createError(415, 'unsupported content encoding \"' + encoding + '\"', {\n        encoding: encoding,\n        type: 'encoding.unsupported'\n      })\n  }\n\n  return stream\n}\n"]},"metadata":{},"sourceType":"script"}