{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ThemeProvider as MuiThemeProvider, useTheme as usePrivateTheme } from '@mui/private-theming';\nimport { exactProp } from '@mui/utils';\nimport { ThemeContext as StyledEngineThemeContext } from '@mui/styled-engine';\nimport useThemeWithoutDefault from '../useThemeWithoutDefault';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst EMPTY_THEME = {};\n\nfunction useThemeScoping(themeId, upperTheme, localTheme) {\n  let isPrivate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  return React.useMemo(() => {\n    const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;\n\n    if (typeof localTheme === 'function') {\n      const mergedTheme = localTheme(resolvedTheme);\n      const result = themeId ? _extends({}, upperTheme, {\n        [themeId]: mergedTheme\n      }) : mergedTheme; // must return a function for the private theme to NOT merge with the upper theme.\n      // see the test case \"use provided theme from a callback\" in ThemeProvider.test.js\n\n      if (isPrivate) {\n        return () => result;\n      }\n\n      return result;\n    }\n\n    return themeId ? _extends({}, upperTheme, {\n      [themeId]: localTheme\n    }) : _extends({}, upperTheme, localTheme);\n  }, [themeId, upperTheme, localTheme, isPrivate]);\n}\n/**\n * This component makes the `theme` available down the React tree.\n * It should preferably be used at **the root of your component tree**.\n *\n * <ThemeProvider theme={theme}> // existing use case\n * <ThemeProvider theme={{ id: theme }}> // theme scoping\n */\n\n\nfunction ThemeProvider(props) {\n  const {\n    children,\n    theme: localTheme,\n    themeId\n  } = props;\n  const upperTheme = useThemeWithoutDefault(EMPTY_THEME);\n  const upperPrivateTheme = usePrivateTheme() || EMPTY_THEME;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (upperTheme === null && typeof localTheme === 'function' || themeId && upperTheme && !upperTheme[themeId] && typeof localTheme === 'function') {\n      console.error(['MUI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n'));\n    }\n  }\n\n  const engineTheme = useThemeScoping(themeId, upperTheme, localTheme);\n  const privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);\n  return /*#__PURE__*/_jsx(MuiThemeProvider, {\n    theme: privateTheme,\n    children: /*#__PURE__*/_jsx(StyledEngineThemeContext.Provider, {\n      value: engineTheme,\n      children: children\n    })\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n  /**\n   * The design system's unique id for getting the corresponded theme when there are multiple design systems.\n   */\n  themeId: PropTypes.string\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\n\nexport default ThemeProvider;","map":{"version":3,"sources":["/home/coder/node_modules/@mui/system/esm/ThemeProvider/ThemeProvider.js"],"names":["_extends","React","PropTypes","ThemeProvider","MuiThemeProvider","useTheme","usePrivateTheme","exactProp","ThemeContext","StyledEngineThemeContext","useThemeWithoutDefault","jsx","_jsx","EMPTY_THEME","useThemeScoping","themeId","upperTheme","localTheme","isPrivate","useMemo","resolvedTheme","mergedTheme","result","props","children","theme","upperPrivateTheme","process","env","NODE_ENV","console","error","join","engineTheme","privateTheme","Provider","value","propTypes","node","oneOfType","func","object","isRequired","string"],"mappings":"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","sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ThemeProvider as MuiThemeProvider, useTheme as usePrivateTheme } from '@mui/private-theming';\nimport { exactProp } from '@mui/utils';\nimport { ThemeContext as StyledEngineThemeContext } from '@mui/styled-engine';\nimport useThemeWithoutDefault from '../useThemeWithoutDefault';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst EMPTY_THEME = {};\nfunction useThemeScoping(themeId, upperTheme, localTheme, isPrivate = false) {\n  return React.useMemo(() => {\n    const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;\n    if (typeof localTheme === 'function') {\n      const mergedTheme = localTheme(resolvedTheme);\n      const result = themeId ? _extends({}, upperTheme, {\n        [themeId]: mergedTheme\n      }) : mergedTheme;\n      // must return a function for the private theme to NOT merge with the upper theme.\n      // see the test case \"use provided theme from a callback\" in ThemeProvider.test.js\n      if (isPrivate) {\n        return () => result;\n      }\n      return result;\n    }\n    return themeId ? _extends({}, upperTheme, {\n      [themeId]: localTheme\n    }) : _extends({}, upperTheme, localTheme);\n  }, [themeId, upperTheme, localTheme, isPrivate]);\n}\n\n/**\n * This component makes the `theme` available down the React tree.\n * It should preferably be used at **the root of your component tree**.\n *\n * <ThemeProvider theme={theme}> // existing use case\n * <ThemeProvider theme={{ id: theme }}> // theme scoping\n */\nfunction ThemeProvider(props) {\n  const {\n    children,\n    theme: localTheme,\n    themeId\n  } = props;\n  const upperTheme = useThemeWithoutDefault(EMPTY_THEME);\n  const upperPrivateTheme = usePrivateTheme() || EMPTY_THEME;\n  if (process.env.NODE_ENV !== 'production') {\n    if (upperTheme === null && typeof localTheme === 'function' || themeId && upperTheme && !upperTheme[themeId] && typeof localTheme === 'function') {\n      console.error(['MUI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n'));\n    }\n  }\n  const engineTheme = useThemeScoping(themeId, upperTheme, localTheme);\n  const privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);\n  return /*#__PURE__*/_jsx(MuiThemeProvider, {\n    theme: privateTheme,\n    children: /*#__PURE__*/_jsx(StyledEngineThemeContext.Provider, {\n      value: engineTheme,\n      children: children\n    })\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n  /**\n   * The design system's unique id for getting the corresponded theme when there are multiple design systems.\n   */\n  themeId: PropTypes.string\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\nexport default ThemeProvider;"]},"metadata":{},"sourceType":"module"}