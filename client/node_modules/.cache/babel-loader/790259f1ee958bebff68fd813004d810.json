{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\onura\\\\Documents\\\\GitHub\\\\Full-Stack-Project-Assessment\\\\client\\\\src\\\\VideoTable.js\";\nimport React from \"react\";\nimport \"./videoTable.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction convertWatchToEmbedLink(watchLink) {\n  const watchPattern = /https:\\/\\/www\\.youtube\\.com\\/watch\\?v=([A-Za-z0-9_-]+)/;\n  const match = watchLink.match(watchPattern);\n\n  if (match && match.length === 2) {\n    const videoId = match[1];\n    const embedLink = `https://www.youtube.com/embed/${videoId}`;\n    return embedLink;\n  } else {\n    return watchLink;\n  }\n}\n\nconst VideoTable = _ref => {\n  let {\n    videos,\n    handleVote,\n    handleRemove\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-grid\",\n    children: videos.map(video => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: video.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n          src: video.url.startsWith(\"https://www.youtube.com/watch?v=\") ? convertWatchToEmbedLink(video.url) : video.url,\n          title: video.title,\n          allowFullScreen: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Uploaded: \", video.uploadDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)]\n    }, video.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_c = VideoTable;\nexport default VideoTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoTable\");","map":{"version":3,"sources":["C:/Users/onura/Documents/GitHub/Full-Stack-Project-Assessment/client/src/VideoTable.js"],"names":["React","convertWatchToEmbedLink","watchLink","watchPattern","match","length","videoId","embedLink","VideoTable","videos","handleVote","handleRemove","map","video","title","url","startsWith","uploadDate","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,kBAAP;;;AACA,SAASC,uBAAT,CAAiCC,SAAjC,EAA4C;AAC1C,QAAMC,YAAY,GAAG,wDAArB;AACA,QAAMC,KAAK,GAAGF,SAAS,CAACE,KAAV,CAAgBD,YAAhB,CAAd;;AAEA,MAAIC,KAAK,IAAIA,KAAK,CAACC,MAAN,KAAiB,CAA9B,EAAiC;AAC/B,UAAMC,OAAO,GAAGF,KAAK,CAAC,CAAD,CAArB;AACA,UAAMG,SAAS,GAAI,iCAAgCD,OAAQ,EAA3D;AACA,WAAOC,SAAP;AACD,GAJD,MAIO;AACL,WAAOL,SAAP;AACD;AACF;;AAED,MAAMM,UAAU,GAAG,QAA0C;AAAA,MAAzC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,UAAV;AAAsBC,IAAAA;AAAtB,GAAyC;AAC3D,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,cACGF,MAAM,CAACG,GAAP,CAAYC,KAAD,iBACV;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACE;AAAA,kBAAKA,KAAK,CAACC;AAAX;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,+BACE;AACE,UAAA,GAAG,EACDD,KAAK,CAACE,GAAN,CAAUC,UAAV,CAAqB,kCAArB,IACIf,uBAAuB,CAACY,KAAK,CAACE,GAAP,CAD3B,GAEIF,KAAK,CAACE,GAJd;AAME,UAAA,KAAK,EAAEF,KAAK,CAACC,KANf;AAOE,UAAA,eAAe;AAPjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF,eAaE;AAAA,iCAAcD,KAAK,CAACI,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF;AAAA,OAAiCJ,KAAK,CAACK,EAAvC;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAvBD;;KAAMV,U;AAyBN,eAAeA,UAAf","sourcesContent":["import React from \"react\";\r\nimport \"./videoTable.css\"\r\nfunction convertWatchToEmbedLink(watchLink) {\r\n  const watchPattern = /https:\\/\\/www\\.youtube\\.com\\/watch\\?v=([A-Za-z0-9_-]+)/;\r\n  const match = watchLink.match(watchPattern);\r\n\r\n  if (match && match.length === 2) {\r\n    const videoId = match[1];\r\n    const embedLink = `https://www.youtube.com/embed/${videoId}`;\r\n    return embedLink;\r\n  } else {\r\n    return watchLink;\r\n  }\r\n}\r\n\r\nconst VideoTable = ({ videos, handleVote, handleRemove }) => {\r\n  return (\r\n    <div className=\"video-grid\">\r\n      {videos.map((video) => (\r\n        <div className=\"video-card\" key={video.id}>\r\n          <h2>{video.title}</h2>\r\n          <div className=\"video-container\">\r\n            <iframe\r\n              src={\r\n                video.url.startsWith(\"https://www.youtube.com/watch?v=\")\r\n                  ? convertWatchToEmbedLink(video.url)\r\n                  : video.url\r\n              }\r\n              title={video.title}\r\n              allowFullScreen\r\n            />\r\n          </div>\r\n          <p>Uploaded: {video.uploadDate}</p>\r\n          {/* Add Rating component here */}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoTable;\r\n"]},"metadata":{},"sourceType":"module"}