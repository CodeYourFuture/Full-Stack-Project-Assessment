{"ast":null,"code":"import logger from \"../modules/logger/index.js\";\nvar name = \"webpack-dev-server\"; // default level is set on the client side, so it does not need\n// to be set by the CLI or API\n\nvar defaultLevel = \"info\"; // options new options, merge with old options\n\n/**\n * @param {false | true | \"none\" | \"error\" | \"warn\" | \"info\" | \"log\" | \"verbose\"} level\n * @returns {void}\n */\n\nfunction setLogLevel(level) {\n  logger.configureDefaultLogger({\n    level: level\n  });\n}\n\nsetLogLevel(defaultLevel);\nvar log = logger.getLogger(name);\n\nvar logEnabledFeatures = function logEnabledFeatures(features) {\n  var enabledFeatures = Object.keys(features);\n\n  if (!features || enabledFeatures.length === 0) {\n    return;\n  }\n\n  var logString = \"Server started:\"; // Server started: Hot Module Replacement enabled, Live Reloading enabled, Overlay disabled.\n\n  for (var i = 0; i < enabledFeatures.length; i++) {\n    var key = enabledFeatures[i];\n    logString += \" \".concat(key, \" \").concat(features[key] ? \"enabled\" : \"disabled\", \",\");\n  } // replace last comma with a period\n\n\n  logString = logString.slice(0, -1).concat(\".\");\n  log.info(logString);\n};\n\nexport { log, logEnabledFeatures, setLogLevel };","map":{"version":3,"sources":["/Users/anuthapaliya/Documents/GitHub/Full-Stack-Project-Assessment/client/node_modules/webpack-dev-server/client/utils/log.js"],"names":["logger","name","defaultLevel","setLogLevel","level","configureDefaultLogger","log","getLogger","logEnabledFeatures","features","enabledFeatures","Object","keys","length","logString","i","key","concat","slice","info"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,4BAAnB;AACA,IAAIC,IAAI,GAAG,oBAAX,C,CACA;AACA;;AACA,IAAIC,YAAY,GAAG,MAAnB,C,CAEA;;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1BJ,EAAAA,MAAM,CAACK,sBAAP,CAA8B;AAC5BD,IAAAA,KAAK,EAAEA;AADqB,GAA9B;AAGD;;AACDD,WAAW,CAACD,YAAD,CAAX;AACA,IAAII,GAAG,GAAGN,MAAM,CAACO,SAAP,CAAiBN,IAAjB,CAAV;;AACA,IAAIO,kBAAkB,GAAG,SAASA,kBAAT,CAA4BC,QAA5B,EAAsC;AAC7D,MAAIC,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAYH,QAAZ,CAAtB;;AACA,MAAI,CAACA,QAAD,IAAaC,eAAe,CAACG,MAAhB,KAA2B,CAA5C,EAA+C;AAC7C;AACD;;AACD,MAAIC,SAAS,GAAG,iBAAhB,CAL6D,CAO7D;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,eAAe,CAACG,MAApC,EAA4CE,CAAC,EAA7C,EAAiD;AAC/C,QAAIC,GAAG,GAAGN,eAAe,CAACK,CAAD,CAAzB;AACAD,IAAAA,SAAS,IAAI,IAAIG,MAAJ,CAAWD,GAAX,EAAgB,GAAhB,EAAqBC,MAArB,CAA4BR,QAAQ,CAACO,GAAD,CAAR,GAAgB,SAAhB,GAA4B,UAAxD,EAAoE,GAApE,CAAb;AACD,GAX4D,CAY7D;;;AACAF,EAAAA,SAAS,GAAGA,SAAS,CAACI,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,EAAuBD,MAAvB,CAA8B,GAA9B,CAAZ;AACAX,EAAAA,GAAG,CAACa,IAAJ,CAASL,SAAT;AACD,CAfD;;AAgBA,SAASR,GAAT,EAAcE,kBAAd,EAAkCL,WAAlC","sourcesContent":["import logger from \"../modules/logger/index.js\";\nvar name = \"webpack-dev-server\";\n// default level is set on the client side, so it does not need\n// to be set by the CLI or API\nvar defaultLevel = \"info\";\n\n// options new options, merge with old options\n/**\n * @param {false | true | \"none\" | \"error\" | \"warn\" | \"info\" | \"log\" | \"verbose\"} level\n * @returns {void}\n */\nfunction setLogLevel(level) {\n  logger.configureDefaultLogger({\n    level: level\n  });\n}\nsetLogLevel(defaultLevel);\nvar log = logger.getLogger(name);\nvar logEnabledFeatures = function logEnabledFeatures(features) {\n  var enabledFeatures = Object.keys(features);\n  if (!features || enabledFeatures.length === 0) {\n    return;\n  }\n  var logString = \"Server started:\";\n\n  // Server started: Hot Module Replacement enabled, Live Reloading enabled, Overlay disabled.\n  for (var i = 0; i < enabledFeatures.length; i++) {\n    var key = enabledFeatures[i];\n    logString += \" \".concat(key, \" \").concat(features[key] ? \"enabled\" : \"disabled\", \",\");\n  }\n  // replace last comma with a period\n  logString = logString.slice(0, -1).concat(\".\");\n  log.info(logString);\n};\nexport { log, logEnabledFeatures, setLogLevel };"]},"metadata":{},"sourceType":"module"}