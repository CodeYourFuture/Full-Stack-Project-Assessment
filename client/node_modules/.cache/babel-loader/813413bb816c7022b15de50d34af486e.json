{"ast":null,"code":"/**\n * negotiator\n * Copyright(c) 2012 Isaac Z. Schlueter\n * Copyright(c) 2014 Federico Romero\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = preferredEncodings;\nmodule.exports.preferredEncodings = preferredEncodings;\n/**\n * Module variables.\n * @private\n */\n\nvar simpleEncodingRegExp = /^\\s*([^\\s;]+)\\s*(?:;(.*))?$/;\n/**\n * Parse the Accept-Encoding header.\n * @private\n */\n\nfunction parseAcceptEncoding(accept) {\n  var accepts = accept.split(',');\n  var hasIdentity = false;\n  var minQuality = 1;\n\n  for (var i = 0, j = 0; i < accepts.length; i++) {\n    var encoding = parseEncoding(accepts[i].trim(), i);\n\n    if (encoding) {\n      accepts[j++] = encoding;\n      hasIdentity = hasIdentity || specify('identity', encoding);\n      minQuality = Math.min(minQuality, encoding.q || 1);\n    }\n  }\n\n  if (!hasIdentity) {\n    /*\n     * If identity doesn't explicitly appear in the accept-encoding header,\n     * it's added to the list of acceptable encoding with the lowest q\n     */\n    accepts[j++] = {\n      encoding: 'identity',\n      q: minQuality,\n      i: i\n    };\n  } // trim accepts\n\n\n  accepts.length = j;\n  return accepts;\n}\n/**\n * Parse an encoding from the Accept-Encoding header.\n * @private\n */\n\n\nfunction parseEncoding(str, i) {\n  var match = simpleEncodingRegExp.exec(str);\n  if (!match) return null;\n  var encoding = match[1];\n  var q = 1;\n\n  if (match[2]) {\n    var params = match[2].split(';');\n\n    for (var j = 0; j < params.length; j++) {\n      var p = params[j].trim().split('=');\n\n      if (p[0] === 'q') {\n        q = parseFloat(p[1]);\n        break;\n      }\n    }\n  }\n\n  return {\n    encoding: encoding,\n    q: q,\n    i: i\n  };\n}\n/**\n * Get the priority of an encoding.\n * @private\n */\n\n\nfunction getEncodingPriority(encoding, accepted, index) {\n  var priority = {\n    o: -1,\n    q: 0,\n    s: 0\n  };\n\n  for (var i = 0; i < accepted.length; i++) {\n    var spec = specify(encoding, accepted[i], index);\n\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n      priority = spec;\n    }\n  }\n\n  return priority;\n}\n/**\n * Get the specificity of the encoding.\n * @private\n */\n\n\nfunction specify(encoding, spec, index) {\n  var s = 0;\n\n  if (spec.encoding.toLowerCase() === encoding.toLowerCase()) {\n    s |= 1;\n  } else if (spec.encoding !== '*') {\n    return null;\n  }\n\n  return {\n    i: index,\n    o: spec.i,\n    q: spec.q,\n    s: s\n  };\n}\n\n;\n/**\n * Get the preferred encodings from an Accept-Encoding header.\n * @public\n */\n\nfunction preferredEncodings(accept, provided) {\n  var accepts = parseAcceptEncoding(accept || '');\n\n  if (!provided) {\n    // sorted list of all encodings\n    return accepts.filter(isQuality).sort(compareSpecs).map(getFullEncoding);\n  }\n\n  var priorities = provided.map(function getPriority(type, index) {\n    return getEncodingPriority(type, accepts, index);\n  }); // sorted list of accepted encodings\n\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {\n    return provided[priorities.indexOf(priority)];\n  });\n}\n/**\n * Compare two specs.\n * @private\n */\n\n\nfunction compareSpecs(a, b) {\n  return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;\n}\n/**\n * Get full encoding string.\n * @private\n */\n\n\nfunction getFullEncoding(spec) {\n  return spec.encoding;\n}\n/**\n * Check if a spec has any quality.\n * @private\n */\n\n\nfunction isQuality(spec) {\n  return spec.q > 0;\n}","map":{"version":3,"sources":["/Users/admin/Desktop/Newsletter-Signup/Full-Stack-Project-Assessment/client/node_modules/negotiator/lib/encoding.js"],"names":["module","exports","preferredEncodings","simpleEncodingRegExp","parseAcceptEncoding","accept","accepts","split","hasIdentity","minQuality","i","j","length","encoding","parseEncoding","trim","specify","Math","min","q","str","match","exec","params","p","parseFloat","getEncodingPriority","accepted","index","priority","o","s","spec","toLowerCase","provided","filter","isQuality","sort","compareSpecs","map","getFullEncoding","priorities","getPriority","type","getEncoding","indexOf","a","b"],"mappings":"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","sourcesContent":["/**\n * negotiator\n * Copyright(c) 2012 Isaac Z. Schlueter\n * Copyright(c) 2014 Federico Romero\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = preferredEncodings;\nmodule.exports.preferredEncodings = preferredEncodings;\n\n/**\n * Module variables.\n * @private\n */\n\nvar simpleEncodingRegExp = /^\\s*([^\\s;]+)\\s*(?:;(.*))?$/;\n\n/**\n * Parse the Accept-Encoding header.\n * @private\n */\n\nfunction parseAcceptEncoding(accept) {\n  var accepts = accept.split(',');\n  var hasIdentity = false;\n  var minQuality = 1;\n\n  for (var i = 0, j = 0; i < accepts.length; i++) {\n    var encoding = parseEncoding(accepts[i].trim(), i);\n\n    if (encoding) {\n      accepts[j++] = encoding;\n      hasIdentity = hasIdentity || specify('identity', encoding);\n      minQuality = Math.min(minQuality, encoding.q || 1);\n    }\n  }\n\n  if (!hasIdentity) {\n    /*\n     * If identity doesn't explicitly appear in the accept-encoding header,\n     * it's added to the list of acceptable encoding with the lowest q\n     */\n    accepts[j++] = {\n      encoding: 'identity',\n      q: minQuality,\n      i: i\n    };\n  }\n\n  // trim accepts\n  accepts.length = j;\n\n  return accepts;\n}\n\n/**\n * Parse an encoding from the Accept-Encoding header.\n * @private\n */\n\nfunction parseEncoding(str, i) {\n  var match = simpleEncodingRegExp.exec(str);\n  if (!match) return null;\n\n  var encoding = match[1];\n  var q = 1;\n  if (match[2]) {\n    var params = match[2].split(';');\n    for (var j = 0; j < params.length; j++) {\n      var p = params[j].trim().split('=');\n      if (p[0] === 'q') {\n        q = parseFloat(p[1]);\n        break;\n      }\n    }\n  }\n\n  return {\n    encoding: encoding,\n    q: q,\n    i: i\n  };\n}\n\n/**\n * Get the priority of an encoding.\n * @private\n */\n\nfunction getEncodingPriority(encoding, accepted, index) {\n  var priority = {o: -1, q: 0, s: 0};\n\n  for (var i = 0; i < accepted.length; i++) {\n    var spec = specify(encoding, accepted[i], index);\n\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n      priority = spec;\n    }\n  }\n\n  return priority;\n}\n\n/**\n * Get the specificity of the encoding.\n * @private\n */\n\nfunction specify(encoding, spec, index) {\n  var s = 0;\n  if(spec.encoding.toLowerCase() === encoding.toLowerCase()){\n    s |= 1;\n  } else if (spec.encoding !== '*' ) {\n    return null\n  }\n\n  return {\n    i: index,\n    o: spec.i,\n    q: spec.q,\n    s: s\n  }\n};\n\n/**\n * Get the preferred encodings from an Accept-Encoding header.\n * @public\n */\n\nfunction preferredEncodings(accept, provided) {\n  var accepts = parseAcceptEncoding(accept || '');\n\n  if (!provided) {\n    // sorted list of all encodings\n    return accepts\n      .filter(isQuality)\n      .sort(compareSpecs)\n      .map(getFullEncoding);\n  }\n\n  var priorities = provided.map(function getPriority(type, index) {\n    return getEncodingPriority(type, accepts, index);\n  });\n\n  // sorted list of accepted encodings\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {\n    return provided[priorities.indexOf(priority)];\n  });\n}\n\n/**\n * Compare two specs.\n * @private\n */\n\nfunction compareSpecs(a, b) {\n  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;\n}\n\n/**\n * Get full encoding string.\n * @private\n */\n\nfunction getFullEncoding(spec) {\n  return spec.encoding;\n}\n\n/**\n * Check if a spec has any quality.\n * @private\n */\n\nfunction isQuality(spec) {\n  return spec.q > 0;\n}\n"]},"metadata":{},"sourceType":"script"}