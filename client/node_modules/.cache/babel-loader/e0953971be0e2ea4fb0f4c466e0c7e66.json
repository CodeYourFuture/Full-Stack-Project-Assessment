{"ast":null,"code":"'use strict';\n\nimport utils from './../utils.js'; // RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\n\nconst ignoreDuplicateOf = utils.toObjectSet(['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent']);\n/**\r\n * Parse headers into an object\r\n *\r\n * ```\r\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\r\n * Content-Type: application/json\r\n * Connection: keep-alive\r\n * Transfer-Encoding: chunked\r\n * ```\r\n *\r\n * @param {String} rawHeaders Headers needing to be parsed\r\n *\r\n * @returns {Object} Headers parsed into an object\r\n */\n\nexport default (rawHeaders => {\n  const parsed = {};\n  let key;\n  let val;\n  let i;\n  rawHeaders && rawHeaders.split('\\n').forEach(function parser(line) {\n    i = line.indexOf(':');\n    key = line.substring(0, i).trim().toLowerCase();\n    val = line.substring(i + 1).trim();\n\n    if (!key || parsed[key] && ignoreDuplicateOf[key]) {\n      return;\n    }\n\n    if (key === 'set-cookie') {\n      if (parsed[key]) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [val];\n      }\n    } else {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  });\n  return parsed;\n});","map":{"version":3,"sources":["C:/Users/onura/Documents/GitHub/Full-Stack-Project-Assessment/client/node_modules/axios/lib/helpers/parseHeaders.js"],"names":["utils","ignoreDuplicateOf","toObjectSet","rawHeaders","parsed","key","val","i","split","forEach","parser","line","indexOf","substring","trim","toLowerCase","push"],"mappings":"AAAA;;AAEA,OAAOA,KAAP,MAAkB,eAAlB,C,CAEA;AACA;;AACA,MAAMC,iBAAiB,GAAGD,KAAK,CAACE,WAAN,CAAkB,CAC1C,KAD0C,EACnC,eADmC,EAClB,gBADkB,EACA,cADA,EACgB,MADhB,EAE1C,SAF0C,EAE/B,MAF+B,EAEvB,MAFuB,EAEf,mBAFe,EAEM,qBAFN,EAG1C,eAH0C,EAGzB,UAHyB,EAGb,cAHa,EAGG,qBAHH,EAI1C,SAJ0C,EAI/B,aAJ+B,EAIhB,YAJgB,CAAlB,CAA1B;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAeC,UAAU,IAAI;AAC3B,QAAMC,MAAM,GAAG,EAAf;AACA,MAAIC,GAAJ;AACA,MAAIC,GAAJ;AACA,MAAIC,CAAJ;AAEAJ,EAAAA,UAAU,IAAIA,UAAU,CAACK,KAAX,CAAiB,IAAjB,EAAuBC,OAAvB,CAA+B,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;AACjEJ,IAAAA,CAAC,GAAGI,IAAI,CAACC,OAAL,CAAa,GAAb,CAAJ;AACAP,IAAAA,GAAG,GAAGM,IAAI,CAACE,SAAL,CAAe,CAAf,EAAkBN,CAAlB,EAAqBO,IAArB,GAA4BC,WAA5B,EAAN;AACAT,IAAAA,GAAG,GAAGK,IAAI,CAACE,SAAL,CAAeN,CAAC,GAAG,CAAnB,EAAsBO,IAAtB,EAAN;;AAEA,QAAI,CAACT,GAAD,IAASD,MAAM,CAACC,GAAD,CAAN,IAAeJ,iBAAiB,CAACI,GAAD,CAA7C,EAAqD;AACnD;AACD;;AAED,QAAIA,GAAG,KAAK,YAAZ,EAA0B;AACxB,UAAID,MAAM,CAACC,GAAD,CAAV,EAAiB;AACfD,QAAAA,MAAM,CAACC,GAAD,CAAN,CAAYW,IAAZ,CAAiBV,GAAjB;AACD,OAFD,MAEO;AACLF,QAAAA,MAAM,CAACC,GAAD,CAAN,GAAc,CAACC,GAAD,CAAd;AACD;AACF,KAND,MAMO;AACLF,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAAN,GAAc,IAAd,GAAqBC,GAAnC,GAAyCA,GAAvD;AACD;AACF,GAlBa,CAAd;AAoBA,SAAOF,MAAP;AACD,CA3BD","sourcesContent":["'use strict';\r\n\r\nimport utils from './../utils.js';\r\n\r\n// RawAxiosHeaders whose duplicates are ignored by node\r\n// c.f. https://nodejs.org/api/http.html#http_message_headers\r\nconst ignoreDuplicateOf = utils.toObjectSet([\r\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\r\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\r\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\r\n  'referer', 'retry-after', 'user-agent'\r\n]);\r\n\r\n/**\r\n * Parse headers into an object\r\n *\r\n * ```\r\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\r\n * Content-Type: application/json\r\n * Connection: keep-alive\r\n * Transfer-Encoding: chunked\r\n * ```\r\n *\r\n * @param {String} rawHeaders Headers needing to be parsed\r\n *\r\n * @returns {Object} Headers parsed into an object\r\n */\r\nexport default rawHeaders => {\r\n  const parsed = {};\r\n  let key;\r\n  let val;\r\n  let i;\r\n\r\n  rawHeaders && rawHeaders.split('\\n').forEach(function parser(line) {\r\n    i = line.indexOf(':');\r\n    key = line.substring(0, i).trim().toLowerCase();\r\n    val = line.substring(i + 1).trim();\r\n\r\n    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {\r\n      return;\r\n    }\r\n\r\n    if (key === 'set-cookie') {\r\n      if (parsed[key]) {\r\n        parsed[key].push(val);\r\n      } else {\r\n        parsed[key] = [val];\r\n      }\r\n    } else {\r\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\r\n    }\r\n  });\r\n\r\n  return parsed;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}