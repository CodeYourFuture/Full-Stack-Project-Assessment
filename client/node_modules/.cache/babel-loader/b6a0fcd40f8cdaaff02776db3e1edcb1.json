{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\n *\n * This component can be useful in a variety of situations:\n *\n * *   Escape hatch for broken dependencies not supporting SSR.\n * *   Improve the time-to-first paint on the client by only rendering above the fold.\n * *   Reduce the rendering time on the server.\n * *   Under too heavy server load, you can turn on service degradation.\n *\n * Demos:\n *\n * - [No SSR](https://mui.com/base-ui/react-no-ssr/)\n *\n * API:\n *\n * - [NoSsr API](https://mui.com/base-ui/react-no-ssr/components-api/#no-ssr)\n */\n\nfunction NoSsr(props) {\n  const {\n    children,\n    defer = false,\n    fallback = null\n  } = props;\n  const [mountedState, setMountedState] = React.useState(false);\n  useEnhancedEffect(() => {\n    if (!defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n  React.useEffect(() => {\n    if (defer) {\n      setMountedState(true);\n    }\n  }, [defer]); // We need the Fragment here to force react-docgen to recognise NoSsr as a component.\n\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: mountedState ? children : fallback\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? NoSsr.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * If `true`, the component will not only prevent server-side rendering.\n   * It will also defer the rendering of the children into a different screen frame.\n   * @default false\n   */\n  defer: PropTypes.bool,\n\n  /**\n   * The fallback content to display.\n   * @default null\n   */\n  fallback: PropTypes.node\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  NoSsr['propTypes' + ''] = exactProp(NoSsr.propTypes);\n}\n\nexport { NoSsr };","map":{"version":3,"sources":["/home/coder/Documents/CYF1/Full-Stack-Project-Assessment/client/node_modules/@mui/base/NoSsr/NoSsr.js"],"names":["React","PropTypes","exactProp","unstable_useEnhancedEffect","useEnhancedEffect","jsx","_jsx","NoSsr","props","children","defer","fallback","mountedState","setMountedState","useState","useEffect","Fragment","process","env","NODE_ENV","propTypes","node","bool"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,EAAoBC,0BAA0B,IAAIC,iBAAlD,QAA2E,YAA3E;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,KAAK,GAAG,KAFJ;AAGJC,IAAAA,QAAQ,GAAG;AAHP,MAIFH,KAJJ;AAKA,QAAM,CAACI,YAAD,EAAeC,eAAf,IAAkCb,KAAK,CAACc,QAAN,CAAe,KAAf,CAAxC;AACAV,EAAAA,iBAAiB,CAAC,MAAM;AACtB,QAAI,CAACM,KAAL,EAAY;AACVG,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD;AACF,GAJgB,EAId,CAACH,KAAD,CAJc,CAAjB;AAKAV,EAAAA,KAAK,CAACe,SAAN,CAAgB,MAAM;AACpB,QAAIL,KAAJ,EAAW;AACTG,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD;AACF,GAJD,EAIG,CAACH,KAAD,CAJH,EAZoB,CAkBpB;;AACA,SAAO,aAAaJ,IAAI,CAACN,KAAK,CAACgB,QAAP,EAAiB;AACvCP,IAAAA,QAAQ,EAAEG,YAAY,GAAGH,QAAH,GAAcE;AADG,GAAjB,CAAxB;AAGD;;AACDM,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCZ,KAAK,CAACa;AAAU;AAAhB,EAAyC;AAC/E;AACA;AACA;AACA;;AACA;AACF;AACA;AACEX,EAAAA,QAAQ,EAAER,SAAS,CAACoB,IAR2D;;AAS/E;AACF;AACA;AACA;AACA;AACEX,EAAAA,KAAK,EAAET,SAAS,CAACqB,IAd8D;;AAe/E;AACF;AACA;AACA;AACEX,EAAAA,QAAQ,EAAEV,SAAS,CAACoB;AAnB2D,CAAjF,GAoBI,KAAK,CApBT;;AAqBA,IAAIJ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACAZ,EAAAA,KAAK,CAAC,cAAc,EAAf,CAAL,GAA0BL,SAAS,CAACK,KAAK,CAACa,SAAP,CAAnC;AACD;;AACD,SAASb,KAAT","sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\n *\n * This component can be useful in a variety of situations:\n *\n * *   Escape hatch for broken dependencies not supporting SSR.\n * *   Improve the time-to-first paint on the client by only rendering above the fold.\n * *   Reduce the rendering time on the server.\n * *   Under too heavy server load, you can turn on service degradation.\n *\n * Demos:\n *\n * - [No SSR](https://mui.com/base-ui/react-no-ssr/)\n *\n * API:\n *\n * - [NoSsr API](https://mui.com/base-ui/react-no-ssr/components-api/#no-ssr)\n */\nfunction NoSsr(props) {\n  const {\n    children,\n    defer = false,\n    fallback = null\n  } = props;\n  const [mountedState, setMountedState] = React.useState(false);\n  useEnhancedEffect(() => {\n    if (!defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n  React.useEffect(() => {\n    if (defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n\n  // We need the Fragment here to force react-docgen to recognise NoSsr as a component.\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: mountedState ? children : fallback\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? NoSsr.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n  /**\n   * If `true`, the component will not only prevent server-side rendering.\n   * It will also defer the rendering of the children into a different screen frame.\n   * @default false\n   */\n  defer: PropTypes.bool,\n  /**\n   * The fallback content to display.\n   * @default null\n   */\n  fallback: PropTypes.node\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  NoSsr['propTypes' + ''] = exactProp(NoSsr.propTypes);\n}\nexport { NoSsr };"]},"metadata":{},"sourceType":"module"}