{"ast":null,"code":"import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\n/* eslint-disable @typescript-eslint/naming-convention */\n\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\n\nfunction clamp(value) {\n  let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nexport function hexToRgb(color) {\n  color = color.slice(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\n\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\n\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported \\`${color}\\` color.\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : _formatMuiErrorMessage(9, color));\n  }\n\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: unsupported \\`${colorSpace}\\` color space.\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : _formatMuiErrorMessage(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n/**\n * Returns a channel created from the input color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {string} - The channel for the color, that can be used in rgba or hsla colors\n */\n\nexport const colorChannel = color => {\n  const decomposedColor = decomposeColor(color);\n  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf('hsl') !== -1 && idx !== 0 ? `${val}%` : val).join(' ');\n};\nexport const private_safeColorChannel = (color, warning) => {\n  try {\n    return colorChannel(color);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n\n    return color;\n  }\n};\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\nexport function recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n\n  if (type.indexOf('color') !== -1) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n\n  return `${type}(${values})`;\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\n}\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n\n  const f = function (n) {\n    let k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\nexport function getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function alpha(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  if (color.type === 'color') {\n    color.values[3] = `/${value}`;\n  } else {\n    color.values[3] = value;\n  }\n\n  return recomposeColor(color);\n}\nexport function private_safeAlpha(color, value, warning) {\n  try {\n    return alpha(color, value);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n\n    return color;\n  }\n}\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\nexport function private_safeDarken(color, coefficient, warning) {\n  try {\n    return darken(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n\n    return color;\n  }\n}\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\nexport function private_safeLighten(color, coefficient, warning) {\n  try {\n    return lighten(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n\n    return color;\n  }\n}\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function emphasize(color) {\n  let coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\nexport function private_safeEmphasize(color, coefficient, warning) {\n  try {\n    return private_safeEmphasize(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n\n    return color;\n  }\n}","map":{"version":3,"sources":["/Users/shadifakhri/Documents/Full-Stack-Project-Assessment/Full-Stack-Project-Assessment/client/node_modules/@mui/system/esm/colorManipulator.js"],"names":["formatMuiErrorMessage","_formatMuiErrorMessage","clamp","value","min","max","process","env","NODE_ENV","console","error","Math","hexToRgb","color","slice","re","RegExp","length","colors","match","map","n","index","parseInt","round","join","intToHex","int","hex","toString","decomposeColor","type","charAt","marker","indexOf","substring","Error","values","colorSpace","split","shift","parseFloat","colorChannel","decomposedColor","val","idx","private_safeColorChannel","warning","warn","recomposeColor","i","rgbToHex","hslToRgb","h","s","l","a","f","k","rgb","push","getLuminance","Number","toFixed","getContrastRatio","foreground","background","lumA","lumB","alpha","private_safeAlpha","darken","coefficient","private_safeDarken","lighten","private_safeLighten","emphasize","private_safeEmphasize"],"mappings":"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","sourcesContent":["import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\n/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value, min = 0, max = 1) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n  return Math.min(Math.max(min, value), max);\n}\n\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\nexport function hexToRgb(color) {\n  color = color.slice(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported \\`${color}\\` color.\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : _formatMuiErrorMessage(9, color));\n  }\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: unsupported \\`${colorSpace}\\` color space.\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : _formatMuiErrorMessage(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n\n/**\n * Returns a channel created from the input color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {string} - The channel for the color, that can be used in rgba or hsla colors\n */\nexport const colorChannel = color => {\n  const decomposedColor = decomposeColor(color);\n  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf('hsl') !== -1 && idx !== 0 ? `${val}%` : val).join(' ');\n};\nexport const private_safeColorChannel = (color, warning) => {\n  try {\n    return colorChannel(color);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n};\n\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\nexport function recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n  if (type.indexOf('color') !== -1) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n  return `${type}(${values})`;\n}\n\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\n}\n\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  });\n\n  // Truncate at 3 digits\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\nexport function getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function alpha(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n  if (color.type === 'color') {\n    color.values[3] = `/${value}`;\n  } else {\n    color.values[3] = value;\n  }\n  return recomposeColor(color);\n}\nexport function private_safeAlpha(color, value, warning) {\n  try {\n    return alpha(color, value);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nexport function private_safeDarken(color, coefficient, warning) {\n  try {\n    return darken(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nexport function private_safeLighten(color, coefficient, warning) {\n  try {\n    return lighten(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\nexport function private_safeEmphasize(color, coefficient, warning) {\n  try {\n    return private_safeEmphasize(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}"]},"metadata":{},"sourceType":"module"}