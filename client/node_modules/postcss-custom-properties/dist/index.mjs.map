{"version":3,"file":"index.mjs","sources":["../src/lib/is-ignored.js","../src/lib/get-custom-properties-from-root.js","../src/lib/get-custom-properties-from-imports.js","../src/lib/transform-value-ast.js","../src/lib/transform-properties.js","../src/lib/write-custom-properties-to-exports.js","../src/index.js"],"sourcesContent":["function isBlockIgnored(ruleOrDeclaration) {\n\tvar rule = ruleOrDeclaration.selector ?\n\t\truleOrDeclaration : ruleOrDeclaration.parent;\n\n\treturn /(!\\s*)?postcss-custom-properties:\\s*off\\b/i.test(rule.toString());\n}\n\nfunction isRuleIgnored(rule) {\n\tvar previous = rule.prev();\n\n\treturn Boolean(isBlockIgnored(rule) ||\n\t\tprevious &&\n\t\tprevious.type === 'comment' &&\n\t\t/(!\\s*)?postcss-custom-properties:\\s*ignore\\s+next\\b/i.test(previous.text));\n}\n\nexport {\n\tisBlockIgnored,\n\tisRuleIgnored,\n};\n","import valuesParser from 'postcss-value-parser';\nimport { isBlockIgnored } from './is-ignored';\n\n// return custom selectors from the css root, conditionally removing them\nexport default function getCustomPropertiesFromRoot(root, opts) {\n\t// initialize custom selectors\n\tconst customPropertiesFromHtmlElement = {};\n\tconst customPropertiesFromRootPseudo = {};\n\n\t// for each html or :root rule\n\troot.nodes.slice().forEach(rule => {\n\t\tconst customPropertiesObject = isHtmlRule(rule)\n\t\t\t? customPropertiesFromHtmlElement\n\t\t: isRootRule(rule)\n\t\t\t? customPropertiesFromRootPseudo\n\t\t: null;\n\n\t\t// for each custom property\n\t\tif (customPropertiesObject) {\n\t\t\trule.nodes.slice().forEach(decl => {\n\t\t\t\tif (isCustomDecl(decl) && !isBlockIgnored(decl)) {\n\t\t\t\t\tconst { prop } = decl;\n\n\t\t\t\t\t// write the parsed value to the custom property\n\t\t\t\t\tcustomPropertiesObject[prop] = valuesParser(decl.value);\n\n\t\t\t\t\t// conditionally remove the custom property declaration\n\t\t\t\t\tif (!opts.preserve) {\n\t\t\t\t\t\tdecl.remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// conditionally remove the empty html or :root rule\n\t\t\tif (!opts.preserve && isEmptyParent(rule) && !isBlockIgnored(rule)) {\n\t\t\t\trule.remove();\n\t\t\t}\n\t\t}\n\t});\n\n\t// return all custom properties, preferring :root properties over html properties\n\treturn { ...customPropertiesFromHtmlElement, ...customPropertiesFromRootPseudo };\n}\n\n// match html and :root rules\nconst htmlSelectorRegExp = /^html$/i;\nconst rootSelectorRegExp = /^:root$/i;\nconst customPropertyRegExp = /^--[A-z][\\w-]*$/;\n\n// whether the node is an html or :root rule\nconst isHtmlRule = node => node.type === 'rule' && node.selector.split(',').some(item => htmlSelectorRegExp.test(item)) && Object(node.nodes).length;\nconst isRootRule = node => node.type === 'rule' && node.selector.split(',').some(item => rootSelectorRegExp.test(item)) && Object(node.nodes).length;\n\n// whether the node is an custom property\nconst isCustomDecl = node => node.type === 'decl' && customPropertyRegExp.test(node.prop);\n\n// whether the node is a parent without children\nconst isEmptyParent = node => Object(node.nodes).length === 0;\n","import fs from 'fs';\nimport path from 'path';\nimport { parse } from 'postcss';\nimport valuesParser from 'postcss-value-parser';\nimport getCustomPropertiesFromRoot from './get-custom-properties-from-root';\n\n/* Get Custom Properties from CSS File\n/* ========================================================================== */\n\nasync function getCustomPropertiesFromCSSFile(from) {\n\tconst css = await readFile(from);\n\tconst root = parse(css, { from });\n\n\treturn getCustomPropertiesFromRoot(root, { preserve: true });\n}\n\n/* Get Custom Properties from Object\n/* ========================================================================== */\n\nfunction getCustomPropertiesFromObject(object) {\n\tconst customProperties = Object.assign(\n\t\t{},\n\t\tObject(object).customProperties,\n\t\tObject(object)['custom-properties'],\n\t);\n\n\tfor (const key in customProperties) {\n\t\tcustomProperties[key] = valuesParser(String(customProperties[key]));\n\t}\n\n\treturn customProperties;\n}\n\n/* Get Custom Properties from JSON file\n/* ========================================================================== */\n\nasync function getCustomPropertiesFromJSONFile(from) {\n\tconst object = await readJSON(from);\n\n\treturn getCustomPropertiesFromObject(object);\n}\n\n/* Get Custom Properties from JS file\n/* ========================================================================== */\n\nasync function getCustomPropertiesFromJSFile(from) {\n\tconst object = await import(from);\n\n\treturn getCustomPropertiesFromObject(object);\n}\n\n/* Get Custom Properties from Imports\n/* ========================================================================== */\n\nexport default function getCustomPropertiesFromImports(sources) {\n\treturn sources.map(source => {\n\t\tif (source instanceof Promise) {\n\t\t\treturn source;\n\t\t} else if (source instanceof Function) {\n\t\t\treturn source();\n\t\t}\n\n\t\t// read the source as an object\n\t\tconst opts = source === Object(source) ? source : { from: String(source) };\n\n\t\t// skip objects with Custom Properties\n\t\tif (opts.customProperties || opts['custom-properties']) {\n\t\t\treturn opts;\n\t\t}\n\n\t\t// source pathname\n\t\tconst from = path.resolve(String(opts.from || ''));\n\n\t\t// type of file being read from\n\t\tconst type = (opts.type || path.extname(from).slice(1)).toLowerCase();\n\n\t\treturn { type, from };\n\t}).reduce(async (customProperties, source) => {\n\t\tconst { type, from } = await source;\n\n\t\tif (type === 'css' || type === 'pcss') {\n\t\t\treturn Object.assign(await customProperties, await getCustomPropertiesFromCSSFile(from));\n\t\t}\n\n\t\tif (type === 'js') {\n\t\t\treturn Object.assign(await customProperties, await getCustomPropertiesFromJSFile(from));\n\t\t}\n\n\t\tif (type === 'json') {\n\t\t\treturn Object.assign(await customProperties, await getCustomPropertiesFromJSONFile(from));\n\t\t}\n\n\t\treturn Object.assign(await customProperties, await getCustomPropertiesFromObject(await source));\n\t}, {});\n}\n\n/* Helper utilities\n/* ========================================================================== */\n\nconst readFile = from => new Promise((resolve, reject) => {\n\tfs.readFile(from, 'utf8', (error, result) => {\n\t\tif (error) {\n\t\t\treject(error);\n\t\t} else {\n\t\t\tresolve(result);\n\t\t}\n\t});\n});\n\nconst readJSON = async from => JSON.parse(await readFile(from));\n","export default function transformValueAST(root, customProperties) {\n\tif (root.nodes && root.nodes.length) {\n\t\troot.nodes.slice().forEach((child) => {\n\t\t\tif (isVarFunction(child)) {\n\t\t\t\tconst [propertyNode, ...fallbacks] = child.nodes.filter((node) => node.type !== 'div');\n\t\t\t\tconst { value: name } = propertyNode;\n\t\t\t\tconst index = root.nodes.indexOf(child);\n\n\t\t\t\tif (name in Object(customProperties)) {\n\t\t\t\t\t// Direct match of a custom property to a parsed value\n\t\t\t\t\tconst nodes = customProperties[name].nodes;\n\n\t\t\t\t\t// Re-transform nested properties without given one to avoid circular from keeping this forever\n\t\t\t\t\tretransformValueAST({ nodes }, customProperties, name);\n\n\t\t\t\t\tif (index > -1) {\n\t\t\t\t\t\troot.nodes.splice(index, 1, ...nodes);\n\t\t\t\t\t}\n\t\t\t\t} else if (fallbacks.length) {\n\t\t\t\t\t// No match, but fallback available\n\t\t\t\t\tif (index > -1) {\n\t\t\t\t\t\troot.nodes.splice(index, 1, ...fallbacks);\n\t\t\t\t\t}\n\n\t\t\t\t\ttransformValueAST(root, customProperties);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Transform child nodes of current child\n\t\t\t\ttransformValueAST(child, customProperties);\n\t\t\t}\n\t\t});\n\t}\n\n\treturn root.toString();\n}\n\n// retransform the current ast without a custom property (to prevent recursion)\nfunction retransformValueAST(root, customProperties, withoutProperty) {\n\tconst nextCustomProperties = Object.assign({}, customProperties);\n\n\tdelete nextCustomProperties[withoutProperty];\n\n\treturn transformValueAST(root, nextCustomProperties);\n}\n\n// match var() functions\nconst varRegExp = /^var$/i;\n\n// whether the node is a var() function\nconst isVarFunction = node => node.type === 'function' && varRegExp.test(node.value) && Object(node.nodes).length > 0;\n","import valuesParser from 'postcss-value-parser';\nimport transformValueAST from './transform-value-ast';\nimport { isRuleIgnored } from './is-ignored';\n\n// transform custom pseudo selectors with custom selectors\nexport default (decl, customProperties, opts) => {\n\tif (isTransformableDecl(decl) && !isRuleIgnored(decl)) {\n\t\tconst originalValue = decl.value;\n\t\tconst valueAST = valuesParser(originalValue);\n\t\tlet value = transformValueAST(valueAST, customProperties);\n\n\t\t// protect against circular references\n\t\tconst valueSet = new Set();\n\n\t\twhile (customPropertiesRegExp.test(value) && !valueSet.has(value)) {\n\t\t\tvalueSet.add(value);\n\t\t\tconst parsedValueAST = valuesParser(value);\n\t\t\tvalue = transformValueAST(parsedValueAST, customProperties);\n\t\t}\n\n\t\t// conditionally transform values that have changed\n\t\tif (value !== originalValue) {\n\t\t\tif (opts.preserve) {\n\t\t\t\tconst beforeDecl = decl.cloneBefore({ value });\n\n\t\t\t\tif (hasTrailingComment(beforeDecl)) {\n\t\t\t\t\tbeforeDecl.raws.value.value = beforeDecl.value.replace(trailingCommentRegExp, '$1');\n\t\t\t\t\tbeforeDecl.raws.value.raw = beforeDecl.raws.value.value + beforeDecl.raws.value.raw.replace(trailingCommentRegExp, '$2');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdecl.value = value;\n\n\t\t\t\tif (hasTrailingComment(decl)) {\n\t\t\t\t\tdecl.raws.value.value = decl.value.replace(trailingCommentRegExp, '$1');\n\t\t\t\t\tdecl.raws.value.raw = decl.raws.value.value + decl.raws.value.raw.replace(trailingCommentRegExp, '$2');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// match custom properties\nconst customPropertyRegExp = /^--[A-z][\\w-]*$/;\n\n// match custom property inclusions\nconst customPropertiesRegExp = /(^|[^\\w-])var\\([\\W\\w]+\\)/;\n\n// whether the declaration should be potentially transformed\nconst isTransformableDecl = decl => !customPropertyRegExp.test(decl.prop) && customPropertiesRegExp.test(decl.value);\n\n// whether the declaration has a trailing comment\nconst hasTrailingComment = decl => 'value' in Object(Object(decl.raws).value) && 'raw' in decl.raws.value && trailingCommentRegExp.test(decl.raws.value.raw);\nconst trailingCommentRegExp = /^([\\W\\w]+)(\\s*\\/\\*[\\W\\w]+?\\*\\/)$/;\n","import fs from 'fs';\nimport path from 'path';\n\n/* Write Custom Properties to CSS File\n/* ========================================================================== */\n\nasync function writeCustomPropertiesToCssFile(to, customProperties) {\n\tconst cssContent = Object.keys(customProperties).reduce((cssLines, name) => {\n\t\tcssLines.push(`\\t${name}: ${customProperties[name]};`);\n\n\t\treturn cssLines;\n\t}, []).join('\\n');\n\tconst css = `:root {\\n${cssContent}\\n}\\n`;\n\n\tawait writeFile(to, css);\n}\n\n/* Write Custom Properties to SCSS File\n/* ========================================================================== */\n\nasync function writeCustomPropertiesToScssFile(to, customProperties) {\n\tconst scssContent = Object.keys(customProperties).reduce((scssLines, name) => {\n\t\tconst scssName = name.replace('--', '$');\n\t\tscssLines.push(`${scssName}: ${customProperties[name]};`);\n\n\t\treturn scssLines;\n\t}, []).join('\\n');\n\tconst scss = `${scssContent}\\n`;\n\n\tawait writeFile(to, scss);\n}\n\n/* Write Custom Properties to JSON file\n/* ========================================================================== */\n\nasync function writeCustomPropertiesToJsonFile(to, customProperties) {\n\tconst jsonContent = JSON.stringify({\n\t\t'custom-properties': customProperties,\n\t}, null, '  ');\n\tconst json = `${jsonContent}\\n`;\n\n\tawait writeFile(to, json);\n}\n\n/* Write Custom Properties to Common JS file\n/* ========================================================================== */\n\nasync function writeCustomPropertiesToCjsFile(to, customProperties) {\n\tconst jsContents = Object.keys(customProperties).reduce((jsLines, name) => {\n\t\tjsLines.push(`\\t\\t'${escapeForJS(name)}': '${escapeForJS(customProperties[name])}'`);\n\n\t\treturn jsLines;\n\t}, []).join(',\\n');\n\tconst js = `module.exports = {\\n\\tcustomProperties: {\\n${jsContents}\\n\\t}\\n};\\n`;\n\n\tawait writeFile(to, js);\n}\n\n/* Write Custom Properties to Module JS file\n/* ========================================================================== */\n\nasync function writeCustomPropertiesToMjsFile(to, customProperties) {\n\tconst mjsContents = Object.keys(customProperties).reduce((mjsLines, name) => {\n\t\tmjsLines.push(`\\t'${escapeForJS(name)}': '${escapeForJS(customProperties[name])}'`);\n\n\t\treturn mjsLines;\n\t}, []).join(',\\n');\n\tconst mjs = `export const customProperties = {\\n${mjsContents}\\n};\\n`;\n\n\tawait writeFile(to, mjs);\n}\n\n/* Write Custom Properties to Exports\n/* ========================================================================== */\n\nexport default function writeCustomPropertiesToExports(customProperties, destinations) {\n\treturn Promise.all(destinations.map(async destination => {\n\t\tif (destination instanceof Function) {\n\t\t\tawait destination(defaultCustomPropertiesToJSON(customProperties));\n\t\t} else {\n\t\t\t// read the destination as an object\n\t\t\tconst opts = destination === Object(destination) ? destination : { to: String(destination) };\n\n\t\t\t// transformer for Custom Properties into a JSON-compatible object\n\t\t\tconst toJSON = opts.toJSON || defaultCustomPropertiesToJSON;\n\n\t\t\tif ('customProperties' in opts) {\n\t\t\t\t// write directly to an object as customProperties\n\t\t\t\topts.customProperties = toJSON(customProperties);\n\t\t\t} else if ('custom-properties' in opts) {\n\t\t\t\t// write directly to an object as custom-properties\n\t\t\t\topts['custom-properties'] = toJSON(customProperties);\n\t\t\t} else {\n\t\t\t\t// destination pathname\n\t\t\t\tconst to = String(opts.to || '');\n\n\t\t\t\t// type of file being written to\n\t\t\t\tconst type = (opts.type || path.extname(opts.to).slice(1)).toLowerCase();\n\n\t\t\t\t// transformed Custom Properties\n\t\t\t\tconst customPropertiesJSON = toJSON(customProperties);\n\n\t\t\t\tif (type === 'css') {\n\t\t\t\t\tawait writeCustomPropertiesToCssFile(to, customPropertiesJSON);\n\t\t\t\t}\n\n\t\t\t\tif (type === 'scss') {\n\t\t\t\t\tawait writeCustomPropertiesToScssFile(to, customPropertiesJSON);\n\t\t\t\t}\n\n\t\t\t\tif (type === 'js') {\n\t\t\t\t\tawait writeCustomPropertiesToCjsFile(to, customPropertiesJSON);\n\t\t\t\t}\n\n\t\t\t\tif (type === 'json') {\n\t\t\t\t\tawait writeCustomPropertiesToJsonFile(to, customPropertiesJSON);\n\t\t\t\t}\n\n\t\t\t\tif (type === 'mjs') {\n\t\t\t\t\tawait writeCustomPropertiesToMjsFile(to, customPropertiesJSON);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}));\n}\n\n/* Helper utilities\n/* ========================================================================== */\n\nconst defaultCustomPropertiesToJSON = customProperties => {\n\treturn Object.keys(customProperties).reduce((customPropertiesJSON, key) => {\n\t\tconst valueNodes = customProperties[key];\n\t\tcustomPropertiesJSON[key] = valueNodes.toString();\n\n\t\treturn customPropertiesJSON;\n\t}, {});\n};\n\nconst writeFile = (to, text) => new Promise((resolve, reject) => {\n\tfs.writeFile(to, text, error => {\n\t\tif (error) {\n\t\t\treject(error);\n\t\t} else {\n\t\t\tresolve();\n\t\t}\n\t});\n});\n\nconst escapeForJS = string => string.replace(/\\\\([\\s\\S])|(')/g, '\\\\$1$2').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n","import getCustomPropertiesFromRoot from './lib/get-custom-properties-from-root';\nimport getCustomPropertiesFromImports from './lib/get-custom-properties-from-imports';\nimport transformProperties from './lib/transform-properties';\nimport writeCustomPropertiesToExports from './lib/write-custom-properties-to-exports';\n\nconst creator = opts => {\n\t// whether to preserve custom selectors and rules using them\n\tconst preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : true;\n\n\t// sources to import custom selectors from\n\tconst importFrom = [].concat(Object(opts).importFrom || []);\n\n\t// destinations to export custom selectors to\n\tconst exportTo = [].concat(Object(opts).exportTo || []);\n\n\t// promise any custom selectors are imported\n\tconst customPropertiesPromise = getCustomPropertiesFromImports(importFrom);\n\n\tlet customProperties;\n\n\t// whether to return synchronous function if no asynchronous operations are requested\n\tconst canReturnSyncFunction = importFrom.length === 0 && exportTo.length === 0;\n\n\treturn {\n\t\tpostcssPlugin: 'postcss-custom-properties',\n\t\tprepare ({ root }) {\n\t\t\tif (canReturnSyncFunction) {\n\t\t\t\tcustomProperties = getCustomPropertiesFromRoot(root, { preserve });\n\n\t\t\t\treturn {\n\t\t\t\t\tDeclaration: (decl) => transformProperties(decl, customProperties, { preserve }),\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\tOnce: async root => {\n\t\t\t\t\t\tcustomProperties = Object.assign(\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tgetCustomPropertiesFromRoot(root, { preserve }),\n\t\t\t\t\t\t\tawait customPropertiesPromise,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tawait writeCustomPropertiesToExports(customProperties, exportTo);\n\t\t\t\t\t},\n\t\t\t\t\tDeclaration: (decl) => transformProperties(decl, customProperties, { preserve }),\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\t};\n};\n\ncreator.postcss = true;\n\nexport default creator;\n"],"names":["isBlockIgnored","ruleOrDeclaration","rule","selector","parent","test","toString","getCustomPropertiesFromRoot","root","opts","customPropertiesFromHtmlElement","customPropertiesFromRootPseudo","nodes","slice","forEach","customPropertiesObject","isHtmlRule","isRootRule","decl","isCustomDecl","prop","valuesParser","value","preserve","remove","isEmptyParent","htmlSelectorRegExp","rootSelectorRegExp","customPropertyRegExp","node","type","split","some","item","Object","length","getCustomPropertiesFromObject","object","customProperties","assign","key","String","getCustomPropertiesFromImports","sources","map","source","Promise","Function","from","path","resolve","extname","toLowerCase","reduce","async","css","readFile","parse","getCustomPropertiesFromCSSFile","import","getCustomPropertiesFromJSFile","readJSON","getCustomPropertiesFromJSONFile","reject","fs","error","result","JSON","transformValueAST","child","isVarFunction","propertyNode","fallbacks","filter","name","index","indexOf","withoutProperty","nextCustomProperties","retransformValueAST","splice","varRegExp","isTransformableDecl","previous","prev","Boolean","text","originalValue","valueSet","Set","customPropertiesRegExp","has","add","beforeDecl","cloneBefore","hasTrailingComment","raws","replace","trailingCommentRegExp","raw","writeCustomPropertiesToExports","destinations","all","destination","defaultCustomPropertiesToJSON","to","toJSON","customPropertiesJSON","keys","cssLines","push","join","writeFile","writeCustomPropertiesToCssFile","scss","scssLines","scssName","writeCustomPropertiesToScssFile","js","jsLines","escapeForJS","writeCustomPropertiesToCjsFile","json","stringify","writeCustomPropertiesToJsonFile","mjs","mjsLines","writeCustomPropertiesToMjsFile","valueNodes","string","creator","importFrom","concat","exportTo","customPropertiesPromise","canReturnSyncFunction","postcssPlugin","prepare","Declaration","transformProperties","Once","postcss"],"mappings":"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"}