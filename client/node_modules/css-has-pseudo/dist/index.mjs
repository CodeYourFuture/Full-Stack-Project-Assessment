import e from"postcss-selector-parser";const r=r=>{r="object"==typeof r&&r||t;const a=Boolean(!("preserve"in r)||r.preserve);return{postcssPlugin:"css-has-pseudo",Rule:(r,{result:t})=>{if(!r.selector.includes(":has("))return;let n;try{const t=e((r=>{r.walkPseudos((r=>{if(":has"===r.value&&r.nodes){const t=o(r);r.value=t?":not-has":":has";const a=e.attribute({attribute:s(String(r))});t?r.parent.parent.replaceWith(a):r.replaceWith(a)}}))})).processSync(r.selector);n=String(t)}catch(e){return void r.warn(t,`Failed to parse selector : ${r.selector}`)}void 0!==n&&n!==r.selector&&(a?r.cloneBefore({selector:n}):r.assign({selector:n}))}}};r.postcss=!0;const t={preserve:!0},s=e=>encodeURIComponent(e).replace(/%3A/g,":").replace(/%5B/g,"[").replace(/%5D/g,"]").replace(/%2C/g,",").replace(/[():%[\],]/g,"\\$&"),o=e=>{var r,t;return"pseudo"===(null==(r=e.parent)||null==(t=r.parent)?void 0:t.type)&&":not"===e.parent.parent.value};export{r as default};
//# sourceMappingURL=index.mjs.map
